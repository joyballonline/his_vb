<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>GrapeCity.ActiveReports.Viewer.Win.v11</name>
  </assembly>
  <members>
    <member name="T:GrapeCity.ActiveReports.PrintExtension">
      <summary>ページとセクションドキュメントに対して、印刷方法を提供します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.PrintExtension.Print(GrapeCity.ActiveReports.Document.SectionDocument)">
      <summary>セクションドキュメントを印刷します。</summary>
      <param name="sectionDocument">印刷するドキュメント。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.PrintExtension.Print(GrapeCity.ActiveReports.Document.SectionDocument,System.Boolean)">
      <summary>セクションドキュメントを印刷します。</summary>
      <param name="sectionDocument">印刷するドキュメント。</param>
      <param name="showPrintDialog">Trueの場合は、印刷ダイアログが表示されます。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.PrintExtension.Print(GrapeCity.ActiveReports.Document.SectionDocument,System.Boolean,System.Boolean)">
      <summary>セクションドキュメントを印刷します。</summary>
      <param name="sectionDocument">印刷するドキュメント。</param>
      <param name="showPrintDialog">Trueの場合は、印刷ダイアログが表示されます。</param>
      <param name="showPrintProgressDialog">Trueの場合は、印刷状態の情報を示すダイアログが表示されます。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.PrintExtension.Print(GrapeCity.ActiveReports.Document.SectionDocument,GrapeCity.Viewer.Common.PrintingSettings)">
      <summary>セクションドキュメントを印刷します。</summary>
      <param name="sectionDocument">印刷するドキュメント。</param>
      <param name="settings">設定。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.PrintExtension.Print(GrapeCity.ActiveReports.Document.SectionDocument,System.Boolean,System.Boolean,System.Boolean)">
      <summary>セクションドキュメントを印刷します。</summary>
      <param name="sectionDocument">印刷するドキュメント。</param>
      <param name="showPrintDialog">Trueの場合は、印刷ダイアログが表示されます。</param>
      <param name="showPrintProgressDialog">Trueの場合は印刷状態の情報を示すダイアログが表示されます。</param>
      <param name="usePrintingThread">Trueの場合は、印刷が個別のスレッドで行われます。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.PrintExtension.Print(GrapeCity.ActiveReports.Document.PageDocument)">
      <summary>ページドキュメントを印刷します。</summary>
      <param name="pageDocument">印刷するドキュメント。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.PrintExtension.Print(GrapeCity.ActiveReports.Document.PageDocument,System.Boolean)">
      <summary>ページドキュメントを印刷します。</summary>
      <param name="pageDocument">印刷するドキュメント。</param>
      <param name="showPrintDialog">Trueの場合は、印刷ダイアログが表示されます。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.PrintExtension.Print(GrapeCity.ActiveReports.Document.PageDocument,System.Boolean,System.Boolean)">
      <summary>ページドキュメントを印刷します。</summary>
      <param name="pageDocument">印刷するドキュメント。</param>
      <param name="showPrintDialog">Trueの場合は、印刷ダイアログが表示されます。</param>
      <param name="showPrintProgressDialog">Trueの場合は、印刷状態の情報を示すダイアログが表示されます。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.PrintExtension.Print(GrapeCity.ActiveReports.Document.PageDocument,System.Boolean,System.Boolean,System.Boolean)">
      <summary>ページドキュメントを印刷します。</summary>
      <param name="pageDocument">印刷するドキュメント。</param>
      <param name="showPrintDialog">Trueの場合は、印刷ダイアログが表示されます。</param>
      <param name="showPrintProgressDialog">Trueの場合は、印刷状態の情報を示すダイアログが表示されます。</param>
      <param name="usePrintingThread">Trueの場合は、印刷が個別のスレッドで行われます。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.PrintExtension.Print(GrapeCity.ActiveReports.Document.PageDocument,GrapeCity.Viewer.Common.PrintingSettings)">
      <summary>ページドキュメントを印刷します。</summary>
      <param name="pageDocument">印刷するドキュメント。</param>
      <param name="settings">設定。</param>
    </member>
    <member name="T:GrapeCity.ActiveReports.ArsClient.RemoteReportDescriptor">
      <summary>リモートActiveReports Serverのレポートについて説明します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.ArsClient.ViewerExtension">
      <summary>GrapeCity.ActiveReports.Viewer.Win.Viewer型を拡張します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.ArsClient.RemoteReportDescriptor.#ctor">
      <summary>クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.ArsClient.RemoteReportDescriptor.AuthToken">
      <summary>レポートサーバーに接続するために使用した認証トークンを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.ArsClient.RemoteReportDescriptor.ParametersValues">
      <summary>レポートの実行するために使用されるレポートパラメータの値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.ArsClient.RemoteReportDescriptor.Password">
      <summary>レポートサーバーに接続するために使用するパスワードを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.ArsClient.RemoteReportDescriptor.ReportId">
      <summary>サーバー上のレポートIDを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.ArsClient.RemoteReportDescriptor.ReportName">
      <summary>サーバー上のレポート名を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.ArsClient.RemoteReportDescriptor.ReportServerUrl">
      <summary>レポートサーバーのためのURLを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.ArsClient.RemoteReportDescriptor.RevisionNumber">
      <summary>サーバー上のレポートのリビジョン番号を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.ArsClient.RemoteReportDescriptor.Timeout">
      <summary>サーバーと通信するためのミリ秒数を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.ArsClient.RemoteReportDescriptor.UseCache">
      <summary>レポート描画の結果がキャッシュで読み込まれるかどうかを示す値を取得または設定します。デフォルトはTrueです。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.ArsClient.RemoteReportDescriptor.UserName">
      <summary>レポートサーバーに接続するために使用するユーザ名を取得または設定します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.ArsClient.ViewerExtension.LoadDocument(GrapeCity.ActiveReports.Viewer.Win.Viewer,GrapeCity.ActiveReports.ArsClient.RemoteReportDescriptor)">
      <summary>ActiveReports Serverからレポートを読み込みします。</summary>
      <param name="viewer">レポートを読み込みするためビューワ。</param>
      <param name="remoteReport">リモートレポート記述子。</param>
    </member>
    <member name="T:GrapeCity.ActiveReports.Viewer.Win.TargetView">
      <summary>ビューワ内の現在アクティブなビューを決定します。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Viewer.Win.TargetView.Primary">
      <summary>プライマリ（下の）ビューがアクティブなビューです。</summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Viewer.Win.TargetView.Secondary">
      <summary>セカンダリ（上の）ビューがアクティブなビューです。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Viewer.Win.FindEventArgs">
      <summary>Findイベントのデータを提供します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Viewer.Win.HyperLinkEventArgs">
      <summary>HyperLinkイベントのデータを提供します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Viewer.Win.ParametersPanel">
      <summary>ビューワのパラメータパネルを表します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Viewer.Win.ReportParameter">
      <summary>レポートのパラメータを表します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Viewer.Win.SearchPanel">
      <summary>Viewerコントロールの検索パネルを表します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Viewer.Win.Sidebar">
      <summary>ビューワのサイドバーを表します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Viewer.Win.ThumbnailsPanel">
      <summary>Viewerコントロールのサムネールのパネルを表します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Viewer.Win.TocPanel">
      <summary>Viewerコントロールの目次パネルを表します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Viewer.Win.Viewer">
      <summary>Viewerコントロールは、レポートドキュメントを画面でプレビューするときに使用します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Viewer.Win.Viewer.ActionEventArgs">
      <summary>Actionイベントのデータを提供します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Viewer.Win.Viewer.ViewerToolbar">
      <summary>ビューワツールバーのオブジェクトを取得し、ToolStripの各コンポーネントで項目を追加および削除したり、追加された項目のツールクリックイベントを実装したりすることができます。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Viewer.Win.ZoomChangedEventArgs">
      <summary>ZoomChangedイベントのデータを提供します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.FindEventArgs.#ctor(System.Boolean,System.Int32)">
      <summary>FindEventArgsクラスの新しいインスタンスを初期化し、<see cref="GrapeCity.ActiveReports.Viewer.Win.v11~GrapeCity.ActiveReports.Viewer.Win.FindEventArgs~Found.html">Found</see>プロパティと<see cref="GrapeCity.ActiveReports.Viewer.Win.v11~GrapeCity.ActiveReports.Viewer.Win.FindEventArgs~PageIndex.html">PageIndex</see>プロパティを設定します。</summary>
      <param name="found">テキストが見つかったかどうかを表します。</param>
      <param name="pageIndex">テキストが見つかったページ番号。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.FindEventArgs.#ctor">
      <summary>FindEventArgsクラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.FindEventArgs.Found">
      <summary>テキストが見つかったかどうかを表す値を取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.FindEventArgs.PageIndex">
      <summary>テキストが見つかったページ番号を取得します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.HyperLinkEventArgs.#ctor(System.Windows.Forms.MouseButtons,System.String)">
      <summary>HyperLinkEventArgsクラスの新しいインスタンスを初期化し、<see cref="GrapeCity.ActiveReports.Viewer.Win.v11~GrapeCity.ActiveReports.Viewer.Win.HyperLinkEventArgs~Button.html">Button</see>プロパティと<see cref="GrapeCity.ActiveReports.Viewer.Win.v11~GrapeCity.ActiveReports.Viewer.Win.HyperLinkEventArgs~HyperLink.html">HyperLink</see>プロパティに指定した値を設定します。</summary>
      <param name="button">クリックしたマウスボタン。</param>
      <param name="hyperLink">ハイパーリンクの対象。</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.HyperLinkEventArgs.Button">
      <summary>このイベントが発生するときにユーザーがクリックしたマウスボタンを取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.HyperLinkEventArgs.CreateNewTab">
      <summary>新しいタブが作成されたかどうかされたかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.HyperLinkEventArgs.Handled">
      <summary>このイベントが処理されたかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.HyperLinkEventArgs.HyperLink">
      <summary>ハイパーリンクの対象を取得します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.ParametersPanel.Refresh">
      <summary>
        <div style="color: rgb(0, 0, 0); padding-top: 2px; padding-bottom: 2px; margin-bottom: 5px; border-bottom-color: rgb(208, 208, 208); border-bottom-width: 1px; border-bottom-style: none;">
このメソッドはパラメータパネルを更新します。
</div>
      </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.ParametersPanel.Text">
      <summary>パラメータパネルのキャプションを取得または設定します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.ReportParameter.#ctor(System.String,System.Object)">
      <summary>1つの値で新しいインスタンスを初期化します。</summary>
      <param name="name">パラメータの名前。</param>
      <param name="value">パラメータの値。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.ReportParameter.#ctor(System.String,System.Collections.Generic.ICollection{System.Object})">
      <summary>複数の値で新しいインスタンスを初期化します。</summary>
      <param name="name">パラメータの名前。</param>
      <param name="values">パラメータ値のコレクション。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.ReportParameter.#ctor(System.String)">
      <summary>値なしで新しいインスタンスを初期化します。</summary>
      <param name="name">パラメータの名前。</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.ReportParameter.Name">
      <summary>レポートパラメータの名前を取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.ReportParameter.Values">
      <summary>レポートパラメーターに対する0以上の値のコレクションを取得します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.SearchPanel.Clear">
      <summary>このメソッドは、検索パラメータのリセットまたは検索結果の削除のようなSearchPanelのUIをクリアします。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.SearchPanel.Text">
      <summary>検索パネルのキャプションを取得または設定します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Sidebar.ToggleVisibility">
      <summary>サイドバーの表示を切り替えます。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Sidebar.ParametersPanel">
      <summary>パラメータパネルオブジェクトを取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Sidebar.SearchPanel">
      <summary>検索パネルオブジェクトを取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Sidebar.SelectedIndex">
      <summary>選択パネルのインデックスを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Sidebar.ThumbnailsPanel">
      <summary>サムネイルパネルオブジェクトを取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Sidebar.TocPanel">
      <summary>目次パネルオブジェクトを取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Sidebar.Visible">
      <summary>サイドバーを表示するかどうかを指定する値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Sidebar.Width">
      <summary>サイドバーの幅を取得または設定します。</summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Viewer.Win.Sidebar.SelectedIndexChanged">
      <summary>選択されたパネルのインデックスが変更されたとき、発生します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.ThumbnailsPanel.Text">
      <summary>サムネイルパネルのキャプションを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.ThumbnailsPanel.Zoom">
      <summary>ThumbnailsPanelにあるアイテムのズームレベルを取得または設定します。</summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Viewer.Win.ThumbnailsPanel.ZoomChanged">
      <summary>ThumbnailsPanelでズームの値が変更されたときに発生します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.TocPanel.Clear">
      <summary>目次パネルをクリアします。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.TocPanel.Refresh">
      <summary>目次パネルを、強制的にクライアント側を無効にさせて、直後に目次と目次の子コントロールが再描画されるようにします。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.TocPanel.ContextMenu">
      <summary>ユーザが目次パネルを右クリックする際に使用されるコンテキスト <wbr></wbr>メニューの取得、または設定を行います。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.TocPanel.Expanded">
      <summary>TOCPanelが展開されているかどうかを示すブール値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.TocPanel.Text">
      <summary>目次パネルのキャプションを取得または設定します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Viewer.#ctor">
      <summary>Viewerコントロールの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Viewer.HandleError(System.Exception)">
      <summary>
        <span style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: 13px arial, sans-serif; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(34,34,34); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">
実行時のエラーを報告します。</span>
      </summary>
      <param name="ex">
        <span style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: 13px arial, sans-serif; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(34,34,34); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">
報告する例外。</span>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Viewer.Render(GrapeCity.ActiveReports.Extensibility.Rendering.IRenderingExtension,GrapeCity.ActiveReports.Extensibility.Rendering.IO.StreamProvider,System.Collections.Specialized.NameValueCollection)">
      <summary>
        <para>ロードしたレポートを指定した描画拡張で、指定されたファイル（またはファイルのグループ）にエクスポートします。</para>
        <para>注意： このメソッドは、ページレポートでのみ使用可能です。</para>
      </summary>
      <param name="extension">現在ロードしたレポートを描画する描画拡張です。</param>
      <param name="streamProvider">描画出力を保存するストリームプロバイダーです。</param>
      <param name="settings">描画拡張の設定です。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Viewer.SetParametersValues(System.Collections.Generic.IEnumerable{GrapeCity.Viewer.Common.IParameter})">
      <summary>表示されているレポートのパラメータの値を設定します。</summary>
      <param name="parameters">
        <para>設定するパラメータの値</para>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Viewer.ShowFindDialog">
      <summary>検索ダイアログを表示します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Viewer.Export(GrapeCity.ActiveReports.Export.IDocumentExportEx,System.IO.FileInfo)">
      <summary>指定したエクスポートフィルタを使用し、現在ロードされたレポートを指定した範囲で指定したファイルにエクスポートします。</summary>
      <param name="filter">現在ロードしたレポートをエクスポートするフィルタです。</param>
      <param name="file">エクスポートされた結果を保存するファイル。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Viewer.Export(GrapeCity.ActiveReports.Export.IDocumentExportEx,System.IO.FileInfo,System.String)">
      <summary>指定したエクスポートフィルタを使用し、現在ロードされたレポートを指定した範囲で指定したファイルにエクスポートします。</summary>
      <param name="filter">現在ロードしたレポートをエクスポートするフィルタです。</param>
      <param name="file">エクスポートされた結果を保存するファイル。</param>
      <param name="pageRange">
        <div>
    ページ番号の範囲を示します。範囲は、 <wbr></wbr>最初の場号と最後の番号の間に「-」 <wbr></wbr>を使用して示すことができます。単一のページも含めることができます。 <wbr></wbr>各範囲または単一のページはカンマ区きりにより分割されます。
</div>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Viewer.Export(GrapeCity.ActiveReports.Export.IDocumentExportEx,System.IO.Stream)">
      <summary>指定したエクスポートフィルタを使用し、現在ロードされたレポートを指定した範囲で指定したファイルにエクスポートします。</summary>
      <param name="filter">現在ロードしたレポートをエクスポートするフィルタです。</param>
      <param name="stream">クスポートされた結果を保存するSystem.IO. <wbr></wbr>Streamです。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Viewer.Export(GrapeCity.ActiveReports.Export.IDocumentExportEx,System.IO.Stream,System.String)">
      <summary>指定したエクスポートフィルタを使用し、現在ロードされたレポートを指定した範囲で指定したファイルにエクスポートします。</summary>
      <param name="filter">現在ロードしたレポートをエクスポートするフィルタです。</param>
      <param name="stream">クスポートされた結果を保存するSystem.IO. <wbr></wbr>Streamです。</param>
      <param name="pageRange">
        <div>
    ページ番号の範囲を示します。範囲は、 <wbr></wbr>最初の場号と最後の番号の間に「-」 <wbr></wbr>を使用して示すことができます。単一のページも含めることができます。 <wbr></wbr>各範囲または単一のページはカンマ区きりにより分割されます。
</div>
      </param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Viewer.LoadDocument(System.IO.Stream,GrapeCity.Viewer.Common.DocumentFormat)">
      <summary>レポートドキュメントをロードします。</summary>
      <param name="stream">レポートをロードするSystem.IO.Streamです。</param>
      <param name="format">ロードするレポートの形式です。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Viewer.LoadDocument(System.String)">
      <summary>レポートを指定したファイルパスからロードします。</summary>
      <param name="filePath">レポートをロードするファイルへのパスです。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Viewer.LoadDocument(GrapeCity.ActiveReports.Document.PageDocument)">
      <summary>指定したページドキュメントをロードします。</summary>
      <param name="pageDocument">Viewer上で開くページレポートです。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Viewer.LoadDocument(GrapeCity.ActiveReports.SectionReport)">
      <summary>指定したセクションレポートをロードします。</summary>
      <param name="report">Viewer上で開くセクションレポートです。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Viewer.LoadDocument(GrapeCity.ActiveReports.Document.SectionDocument)">
      <summary>指定したセクションドキュメントをロードします。</summary>
      <param name="document">Viewer上で開くセクションドキュメントです。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Viewer.Print(System.Boolean)">
      <summary>現在開いているドキュメント（セクションまたはページ）を印刷します。</summary>
      <param name="showPrintDialog">印刷ダイアログを表示するかどうかを指定します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Viewer.Print(System.Boolean,System.Boolean)">
      <summary>現在開いているドキュメント（セクションまたはページ）を印刷します。</summary>
      <param name="showPrintDialog">印刷ダイアログを表示するかどうかを指定します。</param>
      <param name="showPrintProgressDialog">印刷進行状況ダイアログを表示するかどうかを指定 <wbr></wbr>します。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Viewer.Print(System.Boolean,System.Boolean,System.Boolean)">
      <summary>現在開いているドキュメント（セクションまたはページ）を印刷します。</summary>
      <param name="showPrintDialog">Trueに設定すると、 <wbr></wbr>ドキュメントの内容をプリンタに送信する前に、 <wbr></wbr>ユーザーがプリンタオプションを設定できる、 <wbr></wbr>印刷ダイアログを表示します。</param>
      <param name="showPrintProgressDialog">Trueに設定すると、 <wbr></wbr>ユーザーが印刷ジョブを停止できる進行状況ダイアログが表示され <wbr></wbr>ます。</param>
      <param name="usePrintingThread">印刷が個別のスレッドにおいて行われるかどうかを指定します。</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.AllowSplitter">
      <summary>ユーザーはビューを分割できるかどうかを許可する値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.AnnotationDropDownVisible">
      <summary>注釈ツールバーのドロップダウンを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.AnnotationToolbarVisible">
      <summary>注釈ツールバーの表示を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.CanExport">
      <summary>現在ロードしたレポートがエクスポートできるかどうかを示します <wbr></wbr>。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.CurrentPage">
      <summary>ビューワに表示される現在のドキュメントのページ数を取得または設定します。 1ベースの値。 レポートがロードされていない場合は、0を返します。 履歴に影響を与えます。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.Document">
      <summary>Viewerコントロールで表示するActiveReportsドキュメントを取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.History">
      <summary>ページ表示履歴を管理します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.HyperlinkBackColor">
      <summary>ハイパリンクをホストするコントロールの背景色を取得または設定します。デフォルトは「Transparent」です（セクションレポートのみ）。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.HyperlinkForeColor">
      <summary>ハイパリンクをホストするコントロールのテキストの色を取得または設定します。デフォルトは青です（セクションレポートのみ）。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.HyperlinkUnderline">
      <summary>ハイパリンクをホストするコントロールで下線付きテキストを取得または設定します。デフォルトはTrueです（セクションレポートのみ）。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.MouseMode">
      <summary>
        <span style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; FONT: 13px arial, sans-serif; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(34,34,34); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px" dir="ltr" id=":c0">ビューワのマウスモードを取得ま <wbr></wbr>たは設定します。</span>
      </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.MouseModeButtonsVisible">
      <summary>ビューワツールバーに、「パンモード」、「選択モード」、「 <wbr></wbr>スナップショット」、 <wbr></wbr>のボタンが表示されるかどうかを指定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.MultiplePageCols">
      <summary>ビューワでMultiPageModeが設定されている場合、表示される水平ページ数を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.MultiplePageRows">
      <summary>ビューワでMultiPageModeが設定されている場合、表示される垂直ページ数を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.PageOffset">
      <summary>ビューワ内のページの位置を指定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.PagesBackColor">
      <summary>レポートペインの背景色用の公開API。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.PreviewPages">
      <summary>ロードするページ。 すべてをロードするために0より小さいまたは等しい値を渡します。 SectionReportまたはPageDocumentインスタンスからロードする場合のみに適用されます。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.PrintingSettings">
      <summary>印刷設定を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.RepositionPage">
      <summary>プレビュー時に、ページをスクロールさせて、ページの下の方を表示させた状態で他のページへ移動したときに、ページの先頭から表示するかどうかを決定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.ScrollbarEnabled">
      <summary>レポートペイン内にスクロールバーを表示・非表示にします。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.SearchResultsBackColor">
      <summary>ビューワコントロールの検索機能を使用し、検索結果のハイライトの背景色を設定または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.SearchResultsForeColor">
      <summary>ビューワコントロールの検索機能を使用し、検索結果のハイライトの前傾色を設定または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.Sidebar">
      <summary>
        <span style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: 13px arial, sans-serif; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(34,34,34); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">
Viewerコントロールのサイ</span>
        <wbr style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; FONT: 13px arial, sans-serif; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(34,34,34); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">
        </wbr>
        <span style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: 13px arial, sans-serif; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(34,34,34); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">ドバーコンポーネントを取得しま</span>
        <wbr style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; FONT: 13px arial, sans-serif; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(34,34,34); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">
        </wbr>
        <span style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: 13px arial, sans-serif; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(34,34,34); WORD-SPACING: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">す。</span>
      </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.SplitView">
      <summary>ビューワが2つにビューに分割されるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.TableOfContents">
      <summary>TableOfContentsObjectへの参照を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.TargetView">
      <summary>SplitViewがTrueである場合は、現在のターゲットのビューを指定する値を取得または設定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.Toolbar">
      <summary>コントロールのToolbarObjectへの参照を取得します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.TouchContextMenuStrip">
      <summary>ビューワのタッチモードのコンテキストメニューを取得または設定します。<br></br></summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.TouchMode">
      <summary>タッチモードを有効にするかを指定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.TouchModeButtonVisibility">
      <summary>ビューワのツールバー上にタッチモードのボタンを表示するかを指定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.TouchModeToolbar">
      <summary>タッチモードのツールバーを処理するためのパブリックAPIです。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.UseHyperlinkSettings">
      <summary>ビューワにハイパーリンクが表示されるとき、ハイパーリンクの設定を適用するかどうかを取得または設定します（セクションレポートのみ）。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.ViewType">
      <summary>ビューワでページの表示方法を示す値を取得または設定します（単一/複数/連続ページ）。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.Zoom">
      <summary>ビューワの表示倍率を取得または設定します。 -1 はページ幅を基準、または、-2 はページ全体。 無効な値がある場合は、ArgumentOutOfRangeExceptionが発生します。</summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Viewer.Win.Viewer.Action">
      <summary>このイベントは、レポートのプレビューコントロールで、指定されたアクションのレポートアイテムがクリックされたときに発生します。</summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Viewer.Win.Viewer.Find">
      <summary>検索ダイアログがドキュメント内で要求されたテキストを見つけたときに発生します。</summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Viewer.Win.Viewer.HyperLink">
      <summary>ユーザーがハイパーリンクを割り当てられたテキストまたは画像をクリックしたときに発生します。</summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Viewer.Win.Viewer.LoadCompleted">
      <summary>ビューワのすべてのページが完全にロードされた後に発生します。</summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Viewer.Win.Viewer.LocateCredentials">
      <summary>レポートをプレビューすると資格が必要とされるときに発生します。</summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Viewer.Win.Viewer.LocateDataSource">
      <summary>プレビューレポートのデータプロバイダは、実行時にデータを検索する必要がある場合に発生します。</summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Viewer.Win.Viewer.TableOfContentsAfterSelect">
      <summary>見出し一覧でアイテムが選択された後に発生します。</summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Viewer.Win.Viewer.TableOfContentsClick">
      <summary>ユーザーが見出し一覧のアイテムをクリックしたときに発生します。</summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Viewer.Win.Viewer.TableOfContentsSelectedIndexChanged">
      <summary>目次で現在選択されている項目のインデックスが変更されるときに発生します。</summary>
    </member>
    <member name="E:GrapeCity.ActiveReports.Viewer.Win.Viewer.ZoomChanged">
      <summary>ビューワでズームの値が変更されたときに発生します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Viewer.ActionEventArgs.#ctor">
      <summary>デフォルトはctorです。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Viewer.ActionEventArgs.#ctor(GrapeCity.Viewer.Common.Model.Interactivity.IAction)">
      <summary>によりレンダリングイベントのデータを初期化します。</summary>
      <param name="action">このイベントに対して行われる行動。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Viewer.ActionEventArgs.#ctor(GrapeCity.Viewer.Common.Model.Interactivity.IAction,System.Int32)">
      <summary>によりレンダリングイベントのデータを初期化します。</summary>
      <param name="action">このイベントに対して行われる行動。</param>
      <param name="pageNumber">現在のレイアウトツリー内の、遷移するページ番号。</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.ActionEventArgs.Action">
      <summary>イベントが発生したときに行われたアクションを指定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.ActionEventArgs.PageNumber">
      <summary>現在のレイアウトツリーで移動するページの番号を指定します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.ViewerToolbar.MainBar">
      <summary>主なツールストリップ。※旧形式のため、使用しません。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.ViewerToolbar.MouseModeBar">
      <summary>マウスモード用のツールストリップ。※旧形式のため、使用しません。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.ViewerToolbar.NavigationBar">
      <summary>ナビゲーション用のツールストリップ。※旧形式のため、使用しません。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.ViewerToolbar.ToolStrip">
      <summary>ToolStripを参照します。</summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.ZoomChangedEventArgs.#ctor(System.Double)">
      <summary>ZoomChangedEventArgsクラスの新しいインスタンスを初期化し、Zoomプロパティ値を設定します。</summary>
      <param name="zoom">新しいズーム値。</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.ZoomChangedEventArgs.#ctor">
      <summary>ZoomChangedEventArgsクラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.ZoomChangedEventArgs.Zoom">
      <summary>ビューワの新しいZoom値を返します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Viewer.Win.FindEventHandler">
      <summary>Findイベントを処理するメソッドを表します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Viewer.Win.HyperLinkEventHandler">
      <summary>ViewerコントロールのHyperLinkイベントを処理するメソッドを表します。</summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Viewer.Win.ZoomChangedEventHandler">
      <summary>ZoomChangedイベントを処理するメソッドを表します。</summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.BaseDocumentModelImpl">
      <summary>
            Base implementation of DocumentModel with ISearchableDocument and ISelectableDocument interfaces for page-based documents
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.DocumentModel">
      <summary>
            Represents base structure and behaviour for document models
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.ActiveModel">
      <summary>
            Base class for all active (notifies subscriber on state change) models
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ActiveModel.RaisePropertyChanged(System.String)">
      <summary>
            Raises PropertyChangedEventArgs for event supplied
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ActiveModel.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
      <summary>
            Name-safe version of RaisePropertyChanged method
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ActiveModel.UpdateCommandStatus(GrapeCity.Viewer.Common.IDelegateCommand[])">
      <summary>
            Forces command state to be requeries by UI
            </summary>
      <param name="cmds">
      </param>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.ISearchableDocument">
      <summary>
            Allows document to support text search facility
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ISearchableDocument.Find(GrapeCity.Viewer.Common.Model.FindOptions,GrapeCity.Viewer.Common.Model.SearchResult)">
      <summary>
            Performs text string lookup
            </summary>
      <param name="options">
      </param>
      <param name="startFrom">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ISearchableDocument.GetItemText(GrapeCity.Viewer.Common.Model.SearchResult)">
      <summary>
            Gets text element text to display/highlight range within a list of results
            </summary>
      <param name="result">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ISearchableDocument.HighlightSearchResult">
      <summary>
            Gets or sets currently highlighted search result
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ISearchableDocument.NotifySearchResult">
      <summary>
            Gets or sets currently notification search result
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.ISelectableDocument">
      <summary>
            Allows document to expose items that could be selected/highlighted/copied
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ISelectableDocument.SelectItems(System.Int32,GrapeCity.Viewer.Common.Rect)">
      <summary>
            Adds items within specific frame on particular page to current selection
            </summary>
      <param name="pageIndex">
      </param>
      <param name="frame">
      </param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ISelectableDocument.ClearSelection">
      <summary>
            Clears selection
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ISelectableDocument.CurrentSelection">
      <summary>
            Gets current selection
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.DocumentModel.NullInstance">
      <summary>
            Gets null document instance
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.DocumentModel.#ctor">
      <summary>
            Initializes a new instance of the DocumentModel class
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.DocumentModel.GetItemText(GrapeCity.Viewer.Common.Model.SearchResult)">
      <summary>
            Gets element text to display/highlight range within a list of results
            </summary>
      <param name="result">The search result.</param>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.DocumentModel.TotalPageCount">
      <summary>
            Returns number of total pages in document. This number can be higher then
            number of pages currently available.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.DocumentModel.PageCount">
      <summary>
            Gets loaded pages count
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.DocumentModel.Bookmarks">
      <summary>
            Gets/sets document's bookmarks collection
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.DocumentModel.MaxPageSize">
      <summary>
            Gets maximum page size
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.DocumentModel.PaperSize">
      <summary>
            Gets the default paper size of the document. In fact SectionReport allows variable pages while it's not implemented in model.
            PaperSize is then considered immutable. You can read it at any time and assume it's not changed anymore.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.DocumentModel.Annotations">
      <summary>
            Gets the annotations.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.DocumentModel.AnnotationsDocument">
      <summary>
            Gets the document to store annotations to
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.DocumentModel.HighlightSearchResult">
      <summary>
            Gets or sets currently highlighted search result
            </summary>
      <value>The highlight search result.</value>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.DocumentModel.NotifySearchResult">
      <summary>
            Gets or sets currently notification search result
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.DocumentModel.IPage">
      <summary>
            Defines interface for document page
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.DocumentModel.IPage.GetItems">
      <summary>
            Gets page items
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.DocumentModel.IPage.GetItem(System.Int32)">
      <summary>
            Gets page item
            </summary>
      <param name="itemIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.DocumentModel.PaperInfo">
      <summary>
            Represents paper information
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.DocumentModel.PaperInfo.#ctor(GrapeCity.Viewer.Common.Size,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.Model.DocumentModel.PaperInfo"></see> struct.
            </summary>
      <param name="sizeIn">The size in inches.</param>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.DocumentModel.PaperInfo.SizeIn">
      <summary>
            Gets page size in device independent units (inches)
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.DocumentModel.PaperInfo.IsLandscape">
      <summary>
            Whether the paper is ladscape
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.DocumentModel.PaperInfo.Empty">
      <summary>
            Gets the empty instance.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.DocumentModel.IPageItem">
      <summary>
            Minimal part of report page
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.DocumentModel.IPageItem.ItemIndex">
      <summary>
            Uniquely identifies item within a page
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.DocumentModel.IPageItem.Bounds">
      <summary>
            Gets item boundaries within a page
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.DocumentModel.TextItem">
      <summary>
            Base implementation for text item
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.DocumentModel.TextItem.Text">
      <summary>
            Gets the text.
            </summary>
      <value>The text.</value>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.DocumentModel.TextItem.Bounds">
      <summary>
            Gets item boundaries within a page
            </summary>
      <value>The bounds.</value>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.DocumentModel.TextItem.ItemIndex">
      <summary>
            Uniquely identifies item within a page
            </summary>
      <value>The index of the item.</value>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.DocumentModel.IImageItem">
      <summary>
            Base implementation for image item
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.DocumentModel.IImageItem.GetImage(System.Single,System.Single)">
      <summary>
            Gets the image.
            </summary>
      <param name="dpiX">The horizontal resolution.</param>
      <param name="dpiY">The vertical resolution.</param>
      <returns>IDisposable.</returns>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.IPageDocument">
      <summary>
            Provides access to document structures
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.IPageDocument.GetPage(System.Int32)">
      <summary>
            Gets page document
            </summary>
      <param name="pageIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.Interactivity.IInteractiveDocument">
      <summary>
            Document with interactive features
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.Interactivity.IInteractiveDocument.HitTest(System.Int32,System.Single,System.Single)">
      <summary>
            Hits the test.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.Interactivity.IInteractiveDocument.ProcessOnClick(GrapeCity.Viewer.Common.Model.Interactivity.HitTestInfoBase,GrapeCity.Viewer.Common.Model.IErrorHandler)">
      <summary>
            Processes the mouse click.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.Interactivity.IInteractiveDocument.GetTooltipText(GrapeCity.Viewer.Common.Model.Interactivity.HitTestInfoBase)">
      <summary>
            Gets the tooltip text.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.Interactivity.HitTestInfoBase">
      <summary>
            Base class for hit test info.
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.Interactivity.HitTestInfoBase.Empty">
      <summary>
            The empty instance
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.Interactivity.HitTestInfoBase.AcceptsEvents">
      <summary>
            Gets or sets a value indicating whether events should be accepted.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.Interactivity.HitTestInfoBase.ShowTooltip">
      <summary>
            Gets or sets a value indicating whether tooltip should be shown.
            </summary>
      <value>
        <c>true</c> if [show tooltip]; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.IExportableDocument">
      <summary>
            Allows document to support exports facility
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.IExportableDocument.Export(GrapeCity.Viewer.Common.Model.ExportOptions,System.IO.Stream)">
      <summary>
            Performs export
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.ExportOptions">
      <summary>
            Represents export settings
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.ReportModelBase">
      <summary>
            Represents report instance
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.ReportModelBase.MaxTotalPageCount">
      <summary>
            The maximum total page count
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.ReportModelBase.GracefulShutdownTimeoutMs">
      <summary>
            Time span given to reports to stop loading report, after which they will be forced to comply
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ReportModelBase.Load(GrapeCity.Viewer.Common.IDocumentLoader)">
      <summary>
            Loads data into report. Must be implemented in descedants.
            </summary>
      <param name="input">Loader that defines loading strategy</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ReportModelBase.CancelLoad">
      <summary>
            Starts report loading shutdown sequence
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ReportModelBase.CreateExecuteCommand">
      <summary>
            Override and provide Execute command implementation
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ReportModelBase.OnParametersUpdate">
      <summary>
            Intended to be called from derived ctor after parameters could be read
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ReportModelBase.SetupExecutionContext(System.Threading.SynchronizationContext,GrapeCity.Viewer.Common.Model.IDocumentConsumer)">
      <summary>
            HACK Temporary stub method to pass execution context back to report
            </summary>
      <param name="context">
      </param>
      <param name="consumer">
      </param>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ReportModelBase.HasParameters">
      <summary>
            Indicates, that report has parameters. Non-volatile.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ReportModelBase.DisableRefreshCancel">
      <summary>
            Disables Refresh/Cancel button as non-applicable (e.g. .Document is assigned in runtime).
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ReportModelBase.AllParametersValid">
      <summary>
            Gets true if all parameters got valid values and report could be executed
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ReportModelBase.GalleyMode">
      <summary>
            Gets true if report should be rendered in GalleyMode
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ReportModelBase.ReportCulture">
      <summary>
            Culture of the report. Null if report don't have such information.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ReportModelBase.AllowGalleyMode">
      <summary>
            Gets true if report has the GalleyMode option
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ReportModelBase.AllowBackToParent">
      <summary>
            Gets true if report has the BackToParent capability
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ReportModelBase.Run">
      <summary>
            Gets "Execute" command
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ReportModelBase.Cancel">
      <summary>
            Returns "Cancel loading" command
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ReportModelBase.LoadState">
      <summary>
            Gets current report execution/loading state
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ReportModelBase.Error">
      <summary>
            Non-null if LoadState is LoadState.Error, null otherwise.
            Second class property: you will not be notified on this property change.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ReportModelBase.AutoRun">
      <summary>
            Gets true is report should be executed after loading
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.IParameterizedReport">
      <summary>
            Report with parameters
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.IParameterizedReport.Refresh">
      <summary>
            Resets parameters to default state
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.IParameterizedReport.Parameters">
      <summary>
            Collection of report parameters
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.IReportParameterWithRelativeDate">
      <summary>
            Defines interface to report parameters supported relative date
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.IReportParameter">
      <summary>
            Defines interface to report parameters
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.IReportParameter.Name">
      <summary>
            Gets parameter's name
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.IReportParameter.ParameterType">
      <summary>
            Gets parameter type
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.IReportParameter.Prompt">
      <summary>
            Gets parameter caption
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.IReportParameter.Nullable">
      <summary>
            Gets true if nullable checkbox should be displayed
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.IReportParameter.MultiLine">
      <summary>
            Gets true if text field is multiline
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.IReportParameter.MultiValue">
      <summary>
            Specifies whether parameter allows entering multiple values
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.IReportParameter.AllowEmpty">
      <summary>
            True if parameter is String and it accepts String.Empty.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.IReportParameter.DateOnly">
      <summary>
            If parameter is DateTime specifies whether user should be prompted for both date and time or only the date.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.IReportParameter.Value">
      <summary>
            Gets or sets parameter value
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.IReportParameter.AvailableValues">
      <summary>
            List of available values for multivalue parameter
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.IReportParameter.Values">
      <summary>
            Gets the parameter value in case of multivalue parameter
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.IReportParameter.State">
      <summary>
            Parameter state
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.IReportParameter.DependantParameters">
      <summary>
            Dependant parameters
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.IReportParameter.ExtendedInfo">
      <summary>
            Gets extended error parameter
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.IReportParameter.SelectAll">
      <summary>
            Special the parameter value in case multivalue parameter (select all Values)
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.IReportParameterWithRelativeDate.IsRelativeDate">
      <summary>
            True if we enter relative date value
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.IReportParameterWithRelativeDate.StartDatePart">
      <summary>
            Value of start part of relative date
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.IReportParameterWithRelativeDate.ShiftDatePart">
      <summary>
            Value of shift part of relative date
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.IReportParameterWithRelativeDate.RangeDatePart">
      <summary>
            Value of range part of relative date
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.IReportParameterValue">
      <summary>
            Interface for report parameter value
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.IReportParameterValue.Index">
      <summary>
            Parameter uniqual index
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.IReportParameterValue.Label">
      <summary>
            Parameter Label
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.IReportParameterValue.Value">
      <summary>
            Parameter Value
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.INotifyCollectionChanged">
      <summary>
            Notifies listeners of dynamic changes to a collection, such as when items are added and removed, or the entire collection object is reset.
            </summary>
    </member>
    <member name="E:GrapeCity.Viewer.Common.INotifyCollectionChanged.CollectionChanged">
      <summary>
            Occurs when the items list of the collection has changed, or the collection is reset.
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.ArsClient.RemoteReportDescriptor.IsParametrized">
      <summary>
            Gets or sets the value indicating whether that report contains parameters or not.
            </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Viewer.Win.Ars.RemoteReportTimeoutException">
      <summary>
            Represents an exception thrown if rendering takes more time then specified timeout.
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Ars.RemoteReportTimeoutException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.ActiveReports.Viewer.Win.Ars.RemoteReportTimeoutException"></see> class.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.Interactivity.IActionHandler">
      <summary>
            Custom report actions handler
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.Interactivity.IActionHandler.ProcessAction(GrapeCity.Viewer.Common.Model.Interactivity.IAction)">
      <summary>
            Provides custom handler for report actions
            </summary>
      <param name="action">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.Interactivity.IActionHandler.Drillthrough(GrapeCity.Viewer.Common.Model.Interactivity.DrillthroughAction)">
      <summary>
            Custom handler for Drillthrough action
            </summary>
      <param name="action">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:GrapeCity.ActiveReports.Viewer.Win.Controls.ThemeEditor.ThemeEditor">
      <summary>
            Represents the theme editor control.
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Controls.ThemeEditor.ThemeEditor.#ctor(System.IServiceProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.ActiveReports.Viewer.Win.Controls.ThemeEditor.ThemeEditor"></see> class.
            </summary>
      <param name="serviceProvider">The service provider.</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Controls.ThemeEditor.ThemeEditor.ResetEditorsIsDirtyState">
      <summary>
            Resets the state of the editors is dirty.
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Controls.ThemeEditor.ThemeEditor.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Controls.ThemeEditor.ThemeEditor.Theme">
      <summary>
            Currently shown Theme.
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Controls.ThemeEditor.ThemeEditor.IsDirty">
      <summary>
            True if user changed something in the theme, false if Theme is intact.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.IDocumentRenderer">
      <summary>
            Base interface for Document renderers
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.IDocumentRenderer.RenderPage(System.Int32)">
      <summary>
            Renders page from current document
            </summary>
      <param name="index">Index of the page to render</param>
      <returns>Rendered page view</returns>
    </member>
    <member name="T:GrapeCity.Viewer.Common.IDocumentRendererFactory">
      <summary>
        <see cref="T:GrapeCity.Viewer.Common.IDocumentRenderer">
        </see> factory interface.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.IDocumentRendererFactory.Create(GrapeCity.Viewer.Common.IApplicationContext,GrapeCity.Viewer.Common.Model.DocumentModel)">
      <summary>
            Creates the IDocumentRenderer for specified document with specified context.
            </summary>
      <param name="context">The application context.</param>
      <param name="document">The document model.</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.IDocumentRendererFactory.Create(GrapeCity.Viewer.Common.IApplicationContext,GrapeCity.Viewer.Common.Model.DocumentModel,GrapeCity.Viewer.Common.DeviceKind)">
      <summary>
            Creates the IDocumentRenderer for specified document with specified context and target device kind.
            </summary>
      <param name="context">The application context.</param>
      <param name="document">The document model.</param>
      <param name="device">The target device.</param>
    </member>
    <member name="T:GrapeCity.Viewer.Common.PageView">
      <summary>
            Base abstract class for concrete page renderers.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.PageView.AsCachable(GrapeCity.Viewer.Common.Implementation.CacheFormat)">
      <summary>
            Convert to <see cref="T:GrapeCity.Viewer.Common.CachedPageView"></see>.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.PageView.Size">
      <summary>
            Gets the page view size.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.PageView.Device">
      <summary>
            Gets the device kind.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.Annotations.AnnotationBook">
      <summary>
            Defines collection of annotation items for whole document
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.Annotations.AnnotationBook.NullInstance">
      <summary>
             Gets the empty non-editable annotations book.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.Annotations.AnnotationBook.GetPageSafe(System.Int32)">
      <summary>
            Gets the page silently ignoring incorrect page index passed
            </summary>
      <param name="pageIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.Annotations.AnnotationBook.Create(GrapeCity.Viewer.Common.Model.Annotations.AnnotationKind,GrapeCity.Viewer.Common.Rect)">
      <summary>
            When overridden creates annotation item.
            </summary>
      <param name="type">
      </param>
      <param name="bounds">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.Annotations.AnnotationBook.CanCreate(GrapeCity.Viewer.Common.Model.Annotations.AnnotationKind)">
      <summary>
            Gets true if specific annotation could be created
            </summary>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.Annotations.AnnotationBook.ReplaceSelection(System.Int32,GrapeCity.Viewer.Common.Model.Annotations.AnnotationItem)">
      <summary>
            Adds specific item to page selection
            </summary>
      <param name="pageIndex">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.Annotations.AnnotationBook.ReplaceSelection(System.Int32,System.Collections.Generic.IEnumerable{GrapeCity.Viewer.Common.Model.Annotations.AnnotationItem})">
      <summary>
            Adds specified items to page selection
            </summary>
      <param name="pageIndex">
      </param>
      <param name="items">
      </param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.Annotations.AnnotationBook.ClearSelection">
      <summary>
            Clears selection
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.Annotations.AnnotationBook.Pages">
      <summary>
            Gets the annotation page
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.Annotations.AnnotationBook.Selection">
      <summary>
            Gets currently selected annotation items
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.Annotations.AnnotationsPage">
      <summary>
            Defined page with annotations
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.Annotations.AnnotationsPage.NullInstance">
      <summary>
            Gets
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.ObservableCollection`1">
      <summary>
            Wrapped System.Collections.ObjectModel observable collection
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Implementation.INotificationCollection`1">
      <summary>
            Defines interface to collection with notifications and indexer.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Implementation.IItemCollection`1">
      <summary>
            Defines interface to readonly collection.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ObservableCollection`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.ObservableCollection`1"></see> class.
            </summary>
      <param name="data">The initial items list.</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ObservableCollection`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.ObservableCollection`1"></see> class.
            </summary>
    </member>
    <member name="E:GrapeCity.Viewer.Common.ObservableCollection`1.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.Annotations.AnnotationItem">
      <summary>
            Defined interface to AnnotationItem item
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.Annotations.AnnotationItem.MinSize">
      <summary>
            The minimum annotation item size
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.Annotations.AnnotationItem.NativeItem">
      <summary>
            Gets inner implementation
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.Annotations.AnnotationItem.Bounds">
      <summary>
            Gets or sets annotation boundaries
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.Annotations.AnnotationItem.PaintBounds">
      <summary>
            Gets the area the annotation paints to.
            Override if annotation renders outside its boundaries to fix invalidation issues
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.Annotations.AnnotationItem.UiEditCaps">
      <summary>
            Specifies which properties could be updated using mouse/keyboard
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.CachedPageView">
      <summary>
            Base class for page views with caching
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.IOrientedPageView">
      <summary>
            Interface to access orientation of the report page.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Implementation.GenericCache`3.Add(`0,`1)">
      <summary>
            Add a new item into the cache.
            </summary>
      <param name="k">Identifier or key for item to add.</param>
      <param name="v">Actual item to store.</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Implementation.GenericCache`3.Purge(`0)">
      <summary>
            Swaps the specified item out of the cache
            </summary>
      <param name="k">Identifier for the item to remove.</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Implementation.GenericCache`3.Remove(`0)">
      <summary>
            Removes item from cache
            </summary>
      <param name="k">Identifier for the item to remove.</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Implementation.GenericCache`3.Clear">
      <summary>
            Clears cache entirely. Does not dispose items contained within the cache
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Implementation.GenericCache`3.Touch(`0)">
      <summary>
            Touch or refresh a specified item.  This allows the specified
            item to be moved to the end of the dispose queue.  E.g. when it
            is known that this item would benefit from not being purged.
            </summary>
      <param name="k">Identifier of item to touch.</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Implementation.GenericCache`3.GetValue(`0)">
      <summary>
            Returns the item associated with the supplied identifier.
            </summary>
      <param name="k">Identifier for the value to be returned.</param>
      <returns>Item value corresponding to Key supplied.</returns>
      <remarks>Accessing a stored item in this way automatically
            forces the item to the end of the purge queue.</remarks>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Implementation.GenericCache`3.ContainsKey(`0)">
      <summary>
            Gets true if item is currently in cache
            </summary>
      <param name="k">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Implementation.GenericCache`3.GetKeys">
      <summary>
            Gets keys of the items currently stored in cache
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Implementation.GenericCache`3.PurgeAll">
      <summary>
            Empties the cache of all items.
            </summary>
    </member>
    <member name="E:GrapeCity.Viewer.Common.Implementation.GenericCache`3.PurgeItem">
      <summary>
            Raised before item is purged out of the cache
            </summary>
    </member>
    <member name="E:GrapeCity.Viewer.Common.Implementation.GenericCache`3.FetchItem">
      <summary>
            Called when item is requested but not found in cache
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Implementation.GenericCache`3.FillFactor">
      <summary>
            Gets fill factor
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Implementation.GenericCache`3.Capacity">
      <summary>
            Gets cache capacity
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Implementation.GenericCache`3.SpaceUsed">
      <summary>
            Gets the space currently occupied
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Implementation.GenericCache`3.Count">
      <summary>
            Gets cache items count
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Implementation.GenericCache`3.Item(`0)">
      <summary>
            Gets the value by jey specified. Gets null if cache doesn't contain the key
            </summary>
      <param name="k">
      </param>Key identifying value
        </member>
    <member name="T:GrapeCity.Viewer.Common.Implementation.GenericCache`3.FetchItemEventArgs">
      <summary>
            Represents arguments for FetchItem event
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Implementation.GenericCache`3.FetchItemEventArgs.Empty">
      <summary>
            Gets empty instance
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Implementation.GenericCache`3.FetchItemEventArgs.Key">
      <summary>
            Gets the key of the item to ve retrieved
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Implementation.GenericCache`3.FetchItemEventArgs.Value">
      <summary>
            Gets or sets the value of the item
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Implementation.GenericCache`3.PurgeItemEventArgs">
      <summary>
            Represents arguments for PurgeItem event
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Implementation.GenericCache`3.PurgeItemEventArgs.Node">
      <summary>
            Gets the node to be purged
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Implementation.CacheNode`2">
      <summary>
            Represents cache item
            </summary>
      <typeparam name="TKey">
      </typeparam>
      <typeparam name="TValue">
      </typeparam>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Implementation.CacheNode`2.Key">
      <summary>
            Gets the cached item key.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Implementation.CacheNode`2.Value">
      <summary>
            Gets the cached item value.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Implementation.CacheNode`2.SpaceUsed">
      <summary>
            Gets the used space.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Implementation.CacheNodeFactory`2">
      <summary>
            Provides generics bounds way of creating cache nodes
            </summary>
      <typeparam name="TKey">
      </typeparam>
      <typeparam name="TValue">
      </typeparam>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Implementation.CacheNodeFactory`2.CreateNew(`0,`1)">
      <summary>
            Creates new cache node
            </summary>
      <param name="key">
      </param>
      <param name="node">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:GrapeCity.Viewer.Common.IApplicationContext">
      <summary>
            Provides access to different services and factories
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.IApplicationContext.CreateReport(GrapeCity.Viewer.Common.DocumentFormat)">
      <summary>
            Creates loader for documents with specific formats
            </summary>
      <param name="format">Format of the document</param>
      <param name="loadParam">
      </param>
      <returns>Created loader</returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.IApplicationContext.CreateRenderer(GrapeCity.Viewer.Common.Model.DocumentModel)">
      <summary>
            Creates page renderer for specific document
            </summary>
      <param name="document">Document for rendering</param>
      <returns>Newly created renderer</returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.IApplicationContext.CreateRenderer(GrapeCity.Viewer.Common.Model.DocumentModel,GrapeCity.Viewer.Common.DeviceKind)">
      <summary>
            Creates the renderer for specific document considering specific target device kind.
            </summary>
      <param name="document">The document model.</param>
      <param name="device">The target device kind.</param>
    </member>
    <member name="P:GrapeCity.Viewer.Common.IApplicationContext.ServiceContainer">
      <summary>
            Gets service container
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.IApplicationContext.Context">
      <summary>
            Gets the synchronization context.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.ICopySelectionService">
      <summary>
            Base interface for copy operations
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ICopySelectionService.CopySelection(GrapeCity.Viewer.Common.Model.DocumentSelection)">
      <summary>
            Copies given selection into platform specific storage
            </summary>
      <param name="selection">
      </param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ICopySelectionService.CopyToClipBoard(System.String)">
      <summary>
            Copies given text into clipboard
            </summary>
      <param name="text">
      </param>
    </member>
    <member name="T:GrapeCity.ActiveReports.Viewer.Win.FlagEnumUiEditor">
      <summary>
            UITypeEditor for flag enums
            This implementation has taken from http://www.codeproject.com/Articles/13793/A-UITypeEditor-for-easy-editing-of-flag-enum-prope
            with minor refactoring
            FOR INTERNAL USE ONLY
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.FlagEnumUiEditor.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.ActiveReports.Viewer.Win.FlagEnumUiEditor"></see> class.
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.FlagEnumUiEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> method.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
      <param name="provider">An <see cref="T:System.IServiceProvider"></see> that this editor can use to obtain services.</param>
      <param name="value">The object to edit.</param>
      <returns>The new value of the object. If the value of the object has not changed, this should return the same object it was passed.</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.FlagEnumUiEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
      <returns>A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"></see> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"></see> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"></see>.</returns>
    </member>
    <member name="T:GrapeCity.ActiveReports.Viewer.Win.GenericActionEventArgs">
      <summary>
            Internal HyperLinkEventArgs representation, generalized to accomodate IAction. For internal use only.
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.GenericActionEventArgs.#ctor(System.Windows.Forms.MouseButtons,GrapeCity.Viewer.Common.Model.Interactivity.IAction)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.ActiveReports.Viewer.Win.GenericActionEventArgs"></see> class.
            </summary>
      <param name="button">The mouse button that the user clicked to raise the event.</param>
      <param name="action">The action.</param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.GenericActionEventArgs.Button">
      <summary>
            Gets the mouse button that the user clicked to raise the event.  
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.GenericActionEventArgs.Action">
      <summary>
            Gets the hyperlink target.  
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.GenericActionEventArgs.Handled">
      <summary>
            Sets or returns a value indicating whether the HyperLinkEvent is handled.  
            </summary>
    </member>
    <member name="T:GrapeCity.ActiveReports.Viewer.Win.SidebarPanel">
      <summary>
            Exposes public properties of the sidebar panels.
            </summary>
    </member>
    <member name="F:GrapeCity.ActiveReports.Viewer.Win.SidebarPanel.ViewerViewModel">
      <summary>
            The view model for entire viewer
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.SidebarPanel.Refresh">
      <summary>
            Refreshes the sidebar panel.
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.SidebarPanel.Clear">
      <summary>
            Clears this instance.
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.SidebarPanel.VisibleRuntime">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:GrapeCity.ActiveReports.Viewer.Win.SidebarPanel"></see> is visible in runtime.
            </summary>
      <value>
        <c>true</c> if visible; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.SidebarPanel.EnabledRuntime">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:GrapeCity.ActiveReports.Viewer.Win.SidebarPanel"></see> is enabled in runtime.
            </summary>
      <value>
        <c>true</c> if enabled; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.SidebarPanel.Visible">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:GrapeCity.ActiveReports.Viewer.Win.SidebarPanel"></see> is visible.
            </summary>
      <value>
        <c>true</c> if visible; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.SidebarPanel.Enabled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:GrapeCity.ActiveReports.Viewer.Win.SidebarPanel"></see> is enabled.
            </summary>
      <value>
        <c>true</c> if enabled; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.SidebarPanel.Width">
      <summary>
            Gets or sets the width of entire sidebar.
            </summary>
      <remarks>
            Note: this property was added for backward compatibility reasons only.
            Use Viewer.Sidebar.Width instead (if possible).
            </remarks>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.SidebarPanel.ContextMenu">
      <summary>
            Gets or sets the context menu for the sidebar panel.
            </summary>
      <value>The context menu.</value>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.SidebarPanel.Text">
      <summary>
            Gets or sets the caption of sidebar panel.
            </summary>
      <value>The caption text.</value>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.ParametersPanel.VisibleRuntime">
      <summary>
            Overridden. Gets or sets a value indicating whether this <see cref="T:GrapeCity.ActiveReports.Viewer.Win.ParametersPanel"></see> is visible in runtime.
            </summary>
      <value>
        <c>true</c> if visible; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.ParametersPanel.EnabledRuntime">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:GrapeCity.ActiveReports.Viewer.Win.ParametersPanel"></see> is enabled in runtime.
            </summary>
      <value>
        <c>true</c> if enabled; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:GrapeCity.Viewer.Common.IParameter">
      <summary>
            Defines an object that can be used as a report parameter.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.IParameter.Name">
      <summary>
            Gets the name of the report parameter.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.IParameter.Values">
      <summary>
            Gets the collection of zero or more values for the report parameter.
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.SearchPanel.VisibleRuntime">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:GrapeCity.ActiveReports.Viewer.Win.SearchPanel"></see> is visible in runtime.
            </summary>
      <value>
        <c>true</c> if visible; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.SearchPanel.EnabledRuntime">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:GrapeCity.ActiveReports.Viewer.Win.SearchPanel"></see> is enabled in runtime.
            </summary>
      <value>
        <c>true</c> if enabled; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.ThumbnailsPanel.VisibleRuntime">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:GrapeCity.ActiveReports.Viewer.Win.ThumbnailsPanel"></see> is visible in runtime.
            </summary>
      <value>
        <c>true</c> if visible; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.ThumbnailsPanel.EnabledRuntime">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:GrapeCity.ActiveReports.Viewer.Win.ThumbnailsPanel"></see> is enabled in runtime.
            </summary>
      <value>
        <c>true</c> if enabled; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.TocPanel.VisibleRuntime">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:GrapeCity.ActiveReports.Viewer.Win.TocPanel"></see> is visible in runtime.
            </summary>
      <value>
        <c>true</c> if visible; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.TocPanel.EnabledRuntime">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:GrapeCity.ActiveReports.Viewer.Win.TocPanel"></see> is enabled in runtime.
            </summary>
      <value>
        <c>true</c> if enabled; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Viewer.WndProc(System.Windows.Forms.Message@)">
      <summary>
            Overridden. Processes Windows messages.
            </summary>
      <param name="m">The Windows message.</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Viewer.OnFontChanged(System.EventArgs)">
      <summary>
            Overridden. Raises the <see cref="E:System.Windows.Forms.Control.FontChanged"></see> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Viewer.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
      <summary>
            Overridden. Processes the command key.
            </summary>
      <param name="msg">A <see cref="T:System.Windows.Forms.Message"></see>, passed by reference, that represents the window message to process.</param>
      <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys"></see> values that represents the key to process.</param>
      <returns>true if the character was processed by the control; otherwise, false.</returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Viewer.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Viewer.Print(GrapeCity.Viewer.Common.PrintingSettings)">
      <summary>
            Prints the currently opened document(section or page)
            </summary>
      <param name="settings">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Viewer.LoadDocument(GrapeCity.Viewer.Common.IDocumentLoader)">
      <summary>
            Loads the document with specified document loader.
            </summary>
      <param name="parameter">The document loader.</param>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Viewer.IsFplDocumentOpened">
      <summary>
            For internal use only
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Viewer.OnAction(System.Object,GrapeCity.ActiveReports.Viewer.Win.Viewer.ActionEventArgs)">
      <summary>
            Helper method fires RenderingCompleted event when appropriate.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.GalleyMode">
      <summary>
            Gets or sets GalleyMode of report
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.MultiPageRows">
      <summary>
            Gets or sets the number of pages displayed vertically when the viewer is in MultiPageMode.
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.MultiPageCols">
      <summary>
            Gets or sets the number of horizontal pages to display when the viewer is in MultiPageMode.
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.ReportViewer">
      <summary>
            Public API. Exposed for backward compatibility reasons.
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.TabTitleLength">
      <summary>
            Not used anymore.
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.DisplayUnits">
      <summary>
            Not used anymore.
            </summary>
    </member>
    <member name="M:GrapeCity.ActiveReports.Viewer.Win.Viewer.ViewerToolbar.ToString">
      <summary>
            Convert the value of this instance to its equivalent string representation.
            </summary>
    </member>
    <member name="P:GrapeCity.ActiveReports.Viewer.Win.Viewer.ViewerToolbar.Font">
      <summary>
            Gets or sets the font used to display text in the control.
            </summary>
      <value>The font used to display text in the control.</value>
    </member>
    <member name="T:GrapeCity.ActiveReports.Viewer.Win.DisplayUnits">
      <summary>
            Not used anymore.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.PageSetup.PrinterSettings">
      <summary>
            Abstract printer settings implementation
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.PageSetup.PrinterSettings.GetPaperSize(System.String)">
      <summary>
            Gets paper size by its name. Return empty PaperSize instance if printer does not support specified paper size
            </summary>
      <param name="sizeName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.PageSetup.PrinterSettings.PopulatePaperSizes">
      <summary>
            When called populates available paper size for specific printer
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.PageSetup.PrinterSettings.PaperSizes">
      <summary>
            Gets supported paper sizes
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.PageSetup.PrinterSettings.PrinterName">
      <summary>
            Gets printer name
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.IServiceContainer">
      <summary>
            Provides a container for services.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.IServiceContainer.AddService``1(``0)">
      <summary>
            Adds the specified service to the service container.
            </summary>
      <typeparam name="T">The type of service to add. </typeparam>
      <param name="serviceInstance">An instance of the service type to add. This object must implement or inherit from the type indicated by the serviceType parameter. </param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.IServiceContainer.RemoveService``1">
      <summary>
            Removes the specified service type from the service container
            </summary>
      <typeparam name="T">The type of service to remove.</typeparam>
    </member>
    <member name="M:GrapeCity.Viewer.Common.IServiceContainer.GetService``1">
      <summary>
            Gets service from container
            </summary>
      <returns>Service or null if service is not found</returns>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Implementation.CachedMap`2">
      <summary>
            Maps collection to collection with caching mapped data
            </summary>
      <typeparam name="TSource">Source collection type</typeparam>
      <typeparam name="TValue">Values stored in collection</typeparam>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Implementation.CachedMap`2.#ctor(System.Int64,`0,System.Func{System.Int32,`1},System.Action{System.Int32,`1})">
      <summary>
            Ctor
            </summary>
      <param name="capacity">Cache capacity</param>
      <param name="collection">
      </param>
      <param name="mapItem">Function to get specific item for collection</param>
      <param name="releaseItem">
      </param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Implementation.CachedMap`2.ClearCache">
      <summary>
            Clears the cache.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Implementation.CachedMap`2.RaiseItemChanged(System.Int32)">
      <summary>
            Notifies subscribed about cache item change
            </summary>
      <param name="index">
      </param>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Implementation.CachedMap`2.Item(System.Int32)">
      <summary>
            Gets value from cache by index
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Implementation.CachedMap`2.Count">
      <summary>
            Gets supposed items count
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Implementation.CacheFormat">
      <summary>
            Possible cache formats
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Implementation.CacheFormat.Bitmap">
      <summary>
            Cache to bitmap
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Implementation.CacheFormat.Metafile">
      <summary>
            Cache to metafile
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.IHistoryApi">
      <summary>
            This is public interface for user to work with HistoryService
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.IHistoryApi.MoveNext">
      <summary>
            Navigates to the next page in the history.  
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.IHistoryApi.MovePrev">
      <summary>
            Navigates to the previous page in the view history.  
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.IHistoryApi.Clear">
      <summary>
            Clears the page views from the history.  
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.IHistoryApi.Count">
      <summary>
            Returns the number of page views in the history.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.IHistoryApi.Position">
      <summary>
            Gets the current page's position in the navigation history.  
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Implementation.HistoryService">
      <summary>
            Holds history
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Implementation.HistoryService.Add(System.Int32)">
      <summary>
            Adds the specified page number to history.
            </summary>
      <param name="pageNumber">The page number.</param>
      <exception cref="T:System.InvalidOperationException">You can't go into same page twice in a row</exception>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Implementation.HistoryService.Clear">
      <summary>
            Clears history.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Implementation.HistoryService.IsEmpty">
      <summary>
            Gets a value indicating whether the history is empty.
            </summary>
      <value>
        <c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Implementation.HistoryService.Current">
      <summary>
            Gets the current page index.
            </summary>
      <value>The current.</value>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Implementation.HistoryService.Next">
      <summary>
            Gets the next page index.
            </summary>
      <value>The next.</value>
      <exception cref="T:System.InvalidOperationException">No next history record</exception>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Implementation.HistoryService.HasNext">
      <summary>
            Gets a value indicating whether the history has next page index.
            </summary>
      <value>
        <c>true</c> if has next; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Implementation.HistoryService.HasPrevious">
      <summary>
            Gets a value indicating whether the history has previous page index.
            </summary>
      <value>
        <c>true</c> if has previous; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Implementation.HistoryService.Previous">
      <summary>
            Gets the previous page index.
            </summary>
      <value>The previous.</value>
      <exception cref="T:System.InvalidOperationException">No previous history record</exception>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Implementation.HistoryService.ChangeHandler">
      <summary>
            Gets or sets the change handler.
            </summary>
      <value>The change handler.</value>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Implementation.ItemCollectionExtensions">
      <summary>
            Utility methods for IItemCollection interfaces.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Implementation.ItemCollectionExtensions.FromLambda``1(System.Func{System.Int32},System.Func{System.Int32,``0})">
      <summary>
            Create new IItemCollection instance from lambdas.
            </summary>
      <typeparam name="TR">
      </typeparam>
      <param name="getCount">
      </param>
      <param name="getItem">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Implementation.ItemCollectionExtensions.Map``2(GrapeCity.Viewer.Common.Implementation.IItemCollection{``0},System.Func{``0,``1})">
      <summary>
            Create new IItemCollection using items specified IItemColection and converter function.
            </summary>
      <typeparam name="TI">The type of the item in source collection.</typeparam>
      <typeparam name="TR">The type of the item in target collection.</typeparam>
      <param name="source">The source collection.</param>
      <param name="f">The converter function.</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Implementation.ItemCollectionExtensions.Map``2(GrapeCity.Viewer.Common.Implementation.IItemCollection{``0},System.Func{``0,System.Int32,``1})">
      <summary>
            Create new IItemCollection using items specified IItemColection and converter function.
            </summary>
      <typeparam name="TI">The type of the item in source collection.</typeparam>
      <typeparam name="TR">The type of the item in target collection.</typeparam>
      <param name="source">The source collection.</param>
      <param name="f">The converter function.</param>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Implementation.SequenceCollection">
      <summary>
            Integer values sequence with notifications
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Implementation.SequenceCollection.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.Implementation.SequenceCollection"></see> class.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Implementation.SequenceCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Implementation.SequenceCollection.Add(System.Int32)">
      <summary>
            Do not use it
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Implementation.SequenceCollection.Clear">
      <summary>
            Do not use it
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Implementation.SequenceCollection.Contains(System.Int32)">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
      <returns>true if <paramref name="item"></paramref> is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.</returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Implementation.SequenceCollection.CopyTo(System.Int32[],System.Int32)">
      <summary>
            Do not use it
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Implementation.SequenceCollection.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Implementation.SequenceCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
    </member>
    <member name="E:GrapeCity.Viewer.Common.Implementation.SequenceCollection.CollectionChanged">
      <summary>
            Occurs when the items list of the collection has changed, or the collection is reset.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.Annotations.AnnotationKind">
      <summary>
            Kinds of annotation
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.Annotations.AnnotationKind.None">
      <summary>
            Artifical kind.
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.Annotations.AnnotationKind.Text">
      <summary>
            Text annotation
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.Annotations.AnnotationKind.Circle">
      <summary>
            Circular annotation
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.Annotations.AnnotationKind.Square">
      <summary>
            Square annotation
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.Annotations.AnnotationKind.Arrow">
      <summary>
            Arrow annotation
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.Annotations.AnnotationKind.Balloon">
      <summary>
            Balloon annotpation
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.Annotations.AnnotationKind.Line">
      <summary>
            Line annotpation
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.Annotations.AnnotationKind.Image">
      <summary>
            Image annotpation
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.Annotations.Selection">
      <summary>
            Defined selected annotation items
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.Annotations.Selection.Empty">
      <summary>
            Gets empty selection instance
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.Annotations.Selection.PageIndex">
      <summary>
            Gets the page the annotations belong to
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.Annotations.Selection.IsEmpty">
      <summary>
            Gets true if selection is empty
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.Annotations.Selection.Items">
      <summary>
            Gets selected items
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.Interactivity.HandlerExtensions.Chain(GrapeCity.Viewer.Common.Model.Interactivity.IActionHandler,GrapeCity.Viewer.Common.Model.Interactivity.IActionHandler)">
      <summary>
            Chains another handler to existing one
            </summary>
      <param name="h1">
      </param>
      <param name="h2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.Interactivity.ChangeResult">
      <summary>
            Defined result of IInteractiveDocument.ProcessOnclick method
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.Interactivity.ChangeResult.#ctor(GrapeCity.Viewer.Common.Model.Interactivity.ChangeType,GrapeCity.Viewer.Common.Model.Interactivity.IAction)">
      <summary>
            Initializes a new instance of the ChangeResult class
            </summary>
      <param name="changeType">
      </param>
      <param name="action">
      </param>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.Interactivity.ChangeResult.Empty">
      <summary>
            Gets empty result instance
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.Interactivity.ChangeResult.ChangeType">
      <summary>
            Gets the type of change
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.Interactivity.ChangeResult.Action">
      <summary>
            Gets the action associated with result
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.Interactivity.IAction">
      <summary>
            Interface for report item actions
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.Interactivity.ChangeType">
      <summary>
            Described type of change occured to report document
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.Interactivity.DefaultActionHandler">
      <summary>
            Default document actions handler
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.Interactivity.DefaultActionHandler.#ctor(GrapeCity.Viewer.Common.Model.ViewerModel,GrapeCity.Viewer.Common.Model.ReportPaneModel,System.Action{System.String},System.Func{GrapeCity.Viewer.Common.Model.Interactivity.IActionHandler})">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.Model.Interactivity.DefaultActionHandler"></see> class.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.Interactivity.DefaultActionHandler.ProcessAction(GrapeCity.Viewer.Common.Model.Interactivity.IAction)">
      <summary>
            Provides custom handler for report actions
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.Interactivity.DefaultActionHandler.Drillthrough(GrapeCity.Viewer.Common.Model.Interactivity.DrillthroughAction)">
      <summary>
            Drillthroughes the specified drill action.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.Interactivity.HyperlinkAction">
      <summary>
            Describes hyperlink action
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.Interactivity.HyperlinkAction.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.Model.Interactivity.HyperlinkAction"></see> class.
            </summary>
      <param name="url">The URL.</param>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.Interactivity.HyperlinkAction.Url">
      <summary>
            Gets the URL.
            </summary>
      <value>The URL.</value>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.Interactivity.BookmarkAction">
      <summary>
            Describes bookmark action.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.Interactivity.BookmarkAction.TargetPage">
      <summary>
            Gets the target page.
            </summary>
      <value>The target page.</value>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.Interactivity.BookmarkAction.TargetArea">
      <summary>
            Gets the target area.
            </summary>
      <value>The target area.</value>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.Interactivity.DrillthroughAction">
      <summary>
            Describes drillthrough action.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.Interactivity.DrillthroughAction.TargetReport">
      <summary>
            Gets the target report.
            </summary>
      <value>The target report.</value>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.PageSetup.LayoutSettingsModel">
      <summary>
            Report pages layout/scaling options
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.PageSetup.LayoutSettingsModel.SupportedPagesPerSheet">
      <summary>
            Supported pages per sheet
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.PageSetup.LayoutSettingsModel.CreateDefault">
      <summary>
            Creates default instance
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.PageSetup.LayoutSettingsModel.Clone">
      <summary>
            Returns deep copy
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.PageSetup.LayoutSettingsModel.PageScaling">
      <summary>
            Gets or sets scaling mode
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.PageSetup.LayoutSettingsModel.PagesPerSheet">
      <summary>
            Number of pages to print on sheet (valid values are 2, 4, 8)
            Is only available in "Multiple pages per sheet" mode
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.PageSetup.LayoutSettingsModel.PagesOrder">
      <summary>
            Specifies the 
            Is only available in "Multiple pages per sheet" mode
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.PageSetup.LayoutSettingsModel.IsPrintPageBorder">
      <summary>
            Draws the crop box (the page boundary of report pages) during N-up printing
            Is only available in "Multiple pages per sheet" mode
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.PageSetup.LayoutSettingsModel.IsAutoRotatePages">
      <summary>
            Adjusts the page orientation to match the orientation specified in the printer properties
            Is only available in "Multiple pages per sheet" mode
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.PageSetup.Orientation">
      <summary>
            Specifies the paper orientation
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.PageSetup.PageScalingMode">
      <summary>
            Specifies page scaling
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.PageSetup.PageSettingsModel">
      <summary>
            Physical paper settings model
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.PageSetup.PageSettingsModel.CreateDefault">
      <summary>
            Creates a new instance with user-friendly defaults initialized
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.PageSetup.PageSettingsModel.Clone">
      <summary>
            Returns deep copy
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.PageSetup.PageSettingsModel.PaperOrientation">
      <summary>
            Gets or sets paper orientation
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.PageSetup.PageSettingsModel.PaperSize">
      <summary>
            Gets or sets paper size
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.PageSetup.PageSettingsModel.Margins">
      <summary>
            Gets or sets page margins
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.PageSetup.PageSetupModel">
      <summary>
            Specifies all page/scaling settings related to "Advanced Page Setup" facility
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.PageSetup.PageSetupModel.CreateDefault">
      <summary>
            Creates a new instance of the PageSetupModel with all defaults initialized
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.PageSetup.PageSetupModel.Document">
      <summary>
            Get/sets currently shown document
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.PageSetup.PageSetupModel.CurrentPageIndex">
      <summary>
            Gets/sets current page index
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.PageSetup.PageSetupModel.LayoutSettings">
      <summary>
            Specifies layout/scaling options
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.PageSetup.PageSetupModel.Watermark">
      <summary>
            Specifies watermark settings
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.PageSetup.PageSetupModel.PageSettings">
      <summary>
            Specified physical page settings
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.PageSetup.PageSetupModel.PrinterSettings">
      <summary>
            Specifies current printer settings
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.PageSetup.PagesOrder">
      <summary>
            Specifies pages printing order
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.PageSetup.PaperSize">
      <summary>
            Specifies named paper size
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.PageSetup.PaperSize.GetSizeIn">
      <summary>
            Gets paper size in inches
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.PageSetup.PaperSize.CompareTo(GrapeCity.Viewer.Common.Model.PageSetup.PaperSize)">
      <summary>
            Returns negative value is any of dimensions of current size is less than the same dimension of another instance
            </summary>
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.PageSetup.PaperSize.Name">
      <summary>
            Gets the nameof paper format.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.PageSetup.PaperSize.Units">
      <summary>
            Gets the units of paper size.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.PageSetup.PaperSize.Size">
      <summary>
            Gets the size.
            </summary>
      <value>The size.</value>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.PageSetup.PaperSize.IsEmpty">
      <summary>
            Gets true is size represents empty size (not set)
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.PageSetup.PaperSizeUnit">
      <summary>
            Specify native paper size units
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.PageSetup.PaperSizeUnit.US">
      <summary>
            Size is specified in inches
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.PageSetup.PaperSizeUnit.Metric">
      <summary>
            Paper size is specified in Metric units (cm)
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.PageSetup.WatermarkSettingsModel">
      <summary>
            Watermark settings
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.PageSetup.WatermarkSettingsModel.CreateDefault">
      <summary>
            Creates the new instance with all user-friendly defaults initialized
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.PageSetup.WatermarkSettingsModel.Clone">
      <summary>
            Returns deep copy
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.PageSetup.WatermarkSettingsModel.Text">
      <summary>
            Watermark text
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.PageSetup.WatermarkSettingsModel.FontFamily">
      <summary>
            Font family name
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.PageSetup.WatermarkSettingsModel.FontSize">
      <summary>
            Watermark font size (in points)
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.PageSetup.WatermarkSettingsModel.TextColor">
      <summary>
            Fore color
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.PageSetup.WatermarkSettingsModel.Angle">
      <summary>
            Test rotation angle, degrees, counter-clockwise
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.PageSetup.WatermarkSettingsModel.DrawOver">
      <summary>
            If property is true watermark sign will be painted on the pages over report content,
            else watermark will be painted on the pages before all other report content
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.ActiveModelListenExtensions">
      <summary>
            Implements notification propagation helpers
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ActiveModelListenExtensions.Listen``1(``0,System.Action{System.String})">
      <summary>
            Listens to any property changes
            </summary>
      <typeparam name="TModel">
      </typeparam>
      <param name="model">
      </param>
      <param name="action">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ActiveModelListenExtensions.Listen``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Action)">
      <summary>
            Performs specific action on particular property change
            </summary>
      <typeparam name="TModel">
      </typeparam>
      <typeparam name="TValue">
      </typeparam>
      <param name="model">
      </param>
      <param name="getter1">
      </param>
      <param name="action">
      </param>
      <returns>IDisposable instance that unsibscribes events on Dispose</returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ActiveModelListenExtensions.Listen``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Action{``0})">
      <summary>
            Performs specific action on particular property change
            </summary>
      <typeparam name="TModel">
      </typeparam>
      <typeparam name="TValue">
      </typeparam>
      <param name="model">
      </param>
      <param name="getter1">
      </param>
      <param name="action">
      </param>
      <returns>IDisposable instance that unsibscribes events on Dispose</returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ActiveModelListenExtensions.Listen``3(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Action)">
      <summary>
            Performs specific action on particular property change with nested property support
            </summary>
      <typeparam name="TModel1">
      </typeparam>
      <typeparam name="TModel2">Type of model the property references to</typeparam>
      <typeparam name="TValue">
      </typeparam>
      <param name="model">
      </param>
      <param name="getter1">Gets first level property</param>
      <param name="getter2">Gets nested property</param>
      <param name="action">The action to perform on property change</param>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ActiveModelListenExtensions.ListenCollection``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Action{GrapeCity.Viewer.Common.NotifyCollectionChangedEventArgs})">
      <summary>
            Performs specific action on particular CollectionChanged event
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ActiveModelListenExtensions.GetPropertyName``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
            Gets property name
            </summary>
      <typeparam name="TI">
      </typeparam>
      <typeparam name="TR">
      </typeparam>
      <param name="instance">
      </param>
      <param name="propertyGetter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ActiveModelListenExtensions.Observe``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Action{``1},System.Action{``1})">
      <summary>
            More sofisticated changes listener implementation
            </summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TI">
      </typeparam>
      <param name="obj">
      </param>
      <param name="getterExpr">
      </param>
      <param name="leave">Action for old value</param>
      <param name="enter">Action for new value</param>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ActiveModelListenExtensions.Observe``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``1,System.IDisposable})">
      <summary>
            Observe implementation for container property
            </summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="TI">
      </typeparam>
      <param name="obj">
      </param>
      <param name="getterExpr">
      </param>
      <param name="subscribe">Subscribed to nested properties</param>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ActiveModelListenExtensions.ObserveRangeOnStaticCollection``1(GrapeCity.Viewer.Common.Implementation.IItemCollection{``0},GrapeCity.Viewer.Common.Model.Observable{GrapeCity.Viewer.Common.Model.Range},System.Func{``0,System.Int32,System.IDisposable})">
      <summary>
            Observes modifyable range of regulat items collection.
            </summary>
      <typeparam name="T">Type of collection element.</typeparam>
      <param name="list">The collection to observe.</param>
      <param name="subscribeItem">The item handler.</param>
      <param name="observedRange">Floating range to observe elements within.</param>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ActiveModelListenExtensions.ObserveRange``1(GrapeCity.Viewer.Common.Implementation.INotificationCollection{``0},System.Func{``0,System.Int32,System.IDisposable},GrapeCity.Viewer.Common.Model.Observable{GrapeCity.Viewer.Common.Model.Range})">
      <summary>
            Observes modifyable range of modifyable collection.
            </summary>
      <typeparam name="T">Type of collection element.</typeparam>
      <param name="list">The collection to observe.</param>
      <param name="subscribeItem">The item handler.</param>
      <param name="range">Floating range to observe elements within.</param>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ActiveModelListenExtensions.ObserveList``1(GrapeCity.Viewer.Common.Implementation.INotificationCollection{``0},System.Func{``0,System.Int32,System.IDisposable})">
      <summary>
            Observed modifyable collection
            </summary>
      <typeparam name="TI">
      </typeparam>
      <param name="list">
      </param>
      <param name="subscribeItem">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ActiveModelListenExtensions.ObserveList``1(GrapeCity.Viewer.Common.Implementation.INotificationCollection{``0},System.Func{``0,System.Int32,System.IDisposable},System.Action{``0})">
      <summary>
            Observed modifyable collection
            </summary>
      <typeparam name="TI">
      </typeparam>
      <param name="list">
      </param>
      <param name="subscribeItem">
      </param>
      <param name="removedAction">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ActiveModelListenExtensions.ObserveList``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.IDisposable})">
      <summary>
            Observes all items in readonly collection.
            </summary>
      <typeparam name="TI">
      </typeparam>
      <param name="list">
      </param>
      <param name="subscribeItem">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.BitmapCachedDocumentModel">
      <summary>
            Aggresively caches pages in bitmaps
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.Bookmark">
      <summary>
            Represents bookmark
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.Bookmark.Empty">
      <summary>
            Gets empty bookmark instance (null-object)
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.Bookmark.PageIndex">
      <summary>
            Index of bookmarked page
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.Bookmark.Area">
      <summary>
            "Hot area" within a page
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.Bookmark.Name">
      <summary>
            Name of the bookmark
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.Dock">
      <summary>
            Specifies item alignment
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.Dock.Bottom">
      <summary>
            Control will be aligned to the bottom side
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.Dock.Left">
      <summary>
            Control will be aligned to the left side
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.Dock.Right">
      <summary>
            Control will be aligned to the right side
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.Dock.Top">
      <summary>
            Control will be aligned to the top side
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.DocumentSelection">
      <summary>
            Represents selected document items. Immutable object!
            This implementation is somewhat implementation bound since it treats selection as a collection of "page items"
             on particular page
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.DocumentSelection.#ctor(System.Int32,System.Collections.Generic.IEnumerable{GrapeCity.Viewer.Common.Model.DocumentModel.IPageItem})">
      <summary>
            Initializes a new instance of the Selection class
            </summary>
      <param name="pageIndex">
      </param>
      <param name="items">
      </param>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.DocumentSelection.Empty">
      <summary>
            Gets empty instance
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.DocumentSelection.Append(System.Collections.Generic.IEnumerable{GrapeCity.Viewer.Common.Model.DocumentModel.IPageItem})">
      <summary>
            Returns new selection as a current
            </summary>
      <param name="items">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.DocumentSelection.IsEmpty">
      <summary>
            Gets true if selection is empty
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.DocumentSelection.PageIndex">
      <summary>
            Gets the page the selection items belongs to
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.DocumentSelection.Items">
      <summary>
            Gets currently selected items
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.ErrorInfo">
      <summary>
            Represents information about errors/exceptions
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ErrorInfo.#ctor(System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.Model.ErrorInfo"></see> struct.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ErrorInfo.#ctor(GrapeCity.Viewer.Common.Model.ErrorInfo.Level,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.Model.ErrorInfo"></see> struct.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ErrorInfo.Severity">
      <summary>
            Gets the error level.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ErrorInfo.Exception">
      <summary>
            Gets the exception.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ErrorInfo.Info">
      <summary>
            Gets the error information.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.ExportType">
      <summary>
            Export types enum
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.FindOptions">
      <summary>
            Represents text-based search settings
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.FindOptions.Text">
      <summary>
            The text to search.
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.FindOptions.MatchCase">
      <summary>
            Specifies whether the search is case sensitive.
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.FindOptions.WholeWord">
      <summary>
            Specifies whether to search only the specified whole word.
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.FindOptions.SearchBackward">
      <summary>
            Specifies whether the search should be done in backward order.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.FindOptions.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.Model.FindOptions"></see> class.
            </summary>
      <param name="text">The text.</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.FindOptions.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.Model.FindOptions"></see> class.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.FindOptions.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to this instance.
            </summary>
      <param name="o">The <see cref="T:System.Object"></see> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object"></see> is equal to this instance; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.FindOptions.Equals(GrapeCity.Viewer.Common.Model.FindOptions)">
      <summary>
            Determines whether the specified <see cref="T:GrapeCity.Viewer.Common.Model.FindOptions"></see> is equal to this instance.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.FindOptions.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.FindOptions.ToString">
      <summary>
            Returns a <see cref="T:System.String"></see> that represents this instance.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.Frame">
      <summary>
            Represents selection area
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.Frame.#ctor(System.Int32,GrapeCity.Viewer.Common.Rect)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.Model.Frame"></see> struct.
            </summary>
      <param name="pageIndex">Index of the page.</param>
      <param name="frame">The frame.</param>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.Frame.PageIndex">
      <summary>
            Gets or sets the page containing selection
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.Frame.Bounds">
      <summary>
            Gets or sets the frame within page coordinates
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.Frame.IsEmpty">
      <summary>
            Gets true is selection is empty
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.HighlightArea">
      <summary>
            Identifies highlight area within a report page
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.HighlightArea.Bounds">
      <summary>
            Gets area bounds
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.HighlightArea.AreaType">
      <summary>
            Gets area type (it might be rendered with a different color)
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.HighlightArea.Type">
      <summary>
            Area type. Areas are rendered a bit differently depending on type
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.HighlightArea.Type.Selection">
      <summary>
            Selection area type
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.HighlightArea.Type.Search">
      <summary>
            Search area type
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.HighlightArea.Type.SelectionFrame">
      <summary>
            Selectin frame area type
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.HighlightDocumentViewModel">
      <summary>
            Implement document-wise highlighting model.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.HighlightPage">
      <summary>
            Immutable page highlight view model
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.HighlightPage.Empty">
      <summary>
            Gets highlight layer with no items
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.HighlightPage.IsEmpty">
      <summary>
            Gets true if there's nothing on layer
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.HighlightPage.Areas">
      <summary>
            Gets all highlight areas withing layer
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.IExportableReport">
      <summary>
            Report which supports the export
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.IExportableReport.ExportToStream(GrapeCity.Viewer.Common.Model.ExportType,System.IO.Stream)">
      <summary>
            Export report to stream
            </summary>
      <param name="type">export type</param>
      <param name="toStream">write stream</param>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.IExportableReport.ExportFormats">
      <summary>
            Supported export formats
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.ExportFormatInfo">
      <summary>
            Export format info
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ExportFormatInfo.#ctor(GrapeCity.Viewer.Common.Model.ExportType,System.String,System.String)">
      <summary>
            Export Format Info
            </summary>
      <param name="exportType">export type</param>
      <param name="displayName">display export name</param>
      <param name="extension">extension</param>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ExportFormatInfo.ExportType">
      <summary>
            Export type
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ExportFormatInfo.DisplayName">
      <summary>
            Display Name
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ExportFormatInfo.Extension">
      <summary>
            Extension
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ExportFormatInfo.FilterString">
      <summary>
            Gets filter string
            </summary>
      <returns>filter string</returns>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.ReportParameterType">
      <summary>
            Gets the parameter's value data type
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.ReportParameterType.String">
      <summary>
            Specifies the string parameter type
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.ReportParameterType.DateTime">
      <summary>
            Specifies the DateTime parameter type
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.ReportParameterType.Bool">
      <summary>
            Specifies the bool parameter type
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.ReportParameterType.Int">
      <summary>
            Specifies the int parameter type
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.ReportParameterType.Float">
      <summary>
            Specifies the float parameter type
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.ErrorState">
      <summary>
            Defines current parameter state
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.RelativeDatePart">
      <summary>
            Defines part of relative date for DateTime parameters
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.RelativeDatePart.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.Model.RelativeDatePart"></see> class.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.MouseMode">
      <summary>
            Specifies possible mouse modes
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.MouseMode.Default">
      <summary>
            Default mode
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.MouseMode.Pan">
      <summary>
            Pan mode, allows to move page
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.MouseMode.Snapshot">
      <summary>
            In this mode snapshot of selected area is created
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.MouseMode.CopySelect">
      <summary>
            In this mode it is allowed to copy selected area
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.Observable`1">
      <summary>
            Observable value.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.Observable`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.Model.Observable`1"></see> class.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.Observable`1.#ctor(`0)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.Model.Observable`1"></see> class.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.Observable`1.Value">
      <summary>
            Gets or sets the value of the observable.
            </summary>
    </member>
    <member name="E:GrapeCity.Viewer.Common.Model.Observable`1.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.ObservableExtensions">
      <summary>
            Extends <see cref="T:GrapeCity.Viewer.Common.Model.Observable`1"></see> by helper methods.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ObservableExtensions.AsObservable``1(``0)">
      <summary>
            Wraps the type to observable value.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ObservableExtensions.AsObservableCollection``1(System.Collections.Generic.IList{``0})">
      <summary>
            Wraps the list to observable collection.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="list">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.ParameterizedReportExtensions">
      <summary>
            Helpers for reports with parameters.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ParameterizedReportExtensions.SetParameter(GrapeCity.Viewer.Common.Model.IParameterizedReport,System.String,System.Collections.Generic.IEnumerable{System.Object})">
      <summary>
            Updates the value of a parameter in the report.
            </summary>
      <param name="parameterizedReport">The report with the parameters to update.</param>
      <param name="name">The name of the parameter to update.</param>
      <param name="values">The new value of the parameter.</param>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.Range">
      <summary>
            Arbitrary range implementation
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.Range.Start">
      <summary>
            The start of the Range
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.Range.Length">
      <summary>
            The length of the Range
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.Range.Empty">
      <summary>
            Gets empty range
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.Range.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.Model.Range"></see> struct.
            </summary>
      <param name="value">The start of the Range.</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.Range.#ctor(System.Int32,System.Nullable{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.Model.Range"></see> struct.
            </summary>
      <param name="start">The start of the range.</param>
      <param name="length">The length of the range.</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.Range.Contains(System.Int32)">
      <summary>
            Gets true if range contains specific item 
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.Range.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to this instance.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.Range.Equals(GrapeCity.Viewer.Common.Model.Range)">
      <summary>
            Determines whether the specified <see cref="T:GrapeCity.Viewer.Common.Model.Range"></see> is equal to this instance.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.Range.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.Range.ToString">
      <summary>
            Returns a <see cref="T:System.String"></see> that represents this instance in 'Start - End' format.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.Range.Parse(System.String,System.Boolean)">
      <summary>
            Parses string input to Range
            </summary>
      <param name="input">
      </param>
      <param name="isZeroBased">true, if starts with zero</param>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.Range.Translate(GrapeCity.Viewer.Common.Model.Range,System.Int32)">
      <summary>
            Translates range by shift value, OpenEnd wise.
            </summary>
      <param name="original">
      </param>
      <param name="shift">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.Range.For(System.Int32,System.Int32)">
      <summary>
            Initializes a new range from start and end points.
            </summary>
      <param name="start">
      </param>
      <param name="end">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.Range.End">
      <summary>
            Gets the first position past the end of range
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.Range.IsEmpty">
      <summary>
            Gets true if range represents empty one
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.Range.IsEndOpen">
      <summary>
            Gets a value indicating whether the end of this Range equals to int.MaxValue.
            </summary>
      <value>
        <c>true</c> if this instance is end open; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.RunOptions">
      <summary>
            "Run" command options
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.ReportPaneModel">
      <summary>
            Model for report pane
            </summary>
      <summary>
            Model for report pane.
            This is a partial class contains only _zooms fild which has different definition in WPF project.
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.ReportPaneModel.MinZoomValue">
      <summary>
            The minimum zoom value
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.ReportPaneModel.MaxZoomValue">
      <summary>
            The maximum zoom value
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ReportPaneModel.History">
      <summary>
            Provides history for current report pane
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ReportPaneModel.CurrentPageIndex">
      <summary>
            Gets/sets current page index
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ReportPaneModel.ZoomMode">
      <summary>
            Gets/sets current zoom mode
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ReportPaneModel.ViewType">
      <summary>
            Gets/sets view type for current document
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ReportPaneModel.ZoomValue">
      <summary>
            Gets/sets explicit zoom value
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ReportPaneModel.ScrollArea">
      <summary>
            Notification property specifying the area within a current page that should be visible at the time of property assigned
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ReportPaneModel.RowsCount">
      <summary>
            Gets rows count for multipage view
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ReportPaneModel.ColumnsCount">
      <summary>
            Gets columns count for multipage view
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ReportPaneModel.IsActive">
      <summary>
            Gets/sets value, indicating that current report pane is active
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ReportPaneModel.MouseMode">
      <summary>
            Gets/sets current mouse mode
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ReportPaneModel.SelectionFrame">
      <summary>
            Gets or sets selection frame
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ReportPaneModel.PageOffset">
      <summary>
            ar6 public api legacy
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.SearchResult">
      <summary>
            Represents text search result.
            The instances of the class are immutable and do not implement INotifyPropertyChanged then
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.SearchResult.PageIndex">
      <summary>
            The index of the page where occurence found.
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.SearchResult.DisplayText">
      <summary>
            Text to display
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.SearchResult.ItemArea">
      <summary>
            Whole text item area coordinates
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.SearchResult.ItemIndex">
      <summary>
            Logical page item number (for subsequent searches, ordered)
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.SearchResult.Range">
      <summary>
            Selection text range
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.SearchResult.PastEnd">
      <summary>
            Result indicating search is finished
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.SearchResult.BeforeBegin">
      <summary>
            Special result value for Find method to begin searching from the beginning of the document/page
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.SearchResult.Create(System.Int32,System.Int32,GrapeCity.Viewer.Common.Model.Range,System.String,GrapeCity.Viewer.Common.Rect)">
      <summary>
            Creates new SearchResult instance
            </summary>
      <param name="pageNumber">
      </param>
      <param name="itemIndex">
      </param>
      <param name="range">
      </param>
      <param name="displayText">
      </param>
      <param name="itemArea">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.SearchResult.Create(System.Int32,System.Int32,GrapeCity.Viewer.Common.Model.Range)">
      <summary>
            Creates new SearchResult instance
            </summary>
      <param name="pageNumber">
      </param>
      <param name="itemIndex">
      </param>
      <param name="range">
      </param>
      <param name="displayText">
      </param>
      <param name="itemArea">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.SearchResult.IsValid">
      <summary>
            Ensures that SearchResult is not PastEnd or BeforeBegin (auxiliary values)
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.SidebarTabs">
      <summary>
            For reference only. Defined position of sidebar panel within sidebar (either tab index or accordion pane index)
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.SidebarTabs.Toc">
      <summary>
            Table of Content pane
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.SidebarTabs.Thumbs">
      <summary>
            Thumbnails pane
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.SidebarTabs.Search">
      <summary>
            Search pane
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.SidebarTabs.Parameters">
      <summary>
            Parameters pane
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.TocTreeNode">
      <summary>
            Represents bookmarks tree node
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.TocTreeNode.#ctor">
      <summary>
            Just for serialization needs
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.TocTreeNode.#ctor(GrapeCity.Viewer.Common.Model.Bookmark)">
      <summary>
            Initializes a new instance of the TocTreeNode class
            </summary>
      <param name="bookmark">
      </param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.TocTreeNode.#ctor(GrapeCity.Viewer.Common.Model.Bookmark,System.Collections.Generic.IEnumerable{GrapeCity.Viewer.Common.Model.TocTreeNode})">
      <summary>
            Initializes a new instance of the TocTreeNode class
            </summary>
      <param name="bookmark">
      </param>
      <param name="nodes">
      </param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.TocTreeNode.Get(System.String)">
      <summary>
            Gets the nested toc node. For internal use only!
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.TocTreeNode.Get(GrapeCity.Viewer.Common.Model.Bookmark)">
      <summary>
            Gets the nested toc node. For internal use only!
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.TocTreeNode.Add(GrapeCity.Viewer.Common.Model.Bookmark)">
      <summary>
            Adds new node into collection
            </summary>
      <param name="bookmark">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.TocTreeNode.Bookmark">
      <summary>
            Gets bookmark instance the node contains
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.TocTreeNode.Nodes">
      <summary>
            Gets the nested toc nodes or empty list for leaf node
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.TocTreeNode.IsLeaf">
      <summary>
            Gets true if node is leaf
            </summary>
      <returns>
      </returns>
    </member>
    <member name="E:GrapeCity.Viewer.Common.Model.TocTreeNode.CollectionChanged">
      <summary>
            Occurs when the items list of the collection has changed, or the collection is reset.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.TouchMode">
      <summary>
            Enable touch mode or not.
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.TouchMode.True">
      <summary>
            Enable touch mode.
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.TouchMode.False">
      <summary>
            Disable touch mode.
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.TouchMode.Auto">
      <summary>
            Detects end-user environment automatically. If end-user environment supports 
            touch, TouchMode works as True. Otherwise, TouchMode works as False.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.TouchModeButtonVisibility">
      <summary>
            Display Touch mode button on viewer's toolbar or not.
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.TouchModeButtonVisibility.Hidden">
      <summary>
            Hide Touch mode button.
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.TouchModeButtonVisibility.Auto">
      <summary>
            Detects end-user environment automatically. When application is in touch-supported 
            environment, the touch mode button is displayed. Otherwize, it is not displayed.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.ViewerModel">
      <summary>
            Represents model for current view
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.IErrorHandler.HandleError(System.Exception)">
      <summary>
            Report about runtime error
            </summary>
      <param name="exception">
      </param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.IErrorHandler.HandleError(GrapeCity.Viewer.Common.Model.ErrorInfo)">
      <summary>
            Reports error, warning or information message
            </summary>
      <param name="error">
      </param>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.IDocumentConsumer.Document">
      <summary>
            Get/sets source document. Unlike the Document it's loaded document without any processing applied
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.IDocumentConsumer.ShowWaitMessage">
      <summary>
            Sets whether to show the please wait message
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ViewerModel.AddActionHandler(GrapeCity.Viewer.Common.Model.Interactivity.IActionHandler)">
      <summary>
            Adds the action handler.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ViewerModel.PushCurrentReport">
      <summary>
            Pushes currently loaded report to stack
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ViewerModel.SetParameters(System.Collections.Generic.IEnumerable{GrapeCity.Viewer.Common.IParameter})">
      <summary>
            Sets parameter values for the loaded model
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ViewerModel.HandleError(System.Exception)">
      <summary>
            Report about runtime error
            </summary>
      <param name="exception">
      </param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ViewerModel.HandleError(GrapeCity.Viewer.Common.Model.ErrorInfo)">
      <summary>
            Reports error, warning or information message
            </summary>
      <param name="error">
      </param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ViewerModel.ClearErrors">
      <summary>
            Clears error list
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ViewerModel.RaiseDocumentChanged">
      <summary>
            Raises property changed event in case document is changed.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.Report">
      <summary>
            Gets or sets report
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.ShowWaitMessage">
      <summary>
            Need show a wait message while first report page is not ready
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.Document">
      <summary>
            Get/sets currently shown document
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.Annotations">
      <summary>
            Get/sets currently shown document
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.PaperColor">
      <summary>
            Gets/sets page color
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.GrayedAreaColor">
      <summary>
            Gets/sets partially transparent color which is used to cover inactive report pane
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.SearchResultForeColor">
      <summary>
            Forecolor of the search result
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.SearchResultBackColor">
      <summary>
            Backcolor of the search result
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.PagesBackColor">
      <summary>
            background color of report pane.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.HyperlinkForeColor">
      <summary>
            Gets or sets the hyperlink text color.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.HyperlinkBackColor">
      <summary>
            Gets or sets the hyperlink background color.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.HyperlinkUnderline">
      <summary>
            Gets or sets a value indicating whether hyperlink is underline.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.UseHyperlinkSettings">
      <summary>
            Gets or sets a value indicating whether the hyperlink settings should be used instead of system defined theme.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.PrintingSettings">
      <summary>
            Gets or sets the printing settings.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.ScrollbarEnabled">
      <summary>
            Public API. show or hide scrolls within report pane
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.Margin">
      <summary>
            Gets/sets margin for each page
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.IsSidebarVisible">
      <summary>
            Gets/sets visibility of sidebar (where TOC and Thumbnail views reside)
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.IsTocVisible">
      <summary>
            Gets/sets visibility of TOC panel (using in SLV 2.0 only)
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.IsTocEnabled">
      <summary>
            Gets/sets enabled property of TOC panel
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.IsSearchPanelVisible">
      <summary>
            Gets/sets visibility of Search panel
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.IsSearchPanelEnabled">
      <summary>
            Gets/sets enabled property of Search panel
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.IsParamsPanelVisible">
      <summary>
            Gets/sets visibility of Params panel
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.IsParamsPanelEnabled">
      <summary>
            Gets/sets enabled property of Params panel
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.IsThumbnailPanelVisible">
      <summary>
            Gets/sets visibility of Thumbnail panel
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.IsThumbnailPanelEnabled">
      <summary>
            Gets/sets enabled property of Thumbnail panel
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.ActiveSidebarPane">
      <summary>
            Gets or sets currently visible sidebar tab
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.CurrentPane">
      <summary>
            Gets currently selected report pane
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.PrimaryPane">
      <summary>
            Gets primary report pane
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.SecondaryPane">
      <summary>
            Gets secondary report pane
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.IsPrimaryPaneSelected">
      <summary>
            Gets/sets if primary repot pane is selected
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.ThumbZoomValue">
      <summary>
            Gets/sets if primary repot pane is selected
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.IsFindDialogVisible">
      <summary>
            Indicates if find dialog visible
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.AnnotationKind">
      <summary>
            Show annotations or not
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.AnnotationDropDownVisible">
      <summary>
            Gets or sets whether annotations drop-down should be visible or not.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.MouseModeButtonsVisible">
      <summary>
            Gets or sets whether mouse mode buttons are visible or not.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.TouchModeButtonVisibility">
      <summary>
            Gets or sets visibility of TouchMode button.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.TouchMode">
      <summary>
            Gets or sets whether viewer under TouchMode or not.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.BackToParent">
      <summary>
            Gets the command to navigate back to parent report
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.OnAction">
      <summary>
            Gets the command to react to actions
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.ViewerModel.Errors">
      <summary>
            Gets the error list
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.ViewType">
      <summary>
            Possible view modes of the viewer control
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.ViewType.SinglePage">
      <summary>
            Only one page will be shown
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.ViewType.MultiPage">
      <summary>
            Multiple pages will be shown
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.ViewType.Continuous">
      <summary>
            Multiple pages in one row will be shown
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Model.ZoomMode">
      <summary>
            Defined Zoom mode
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.ZoomMode.Free">
      <summary>
            Zoom value is specified explicitly
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.ZoomMode.FitWidth">
      <summary>
            Sets zoom value automatically to fit control horizontally
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.ZoomMode.FitPage">
      <summary>
            Sets zoom value to fit control both vertically and horizontally
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Model.ZoomMode.FitGrid">
      <summary>
            Sets zoom value according to columns and rows count
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.ViewModel.AnnotationBookViewModel">
      <summary>
            Implement document-wise highlighting model.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.AnnotationBookViewModel.#ctor(GrapeCity.Viewer.Common.Model.Annotations.AnnotationBook,GrapeCity.Viewer.Common.Model.ReportPaneModel)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.ViewModel.AnnotationBookViewModel"></see> class.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.AnnotationBookViewModel.ObserveRange(GrapeCity.Viewer.Common.Model.Observable{GrapeCity.Viewer.Common.Model.Range},System.Func{GrapeCity.Viewer.Common.ViewModel.AnnotationLayerViewModel,System.Int32,System.IDisposable})">
      <summary>
            Subscribes to observes the range.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.AnnotationBookViewModel.Dispose">
      <summary>
            Unsubscribe from underlying model.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.AnnotationBookViewModel.PageCount">
      <summary>
            Gets number of page views
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.AnnotationBookViewModel.Count">
      <summary>
            Gets the pages count.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.AnnotationBookViewModel.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:GrapeCity.Viewer.Common.ViewModel.AnnotationLayerViewModel"></see> with the specified page index.
            </summary>
      <param name="pageIndex">Index of the page.</param>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.AnnotationBookViewModel.Book">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.ViewModel.AnnotationItemViewModel">
      <summary>
            ViewModel for annotation item
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.AnnotationItemViewModel.#ctor(GrapeCity.Viewer.Common.Model.Annotations.AnnotationItem)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.ViewModel.AnnotationItemViewModel"></see> class.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.AnnotationItemViewModel.Dispose">
      <summary>
            Unsubscribe from model.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.AnnotationItemViewModel.Bounds">
      <summary>
            Gets annotation item bounds
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.AnnotationItemViewModel.PaintBounds">
      <summary>
            Gets annotation item bounds
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.AnnotationItemViewModel.InternalsUpdate">
      <summary>
            Dummy property intended to invalidate 
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.AnnotationItemViewModel.Annotation">
      <summary>
            Annotation
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.ViewModel.AnnotationLayerViewModel">
      <summary>
            Represents annotations within one page
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.ViewModel.AnnotationLayerViewModel.EmptyPage">
      <summary>
            Gets null-object
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.AnnotationLayerViewModel.HitTest(System.Double,System.Double)">
      <summary>
            Gets the information about particular view point
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.AnnotationLayerViewModel.Dispose">
      <summary>
            Unsubscribe from model.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.AnnotationLayerViewModel.Adorners">
      <summary>
            Gets page adorners
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.AnnotationLayerViewModel.Items">
      <summary>
            Gets page items
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.ViewModel.AnnotationLayerViewModel.HitTestInfo">
      <summary>
            Identifies annotation item and adorner handle clicked
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.AnnotationLayerViewModel.HitTestInfo.CreateEmpty">
      <summary>
            Creates the empty hit test info.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.AnnotationLayerViewModel.HitTestInfo.IsEmpty">
      <summary>
            Gets true if HitTest returned empty result
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.AnnotationLayerViewModel.HitTestInfo.Item">
      <summary>
            Gets the item clicked
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.AnnotationLayerViewModel.HitTestInfo.Handle">
      <summary>
            Gets the adorner handle
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.ViewModel.BorderedAdornerViewModel">
      <summary>
            Selected annotation (not limited to) item adorner
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.ViewModel.BorderedAdornerViewModel.HandleSize">
      <summary>
            The handle size
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.ViewModel.BorderedAdornerViewModel.ButtonMargin">
      <summary>
            The button margin size
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.ViewModel.BorderedAdornerViewModel.ButtonSize">
      <summary>
            The button size
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.BorderedAdornerViewModel.HitTest(System.Double,System.Double)">
      <summary>
            Gets the handle under the point
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.BorderedAdornerViewModel.Dispose">
      <summary>
            Unsubscribe from underlying model.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.BorderedAdornerViewModel.HostItem">
      <summary>
            Gets the annotation item which current adorner is bound to
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.BorderedAdornerViewModel.Handles">
      <summary>
            Gets handles
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.BorderedAdornerViewModel.InnerBounds">
      <summary>
            Gets or sets inner adorner area bounds
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.BorderedAdornerViewModel.HighlightHandle">
      <summary>
            Gets or sets the handle that is currently "hovered"
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.ViewModel.BorderedAdornerHandle">
      <summary>
            Describes adorner point
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.ViewModel.BorderedAdornerHandle.HandleType">
      <summary>
            The adorner handle type
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.ViewModel.BorderedAdornerHandle.Area">
      <summary>
            The adorner area
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.ViewModel.AdornerHandleType">
      <summary>
            Defines adorner "hot" point
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.ViewModel.ErrorPaneViewModel">
      <summary>
            ViewModel implementation for error pane/dialog
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.ErrorPaneViewModel.#ctor(GrapeCity.Viewer.Common.Model.ViewerModel,GrapeCity.Viewer.Common.IApplicationContext)">
      <summary>
            Initializes a new instance of the ErrorPaneViewModel class
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ErrorPaneViewModel.HidePanel">
      <summary>
            Hides error panel off the screen
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ErrorPaneViewModel.ShowDialog">
      <summary>
            Show detail errors
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ErrorPaneViewModel.HideDialog">
      <summary>
            Hide detail errors
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ErrorPaneViewModel.ClearErrors">
      <summary>
            Clears errors
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ErrorPaneViewModel.Copy">
      <summary>
            Copy error to the clipboard
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ErrorPaneViewModel.IsPanelVisible">
      <summary>
            Gets or sets whether thumbnails tab is visible
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ErrorPaneViewModel.IsDialogVisible">
      <summary>
            Gets or sets whether thumbnails tab is visible
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ErrorPaneViewModel.IsDialogVisibleInvert">
      <summary>
             Binding visibility property for the ShowDetails button.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ErrorPaneViewModel.MessageText">
      <summary>
            Gets error message
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ErrorPaneViewModel.Errors">
      <summary>
             Gets collection of errors
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ErrorPaneViewModel.LastError">
      <summary>
             Gets last error
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.ViewModel.FindDialogViewModel">
      <summary>
            View model for find dialog
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.FindDialogViewModel.#ctor(GrapeCity.Viewer.Common.Model.ViewerModel)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.ViewModel.FindDialogViewModel"></see> class.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.FindDialogViewModel.FindNext">
      <summary>
            Performs next occurence lookup
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.FindDialogViewModel.FindPrevious">
      <summary>
            Performs previous occurence lookup
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.FindDialogViewModel.Show">
      <summary>
            Shows the dialog
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.FindDialogViewModel.Close">
      <summary>
            Closes the dialog
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.FindDialogViewModel.IsVisible">
      <summary>
            Gets or sets whether find dialog is visible or not
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.FindDialogViewModel.SearchString">
      <summary>
            Gets or sets string to search within document
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.FindDialogViewModel.MatchWholeWord">
      <summary>
            Gets or sets whether search string must match whole words
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.FindDialogViewModel.MatchCase">
      <summary>
            Gets or sets whether found text should match the search string case
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.FindDialogViewModel.Status">
      <summary>
            Gets or sets string to display to user. Usually represents such events as reaching document end/beginning
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.FindDialogViewModel.UserMessage">
      <summary>
            Gets string to display to user. Usually represents such events as reaching document end/beginning
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.FindDialogViewModel.SearchHistory">
      <summary>
            Gets the history of the strings searched
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.ViewModel.FindStatus">
      <summary>
            Find operation status
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.ViewModel.FindStatus.None">
      <summary>
            Operation completed successfully
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.ViewModel.FindStatus.EndOfPages">
      <summary>
            Reached end of document
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.ViewModel.FindStatus.BeginningOfPages">
      <summary>
            Reached beginning of the document
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.ViewModel.FindStatus.NotFound">
      <summary>
            No single occurence found
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.ViewModel.MultiPageViewModel">
      <summary>
            View model for multi page view
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel">
      <summary>
            Base model for single page and multipage views.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel.#ctor(GrapeCity.Viewer.Common.Model.ViewerModel,GrapeCity.Viewer.Common.Model.ReportPaneModel)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel"></see> class.
            </summary>
      <param name="viewerModel">Model of the viewer</param>
      <param name="reportPaneModel">Model of the current report pane</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel.PickModels(System.Action{GrapeCity.Viewer.Common.Model.ViewerModel,GrapeCity.Viewer.Common.Model.ReportPaneModel})">
      <summary>
            For internal use only
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel.CreateAnnotationsRenderer(GrapeCity.Viewer.Common.Model.DocumentModel)">
      <summary>
            Creates the annotations renderer.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel.HandleError(System.Exception)">
      <summary>
            Report about runtime error
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel.IsUIEnabled">
      <summary>
            True if current document has any viewable pages.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel.IsPanMode">
      <summary>
            Returns true, if current MouseMode is MouseMode.Pan
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel.IsCopySelectMode">
      <summary>
            Returns true, if current MouseMode is MouseMode.CopySelect
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel.IsSnapshotMode">
      <summary>
            Returns true, if current MouseMode is MouseMode.Snapshot
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel.ActionHandler">
      <summary>
            Gets the action handler.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel.PaperColor">
      <summary>
            Color of the page in document
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel.AnnotationLayer">
      <summary>
            Provides annotations view model
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel.GrayedAreaColor">
      <summary>
            Color of inactive view
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel.Margin">
      <summary>
            Gets page's margin
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel.ViewType">
      <summary>
            Gets viewer's view mode. In case if ViewType equal to SinglePage, view should switch from multipage mode
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel.Zoom">
      <summary>
            Zoom value of the view
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel.CurrentPageIndex">
      <summary>
            Gets current page index
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel.ZoomMode">
      <summary>
            Gets viewer's current zoom mode
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel.IsActive">
      <summary>
            Gets true, if parent report pane is active
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel.MouseMode">
      <summary>
            Gets current report pane's mouse mode
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel.Highlight">
      <summary>
            Gets the highlight document view model.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel.HighlightPage">
      <summary>
            Gets or sets the highlight page.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel.AnnotationKind">
      <summary>
            Returns current annotation kind
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel.Annotations">
      <summary>
            Returns current annotations
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel.Document">
      <summary>
            Gets the document
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel.AreBehaviorsEnabled">
      <summary>
            True if behaviors are allowed to be executed.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel.SearchResultForeColor">
      <summary>
            Forecolor of the search result
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel.SearchResultBackColor">
      <summary>
            Backcolor of the search result
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel.PagesBackColor">
      <summary>
            Color of the area, where page(s) is(are) displayed.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel.ScrollbarEnabled">
      <summary>
            Public API. show or hide scrolls within report pane
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel.PaperSize">
      <summary>
            Gets currently the paper size of currently active printer.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel.ShowWaitMessage">
      <summary>
            True if 'please wait' message is visible.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewTypeViewModel.HasError">
      <summary>
            For internal use only. True if an error occurred while loading the report
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.MultiPageViewModel.InvalidateCache">
      <summary>
            Clear the pages cache.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.MultiPageViewModel.Dispose">
      <summary>
            Unsubscribe from models
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.MultiPageViewModel.Pages">
      <summary>
            Gets pages collection
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.MultiPageViewModel.AnnotationPages">
      <summary>
            Gets pages collection
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.MultiPageViewModel.MaxPageSize">
      <summary>
            Gets maximum page size
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.MultiPageViewModel.Rows">
      <summary>
            Gets rows count for multipage view
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.MultiPageViewModel.Columns">
      <summary>
            Gets columns count for multipage view 
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.MultiPageViewModel.ScrollArea">
      <summary>
            Instructs view to scroll to a particular area within current page
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel">
      <summary>
            View Model for PageSetup dialog
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.#ctor(GrapeCity.Viewer.Common.Model.PageSetup.PageSetupModel,GrapeCity.Viewer.Common.IApplicationContext)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel"></see> class.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.PaperSizes">
      <summary>
            Available paper sizes
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.PaperSourceNames">
      <summary>
            Names of paper sources
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.CurrentPaperSourceName">
      <summary>
            Currently active paper source
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.CurrentPaperSizeName">
      <summary>
            Current paper name
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.UnitsName">
      <summary>
            Name of measure units
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.PaperSizeIn">
      <summary>
            Size of target paper in inches
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.PaperOrientation">
      <summary>
            Paper orientation
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.PaperWidth">
      <summary>
            Width of paper
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.PaperHeight">
      <summary>
            Height of paper
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.IsPortrait">
      <summary>
            Is portrait?
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.IsLandscape">
      <summary>
            Is landscape?
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.LeftMargin">
      <summary>
            Left page margin
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.RightMargin">
      <summary>
            Right page margin
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.TopMargin">
      <summary>
            Top page margin
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.BottomMargin">
      <summary>
            Bottom page margin
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.MaxLeftMargin">
      <summary>
            Max left margin, that user can set
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.MaxRightMargin">
      <summary>
            Max right margin, that user can set
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.MaxTopMargin">
      <summary>
            Max top margin, that user can set
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.MaxBottomMargin">
      <summary>
            Max bottom margin, that user can set
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.PageScalings">
      <summary>
            All possible page scalings
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.CurrentPageScale">
      <summary>
            Current value of page scaling
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.PagesPerSheet">
      <summary>
            Possible values of Pages per Sheet
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.CurrentPagesPerSheet">
      <summary>
            Current value of Pages per Sheet
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.AdvancedLayoutControlsEnabled">
      <summary>
            True if page scaling is not MultiplePages.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.MarginControlsEnabled">
      <summary>
            True if page scaling in not None.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.IsCurrentPageScaleIsNotNone">
      <summary>
            True if page scale in not None
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.PageOrders">
      <summary>
            All possible page order names
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.CurrentPageOrder">
      <summary>
            Current value of page ordering
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.PrintPageBorders">
      <summary>
            Print page borders, or not
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.AutoRotatePages">
      <summary>
            Autorotate pages, or not
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.WatermarkText">
      <summary>
            Text of watermark
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.WatermarkFontFamily">
      <summary>
            Font of watermark
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.WatermarkFontSizeInPoints">
      <summary>
            Font size in points
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.WatermarkColorARGB">
      <summary>
            Color in ARGB format
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.WatermarkRotationAngle">
      <summary>
            Rotation angle in degrees
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.GoPreviousPage">
      <summary>
            Goes previous page
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.GoNextPage">
      <summary>
            Goes next page
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.GoFirstPage">
      <summary>
            Goes first page
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.GoLastPage">
      <summary>
            Goes last page
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.CurrentPageIndex">
      <summary>
            Get current page index
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.CurrentPageAndCount">
      <summary>
            Gets user-friendly representation of current page, number of pages
            and loading progress
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.LastError">
      <summary>
            Last error. String.Empty for no error
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.OriginalDocument">
      <summary>
            Original (un modified document)
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.PageSetupViewModel.ReportModel">
      <summary>
            Gets or sets the report model.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.ViewModel.ParametersViewModel">
      <summary>
            View model for ParametersPaneView
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.ParametersViewModel.#ctor(GrapeCity.Viewer.Common.Model.ViewerModel)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.ViewModel.ParametersViewModel"></see> class.
            </summary>
      <param name="model">The viewer model.</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.ParametersViewModel.Refresh">
      <summary>
            Refreshes this instance.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ParametersViewModel.IsValid">
      <summary>
            Gets a value indicating whether the report parameters is valid.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ParametersViewModel.RefreshReport">
      <summary>
            Binded to 'View report' button
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ParametersViewModel.Params">
      <summary>
            Gets the parameters list.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ParametersViewModel.ContextMenu">
      <summary>
            Gets or sets the context menu.
            </summary>
      <value>The context menu.</value>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ParametersViewModel.Text">
      <summary>
            Gets or sets the text.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.ViewModel.ParameterViewModel">
      <summary>
            View model of the IReportParameter
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.ParameterViewModel.#ctor(GrapeCity.Viewer.Common.Model.IReportParameter)">
      <summary>
            Creates View Model of IReportParameter
            </summary>
      <param name="param">
      </param>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ParameterViewModel.Options">
      <summary>
            List of options for multivalued parameters
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ParameterViewModel.IsValueNull">
      <summary>
            True if value is null
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ParameterViewModel.Prompt">
      <summary>
            Gets the label
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ParameterViewModel.Nullable">
      <summary>
            True if parameter can be null
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ParameterViewModel.MultiLine">
      <summary>
            True if parameter is multiline
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ParameterViewModel.DateOnly">
      <summary>
            True if parameter allows only date to be entered.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ParameterViewModel.SupportRelativeDate">
      <summary>
            True if parameter support relative date
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ParameterViewModel.IsRelativeDate">
      <summary>
            True if we enter relative date value
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ParameterViewModel.StartDatePart">
      <summary>
             Value of start part of relative date
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ParameterViewModel.ShiftDatePart">
      <summary>
             Value of shift part of relative date
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ParameterViewModel.RangeDatePart">
      <summary>
             Value of range part of relative date
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ParameterViewModel.ValueEnabled">
      <summary>
            True if user can change actual value. False if not
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ParameterViewModel.Enabled">
      <summary>
            True if user can change the parameter (parameter doesn't have no unfulfilled dependencies)
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ParameterViewModel.ErrorText">
      <summary>
            Text of the last error. Empty if everything is OK.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ParameterViewModel.ParameterType">
      <summary>
            Gets the parameter type
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ParameterViewModel.ParameterName">
      <summary>
            Gets the parameter name
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ParameterViewModel.RepresentedWith">
      <summary>
            Returns type of control to hold the value(s)
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ParameterViewModel.StringValue">
      <summary>
            String representation of parameter value.
            String.Empty converted to null unless parameter is String and it's AllowEmpty is true
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ParameterViewModel.Value">
      <summary>
            Gets typed parameter value, ie DateTime or Bool
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ParameterViewModel.SelectAll">
      <summary>
            Special the parameter value in case multivalue parameter (select all Values)
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.ViewModel.ParameterOptionViewModel">
      <summary>
            Single option viewmodel for Multivalue parameter
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.ParameterOptionViewModel.ToString">
      <summary>
            Returns a label value.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ParameterOptionViewModel.Index">
      <summary>
            Option uniqual index
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ParameterOptionViewModel.Label">
      <summary>
            Text to show to user
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ParameterOptionViewModel.Value">
      <summary>
            Actual value of the option
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ParameterOptionViewModel.Selected">
      <summary>
            True if option selected.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.ViewModel.VisualRepresentation">
      <summary>
            Enum of possible visualization of the parameter
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.ViewModel.VisualRepresentation.SelectOneFromMany">
      <summary>
            The select one value from available values list
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.ViewModel.VisualRepresentation.MultiValue">
      <summary>
            The select several values from available values list
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.ViewModel.VisualRepresentation.MultiLine">
      <summary>
            The multi line parameter
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.ViewModel.VisualRepresentation.SingleValue">
      <summary>
            The single value parameter
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.ViewModel.ReportPaneViewModel">
      <summary>
            View model for report pane. Handles single page and multipage views
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.ReportPaneViewModel.#ctor(GrapeCity.Viewer.Common.IApplicationContext,GrapeCity.Viewer.Common.Model.ReportPaneModel,GrapeCity.Viewer.Common.Model.ViewerModel)">
      <summary>
            Ctor
            </summary>
      <param name="context">Context of the application</param>
      <param name="model">Model of this report pane</param>
      <param name="viewerModel">Model of the viewer</param>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ReportPaneViewModel.IsActive">
      <summary>
            Gets/sets value indicating if current report pane is active
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ReportPaneViewModel.GrayedAreaColor">
      <summary>
            Color of inactive view
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ReportPaneViewModel.MultiPageViewModel">
      <summary>
            View model for current multipage view
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ReportPaneViewModel.SinglePageViewModel">
      <summary>
            View model for current sinlg page view
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.ViewModel.SearchPanelViewModel">
      <summary>
            View model for find dialog
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.SearchPanelViewModel.#ctor(GrapeCity.Viewer.Common.Model.ViewerModel,GrapeCity.Viewer.Common.IApplicationContext)">
      <summary>
             Initializes a new instance of the SearchPanelViewModel class
            </summary>
      <param name="model">
      </param>
      <param name="applicationContext">
      </param>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.SearchPanelViewModel.FindAll">
      <summary>
            Performs text lookup
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.SearchPanelViewModel.Clear">
      <summary>
            Gets the clear search results command.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.SearchPanelViewModel.SearchString">
      <summary>
            Gets or sets string to search within document
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.SearchPanelViewModel.MatchWholeWord">
      <summary>
            Gets or sets whether search string must match whole words
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.SearchPanelViewModel.MatchCase">
      <summary>
            Gets or sets whether found text should match the search string case
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.SearchPanelViewModel.SearchResults">
      <summary>
            Gets the found results table
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.SearchPanelViewModel.CurrentSearchResultIndex">
      <summary>
            Gets or sets currently selected item within SearchResults list.
            -1 means no entry selected
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.SearchPanelViewModel.Status">
      <summary>
            Gets or sets string to display to user. Usually represents such events as reaching document end/beginning
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.SearchPanelViewModel.ContextMenu">
      <summary>
            Gets or sets the context menu.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.SearchPanelViewModel.Text">
      <summary>
            Gets or sets the text.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.ViewModel.SearchResultViewModel">
      <summary>
            Represents the entry in results list within a SearchPanel
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.SearchResultViewModel.Result">
      <summary>
            Gets the found string occurence within a document
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.SearchResultViewModel.Text">
      <summary>
            Gets the text from control where string was found
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.ViewModel.SidebarViewModel">
      <summary>
            View model for sidebar panel
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.SidebarViewModel.#ctor(GrapeCity.Viewer.Common.IApplicationContext,GrapeCity.Viewer.Common.Model.ViewerModel)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.ViewModel.SidebarViewModel"></see> class.
            </summary>
      <param name="applicationContext">The application context.</param>
      <param name="model">The viewer model.</param>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.SidebarViewModel.Toc">
      <summary>
            Gets VM for TOC pane
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.SidebarViewModel.ThumbnailsPane">
      <summary>
            Gets VM for thumbnails pane
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.SidebarViewModel.SearchPane">
      <summary>
            Gets VM for search pane
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.SidebarViewModel.ParamsViewModel">
      <summary>
            Gets VM for parameters pane
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.SidebarViewModel.TocPanelVisible">
      <summary>
            Is toc panel and it's button is visible
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.SidebarViewModel.TocPanelEnabled">
      <summary>
            Gets or sets a value indicating whether TOC panel is enabled.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.SidebarViewModel.ThumbnailPanelVisible">
      <summary>
            Is Thumbnail panel and it's button is visible
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.SidebarViewModel.ThumbnailPanelEnabled">
      <summary>
            Is Thumbnail panel and it's button is visible
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.SidebarViewModel.SearchPanelVisible">
      <summary>
            Is Search panel and it's button is visible
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.SidebarViewModel.SearchPanelEnabled">
      <summary>
            Is Search panel enabled
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.SidebarViewModel.ParamsPanelVisible">
      <summary>
            Is Parameters panel and it's button is visible
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.SidebarViewModel.ParamsPanelEnabled">
      <summary>
            Is Parameters panel enabled
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.SidebarViewModel.ActiveTab">
      <summary>
            Returns currently active (visible) tab
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.SidebarViewModel.ActiveTabIndex">
      <summary>
            Gets or sets the index of the active tab.
            </summary>
      <value>The index of the active tab.</value>
    </member>
    <member name="T:GrapeCity.Viewer.Common.ViewModel.SinglePageViewModel">
      <summary>
            Active Model of View capable to display single page of a document. It aggregates both ViewerModel and ReportPaneModel
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.SinglePageViewModel.#ctor(GrapeCity.Viewer.Common.Model.ViewerModel,GrapeCity.Viewer.Common.Model.ReportPaneModel,GrapeCity.Viewer.Common.IApplicationContext)">
      <summary>
            Initializes a new instance of the SinglePageViewModel class
            </summary>
      <param name="viewerModel">
      </param>
      <param name="reportPaneModel">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.SinglePageViewModel.InvalidateCache">
      <summary>
            Clear the cache.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.SinglePageViewModel.Dispose">
      <summary>
            Unsubscribe from viewer model.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.SinglePageViewModel.SetScrollPositionGetter(System.Func{GrapeCity.Viewer.Common.Point})">
      <summary>
            Sets the scroll position getter.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.SinglePageViewModel.SetScrollPositionSetter(System.Action{GrapeCity.Viewer.Common.Point})">
      <summary>
            Sets the scroll position setter.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.SinglePageViewModel.VerticallyCentered">
      <summary>
            Gets or sets whether page should be centered vertically
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.SinglePageViewModel.PageView">
      <summary>
            Provides thing, that responsible for actual displaying of the page
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.SinglePageViewModel.ScrollArea">
      <summary>
            Gets the scroll area.
            </summary>
      <value>The scroll area.</value>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.SinglePageViewModel.PageOffset">
      <summary>
            ar6 public api legacy 
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.ViewModel.ThumbnailItemViewModel">
      <summary>
            Presentation model for single thumbnail item
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ThumbnailItemViewModel.View">
      <summary>
            Get thumbnail image
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ThumbnailItemViewModel.PaperColor">
      <summary>
            Gets paper color
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ThumbnailItemViewModel.Caption">
      <summary>
            Gets thunbnail caption
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ThumbnailItemViewModel.IsSelected">
      <summary>
            Gets or sets whether current thumbnail is currently selected
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.ViewModel.ThumbnailsViewModel">
      <summary>
            Implements presentation model (ViewModel) for thumbnails pane
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.ViewModel.ThumbnailsViewModel.MinZoomFactor">
      <summary>
            The minimum zoom factor
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.ViewModel.ThumbnailsViewModel.MaxZoomFactor">
      <summary>
            The maximum zoom factor
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.ViewModel.ThumbnailsViewModel.ZoomCommandIncrement">
      <summary>
            The zoom increment value.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.ThumbnailsViewModel.PickModels(System.Action{GrapeCity.Viewer.Common.Model.ViewerModel})">
      <summary>
            For internal use only
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ThumbnailsViewModel.Pages">
      <summary>
            Gets pages collection
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ThumbnailsViewModel.ZoomValue">
      <summary>
            Gets or sets Thumbnails zoom factor
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ThumbnailsViewModel.CurrentPageIndex">
      <summary>
            Gets or sets currently selectted thimbnail item
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ThumbnailsViewModel.MaxPageSize">
      <summary>
            Gets maximal known page width and height
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ThumbnailsViewModel.PaperColor">
      <summary>
            Gets paper color
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ThumbnailsViewModel.ZoomIn">
      <summary>
            Increases zoom factor
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ThumbnailsViewModel.ZoomOut">
      <summary>
            Decreases zoom factor
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ThumbnailsViewModel.ContextMenu">
      <summary>
            Gets or sets the context menu.
            </summary>
      <value>The context menu.</value>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ThumbnailsViewModel.Text">
      <summary>
            Gets or sets the text.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.IRasteredRenderer">
      <summary>
            Interface for rastered document renderer
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.IRasteredRenderer.RenderPage(System.Int32,System.Double)">
      <summary>
            Renders the page.
            </summary>
      <param name="index">The page index to render.</param>
      <param name="screenDpiFactor">The screen dpi factor.</param>
    </member>
    <member name="T:GrapeCity.Viewer.Common.ViewModel.TocViewModel">
      <summary>
            Active View Model for TocView
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.TocViewModel.#ctor(GrapeCity.Viewer.Common.Model.ViewerModel)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.ViewModel.TocViewModel"></see> class.
            </summary>
      <param name="model">The viewer model.</param>
      <exception cref="T:System.ArgumentNullException">model</exception>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.TocViewModel.Bookmarks">
      <summary>
            Bookmarks tree, might be null if document have no bookmarks
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.TocViewModel.SelectedBookmark">
      <summary>
            Sets currently selected bookmark to navigate to bookmarked position
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.TocViewModel.SelectedNode">
      <summary>
             Sets currently selected node in TOC tree (SLV2.0) 
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.TocViewModel.Expanded">
      <summary>
             Set/Get display TOC tree
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.TocViewModel.ClearToc">
      <summary>
            Gets the 'clear toc' command.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.TocViewModel.RefreshToc">
      <summary>
            Gets the 'refresh toc' command.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.TocViewModel.ContextMenu">
      <summary>
            Gets or sets the context menu.
            </summary>
      <value>The context menu.</value>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.TocViewModel.Text">
      <summary>
            Gets or sets the text.
            </summary>
      <value>The text.</value>
    </member>
    <member name="T:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel">
      <summary>
            View-model for toolbar
            </summary>
      <summary>
            View-model for toolbar
            This is a partial code which has different definitions in WPF project.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.#ctor(GrapeCity.Viewer.Common.IApplicationContext,GrapeCity.Viewer.Common.Model.ViewerModel)">
      <summary>
            Ctor
            </summary>
      <param name="context">Content of the application</param>
      <param name="model">Underlying model for view-model</param>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.Model">
      <summary>
            Gets the viewer model.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.ZoomOut">
      <summary>
            Zoom out command
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.ZoomIn">
      <summary>
            Zoom in command
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.ZoomReset">
      <summary>
            Resets zoom to 100%
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.SetViewType">
      <summary>
            Sets view type command (parameterized)
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.SetGalleyMode">
      <summary>
            Sets GalleyMode command 
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.SetZoomMode">
      <summary>
            Set zoom mode command (parameterized)
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.GoPreviousPage">
      <summary>
            Goes previous page
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.GoNextPage">
      <summary>
            Goes next page
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.GoFirstPage">
      <summary>
            Goes first page
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.GoLastPage">
      <summary>
            Goes last page
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.Print">
      <summary>
            Prints the report
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.GoHistoryBack">
      <summary>
            Sets current page to previous.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.GoHistoryNext">
      <summary>
            Sets current page to next.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.DisplayFindDialog">
      <summary>
            Searches desired text
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.ToggleTOC">
      <summary>
            Toggles TOC panel visibility
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.OpenReport">
      <summary>
            Shows "Open report dialog"
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.ToggleFindPanel">
      <summary>
            Toggles Find panel visibility
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.RefreshReport">
      <summary>
            Refreshes report
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.FocusOnPageNumber">
      <summary>
            Focuses on page number text box, check case 149865
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.SetMouseMode">
      <summary>
            Sets mouse mode for current report pane
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.CopySelection">
      <summary>
            Copies selection into clipboard
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.BackToParentReport">
      <summary>
            Gets "Back to parent report" command
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.CancelLoading">
      <summary>
            Gets "Cancel Loading report" command
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.SetTouchMode">
      <summary>
            Switch TouchMode on or off.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.CurrentPageAndCount">
      <summary>
            Gets user-friendly representation of current page, number of pages
            and loading progress
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.IsUIEnabled">
      <summary>
            True if current document has any viewable pages.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.ZoomValue">
      <summary>
            Gets/sets formatted zoom value
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.MinZoomValue">
      <summary>
            Gets the minimum zoom value.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.MaxZoomValue">
      <summary>
            Gets the maximum zoom value.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.ZoomDoubleValue">
      <summary>
            Gets or sets the zoom value.
            </summary>
      <value>The zoom value.</value>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.IsFitWidth">
      <summary>
            Returns true, if current ZoomMode is ZoomMode.FitWidth
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.IsFitPage">
      <summary>
             Returns true, if current ZoomMode is ZoomMode.FitPage
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.IsSinglePage">
      <summary>
            Returns true, if current ViewType is ViewType.SinglePage
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.IsContinuous">
      <summary>
            Returns true, if current ViewType is ViewType.Continuous
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.GalleyMode">
      <summary>
            Returns GalleyMode of report
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.AllowGalleyMode">
      <summary>
            Returns true if GalleyMode is allowed for report
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.AllowBackToParent">
      <summary>
            Returns true if BackToParent is allowed for report
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.AllowCancel">
      <summary>
            Returns true if Cancel is allowed for report
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.MouseMode">
      <summary>
            Gets the mouse mode.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.ColumnsCount">
      <summary>
            Gets or sets the columns count.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.RowsCount">
      <summary>
            Gets or sets the rows count.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.SidebarVisible">
      <summary>
            Gets or sets a value indicating whether the sidebar is visible.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.SidebarSearchPaneActive">
      <summary>
            True if Sidebar is open and sidebar's search pane is active.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.ShowSidebarEnabled">
      <summary>
            Gets a value indicating whether 'show sidebar' button enabled.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.TocEnabled">
      <summary>
            Gets a value indicating whether TOC enabled.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.PageNumberHasFocus">
      <summary>
            Gets or sets a value indicating whether 'page number' control has focus.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.CurrentAnnotationKind">
      <summary>
            Gets or sets the kind of the current annotation.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.AnnotationButtonsAvailable">
      <summary>
            Gets a value indicating whether annotation buttons available.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.AnnotationButtonVisible">
      <summary>
            Gets a value indicating whether annotation currently button visible.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.MouseModeButtonsVisible">
      <summary>
            Gets a value indicating whether 'mouse mode' buttons visible.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.TouchModeButtonVisibility">
      <summary>
            Gets the touch mode button visibility.
            </summary>
      <value>The touch mode button visibility.</value>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.TouchMode">
      <summary>
            Gets the touch mode.
            </summary>
      <value>The touch mode.</value>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.IsPanMode">
      <summary>
            Returns true, if current MouseMode is MouseMode.Pan
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.IsCopySelectMode">
      <summary>
            Returns true, if current MouseMode is MouseMode.CopySelect
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.IsSnapshotMode">
      <summary>
            Returns true, if current MouseMode is MouseMode.Snapshot
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.AvailableAnnotationKinds">
      <summary>
            Available annotation kinds for drop down selector.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.ZoomMode">
      <summary>
            Gets or sets the zoom mode.
            </summary>
      <value>The zoom mode.</value>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ToolbarViewModel.IsMultiPage">
      <summary>
            Returns true, if current ViewType is ViewType.MultiPage
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.ViewModel.ViewerViewModel">
      <summary>
            Model for entire viewer
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.ViewerViewModel.#ctor(GrapeCity.Viewer.Common.IApplicationContext,GrapeCity.Viewer.Common.Model.ViewerModel)">
      <summary>
            Creates viewer model
            </summary>
      <param name="applicationContext">Context of the application</param>
      <param name="model">Model of the viewer</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.ViewerViewModel.Dispose">
      <summary>
            Disposes Model
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewerViewModel.Model">
      <summary>
            Gets the viewer model.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewerViewModel.ErrorPane">
      <summary>
            Gets the error pane view model.
            </summary>
      <value>The error pane view model.</value>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewerViewModel.FindDialog">
      <summary>
            Gets the find dialog view model.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewerViewModel.Sidebar">
      <summary>
            Gets the sidebar view model.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewerViewModel.Toolbar">
      <summary>
            Gets or sets the toolbar view model.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewerViewModel.PrimaryReportPane">
      <summary>
            Gets the primary report pane view model.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewerViewModel.SecondaryReportPane">
      <summary>
            Gets the secondary report pane view model.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewerViewModel.AnnotationDropDownVisible">
      <summary>
            Gets or sets a value indicating whether the annotation drop down visible.
            </summary>
      <value>
        <c>true</c> if annotation drop down visible; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewerViewModel.MouseModeButtonsVisible">
      <summary>
            Controls visibility of MouseMode buttons.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewerViewModel.TouchModeButtonVisibility">
      <summary>
            Controls visibility of TouchMode button.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewerViewModel.Load">
      <summary>
            Loads document
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewerViewModel.SetReport">
      <summary>
            Sets an already loaded report into model
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewerViewModel.CancelLoad">
      <summary>
            Cancels loading document
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewerViewModel.SidebarCollapsed">
      <summary>
            Gets or sets a value indicating whether the sidebar collapsed.
            </summary>
      <value>
        <c>true</c> if [sidebar collapsed]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewerViewModel.IsPrimaryPaneSelected">
      <summary>
            Gets or sets a value indicating whether this instance is primary pane selected.
            </summary>
      <value>
        <c>true</c> if this instance is primary pane selected; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewerViewModel.ShowWaitMessage">
      <summary>
            Binding property, show please wait message if a first report page is not ready
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewerViewModel.SidebarWidth">
      <summary>
            Gets or sets the width of the sidebar.
            </summary>
      <value>The width of the sidebar.</value>
    </member>
    <member name="T:GrapeCity.Viewer.Common.ViewModel.ViewTypeParameters">
      <summary>
            Parameters of view.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.ViewTypeParameters.#ctor(GrapeCity.Viewer.Common.Model.ViewType,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.ViewModel.ViewTypeParameters"></see> struct.
            </summary>
      <param name="viewType">Type of the view.</param>
      <param name="rowsCount">The rows count.</param>
      <param name="columnsCount">The columns count.</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ViewModel.ViewTypeParameters.#ctor(GrapeCity.Viewer.Common.Model.ViewType)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.ViewModel.ViewTypeParameters"></see> struct with specified view type, 1x1.
            </summary>
      <param name="viewType">Type of the view.</param>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewTypeParameters.ViewType">
      <summary>
            Gets the type of the view.
            </summary>
      <value>The type of the view.</value>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewTypeParameters.RowsCount">
      <summary>
            Gets the rows count.
            </summary>
      <value>The rows count.</value>
    </member>
    <member name="P:GrapeCity.Viewer.Common.ViewModel.ViewTypeParameters.ColumnsCount">
      <summary>
            Gets the columns count.
            </summary>
      <value>The columns count.</value>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Color">
      <summary>
            Platform independent color implementation
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Color.#ctor(System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.Color"></see> struct.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Color.op_Inequality(GrapeCity.Viewer.Common.Color,GrapeCity.Viewer.Common.Color)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="color1">The color1.</param>
      <param name="color2">The color2.</param>
      <returns>
            The result of the operator.
            </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Color.op_Equality(GrapeCity.Viewer.Common.Color,GrapeCity.Viewer.Common.Color)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="color1">The color1.</param>
      <param name="color2">The color2.</param>
      <returns>
            The result of the operator.
            </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Color.FromArgb(System.Int32)">
      <summary>
            Creates new color from color components.
            </summary>
      <param name="value">The value.</param>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Color.ToArgb">
      <summary>
            Gets ARGB value of the color.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Color.FromArgb(System.Int32,GrapeCity.Viewer.Common.Color)">
      <summary>
            Creates new color from color components.
            </summary>
      <param name="a">A.</param>
      <param name="c">The c.</param>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Color.FromArgb(System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
            Creates new color from color components.
            </summary>
      <param name="a">A.</param>
      <param name="r">The r.</param>
      <param name="g">The g.</param>
      <param name="b">The b.</param>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Color.FromArgb(System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates new color from color components.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Color.FromArgb(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates new color from color components.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Color.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to this instance.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Color.op_Implicit(GrapeCity.Viewer.Common.Color)~System.UInt32">
      <summary>
            Performs an implicit conversion from <see cref="T:GrapeCity.Viewer.Common.Color"></see> to <see cref="T:System.UInt32"></see>.
            </summary>
      <param name="color">The color.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Color.Value">
      <summary>
            Gets the value.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Color.R">
      <summary>
            Gets the R color component.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Color.G">
      <summary>
            Gets the G color component.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Color.B">
      <summary>
            Gets the B color component.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Color.A">
      <summary>
            Gets the A color component.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Color.IsEmpty">
      <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
      <value>
        <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:GrapeCity.Viewer.Common.DelegateCommand">
      <summary>
            Parameterless command delegate
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.DelegateCommand`1">
      <summary>
            DelegateCommand implementation
            </summary>
      <typeparam name="TParm">
      </typeparam>
    </member>
    <member name="T:GrapeCity.Viewer.Common.IDelegateCommand">
      <summary>
            Delegated command interface
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.ICommand">
      <summary>
            Defines the contract for commanding, using the same contract as used in WPF.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ICommand.Execute(System.Object)">
      <summary>
            Defines the method to be called when the command is invoked.
            </summary>
      <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ICommand.CanExecute(System.Object)">
      <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
      <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
      <returns>
      </returns>
    </member>
    <member name="E:GrapeCity.Viewer.Common.ICommand.CanExecuteChanged">
      <summary>
            Occurs when changes occur that affect whether the command should execute.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.IDelegateCommand.RaiseCanExecuteChanged">
      <summary>
            Raises CanExecuteChanged event
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.DelegateCommand`1.#ctor(System.Action{`0},System.Predicate{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.DelegateCommand`1"></see> class.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.DelegateCommand`1.#ctor(System.Action{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.DelegateCommand`1"></see> class.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.DelegateCommand`1.CanExecute(System.Object)">
      <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
      <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
      <returns>
        <c>true</c> if this instance can execute the specified parameter; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.DelegateCommand`1.Execute(System.Object)">
      <summary>
            Defines the method to be called when the command is invoked.
            </summary>
      <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.DelegateCommand`1.RaiseCanExecuteChanged">
      <summary>
            Raise CanExecuteChanged event from external code.
            </summary>
    </member>
    <member name="E:GrapeCity.Viewer.Common.DelegateCommand`1.CanExecuteChanged">
      <summary>
            Occurs when changes occur that affect whether the command should execute.
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.DelegateCommand.NullCommand">
      <summary>
            Gets "Null" command instance which does nothing and is always disabled
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.DisposablesCollection">
      <summary>
            Utility class to redirect Dispose call to its inner items
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.DisposablesCollection.Add(System.IDisposable[])">
      <summary>
            Registers object to be disposed on this collection disposal
            </summary>
      <param name="disposables">
      </param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.DisposablesCollection.Add(System.IDisposable)">
      <summary>
            Registers action to be invoked on object dispose
            </summary>
      <param name="disposable">
      </param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.DisposablesCollection.Add(System.Action[])">
      <summary>
            Registers action to be invoked on object dispose
            </summary>
      <param name="disposables">
      </param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.DisposablesCollection.From(System.IDisposable[])">
      <summary>
            Initialized new collection for another list of disposables
            </summary>
      <param name="disposables">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.DisposablesCollection.From(System.Action[])">
      <summary>
            Initialized new collection for another list of actions
            </summary>
      <param name="actions">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:GrapeCity.Viewer.Common.DocumentFormat">
      <summary>
            Specifies possible document formats
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.DocumentFormat.Rpx">
      <summary>
            AR document, xml format
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.DocumentFormat.Rdf">
      <summary>
            AR document, binary format
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.DocumentFormat.Rdlx">
      <summary>
            DDR document, xml format
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.DocumentFormat.RdlSnapshot">
      <summary>
            Persisted Datatree
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.DocumentSearchService">
      <summary>
            Search service implementation for ISearchableDocument
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.ISearchService">
      <summary>
            Base interface for search
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.ISearchService.Find(GrapeCity.Viewer.Common.Model.DocumentModel,GrapeCity.Viewer.Common.Model.FindOptions,GrapeCity.Viewer.Common.Model.SearchResult,System.Int32,System.Action{GrapeCity.Viewer.Common.Model.DocumentModel,System.Collections.Generic.IEnumerable{GrapeCity.Viewer.Common.Model.SearchResult}})">
      <summary>
            Searches the document according to find options.
            </summary>
      <param name="document">
      </param>
      <param name="findOptions">
      </param>
      <param name="startFrom">
      </param>
      <param name="maxCount">
      </param>
      <param name="handler">
      </param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.DocumentSearchService.Find(GrapeCity.Viewer.Common.Model.DocumentModel,GrapeCity.Viewer.Common.Model.FindOptions,GrapeCity.Viewer.Common.Model.SearchResult,System.Int32,System.Action{GrapeCity.Viewer.Common.Model.DocumentModel,System.Collections.Generic.IEnumerable{GrapeCity.Viewer.Common.Model.SearchResult}})">
      <summary>
            Searches the document according to find options.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.DoubleDelegateCommand">
      <summary>
            Command that delegates implementation to another delegate command
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.DoubleDelegateCommand.Execute(System.Object)">
      <summary>
            Defines the method to be called when the command is invoked.
            </summary>
      <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.DoubleDelegateCommand.CanExecute(System.Object)">
      <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
      <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
      <returns>
        <c>true</c> if this instance can execute the specified parameter; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.DoubleDelegateCommand.RaiseCanExecuteChanged">
      <summary>
            Raises CanExecuteChanged event.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.DoubleDelegateCommand.Command">
      <summary>
            Gets or sets the command.
            </summary>
    </member>
    <member name="E:GrapeCity.Viewer.Common.DoubleDelegateCommand.CanExecuteChanged">
      <summary>
            Occurs when changes occur that affect whether the command should execute.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
      <summary>
            Executes action for each sequence item
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="source">
      </param>
      <param name="action">
      </param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.EnumerableExtensions.ZipEx``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>
            Gets the result of combination of two sequences.
            Result sequence is as short as shortest source sequences
            </summary>
      <typeparam name="TSource1">
      </typeparam>
      <typeparam name="TSource2">
      </typeparam>
      <typeparam name="TResult">
      </typeparam>
      <param name="source1">
      </param>
      <param name="source2">
      </param>
      <param name="selector">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.EnumerableExtensions.GetRecursive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
      <summary>
            Extract all descendants recursively
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="source">
      </param>
      <param name="selector">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:GrapeCity.Viewer.Common.DeviceKind">
      <summary>
            Defines enumeration of possible target devices for view.
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.DeviceKind.Screen">
      <summary>
            Output to Screen target device
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.DeviceKind.Paper">
      <summary>
            Output to Paper target device
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.DeviceKind.Export">
      <summary>
            Output to Export target device
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.DocumentRendererAttribute">
      <summary>
            Allows to specified document renderer type for class.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.DocumentRendererAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.DocumentRendererAttribute"></see> class.
            </summary>
      <param name="rendererType">Type of the renderer.</param>
    </member>
    <member name="P:GrapeCity.Viewer.Common.DocumentRendererAttribute.RendererType">
      <summary>
            Gets the type of the renderer.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.NullRenderer">
      <summary>
            Null-object implementation for IDocumentRenderer interface
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.NullRenderer.Instance">
      <summary>
            The NullRenderer instance
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.NullRenderer.RenderPage(System.Int32)">
      <summary>
            Renders page from current document
            </summary>
      <param name="index">Index of the page to render</param>
      <returns>Rendered page view</returns>
    </member>
    <member name="T:GrapeCity.Viewer.Common.NullRenderer.Factory">
      <summary>
        <see cref="T:GrapeCity.Viewer.Common.IDocumentRenderer">
        </see> factory.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.NullRenderer.Factory.Create(GrapeCity.Viewer.Common.IApplicationContext,GrapeCity.Viewer.Common.Model.DocumentModel)">
      <summary>
            Returns MullRenderer.Instance object.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.NullRenderer.Factory.Create(GrapeCity.Viewer.Common.IApplicationContext,GrapeCity.Viewer.Common.Model.DocumentModel,GrapeCity.Viewer.Common.DeviceKind)">
      <summary>
            Returns MullRenderer.Instance object.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.LoadState">
      <summary>
            Possible loading states
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Margin">
      <summary>
            Stores page margins
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Margin.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Ctor
            </summary>
      <param name="left">Left margin</param>
      <param name="right">Right margin</param>
      <param name="top">Top margin</param>
      <param name="bottom">Bottom margin</param>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Point">
      <summary>
            Platform independent point
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.Point.Empty">
      <summary>
            Represents a Point that has X and Y values set to zero
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Point.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.Point"></see> class with the specified coordinates.
            </summary>
      <param name="x">The horizontal position of the point.</param>
      <param name="y">The vertical position of the point.</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Point.Offset(System.Double,System.Double)">
      <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
      <param name="x">The horizontal offset.</param>
      <param name="y">The vertical offset.</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Point.Offset(GrapeCity.Viewer.Common.Size)">
      <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
      <param name="offset">Amount to offset the location.</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Point.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to this instance.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Point.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Point.op_Addition(GrapeCity.Viewer.Common.Point,GrapeCity.Viewer.Common.Size)">
      <summary>
            Translates a <see cref="T:GrapeCity.Viewer.Common.Point"></see> by a given <see cref="T:GrapeCity.Viewer.Common.Size"></see>.
            </summary>
      <param name="p1">The <see cref="T:GrapeCity.Viewer.Common.Point"></see> to translate.</param>
      <param name="sz">A <see cref="T:GrapeCity.Viewer.Common.Size"></see> that specifies the pair of numbers to add to the coordinates of pt.</param>
      <returns>The translated <see cref="T:GrapeCity.Viewer.Common.Point"></see>.</returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Point.op_UnaryNegation(GrapeCity.Viewer.Common.Point)">
      <summary>
            Multiplies the point coordinates by <c>-1</c>.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Point.ToString">
      <summary>
            Returns a <see cref="T:System.String"></see> that represents this instance.
            </summary>
      <returns>A <see cref="T:System.String"></see> that represents this instance.</returns>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Point.Y">
      <summary>
            Gets the y-coordinate of this Point.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Point.X">
      <summary>
            Gets the x-coordinate of this Point.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.PrintingSettings">
      <summary>
            Print process settings
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.PrintingSettings.None">
      <summary>
            If set the Print-dialog will not be shown.
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.PrintingSettings.ShowPrintDialog">
      <summary>
            If set the Print-dialog will be shown.
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.PrintingSettings.ShowPrintProgressDialog">
      <summary>
            If set the dialog with printing state information will be shown.
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.PrintingSettings.UsePrintingThread">
      <summary>
            If set the printing will be run in new thread.
            </summary>
    </member>
    <member name="F:GrapeCity.Viewer.Common.PrintingSettings.UseStandardDialog">
      <summary>
            If set the printing will use standard PrintDialog
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Rect">
      <summary>
            Platform aware rectangle structure
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.Rect"></see> class with the specified location and size.
            </summary>
      <param name="x">The x-coordinate of the upper-left corner of the rectangle.</param>
      <param name="y">The y-coordinate of the upper-left corner of the rectangle.</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Rect.#ctor(GrapeCity.Viewer.Common.Point,GrapeCity.Viewer.Common.Size)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.Rect"></see> class with the specified location and size.
            </summary>
      <param name="location">A <see cref="T:GrapeCity.Viewer.Common.Point"></see> that represents the upper-left corner of the rectangle.</param>
      <param name="size">A <see cref="P:GrapeCity.Viewer.Common.Rect.Size"></see> that represents the width and height of the rectangle.</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Rect.FromLTRB(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a <see cref="T:GrapeCity.Viewer.Common.Rect"></see> with the specified edge locations.
            </summary>
      <param name="left">The x-coordinate of the upper-left corner of the rectangle.</param>
      <param name="top">The y-coordinate of the upper-left corner of the rectangle.</param>
      <param name="right">The x-coordinate of the lower-right corner of the rectangle.</param>
      <param name="bottom">The y-coordinate of the lower-right corner of the rectangle</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Rect.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to this instance.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object"></see> is equal to this instance; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Rect.Contains(System.Double,System.Double)">
      <summary>
            Determines if the specified point is contained within this rectangle.
            </summary>
      <param name="x">The x-coordinate of the point to test.</param>
      <param name="y">The y-coordinate of the point to test.</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Rect.Contains(GrapeCity.Viewer.Common.Point)">
      <summary>
            Determines if the specified point is contained within this rectangle.
            </summary>
      <param name="pt">The <see cref="T:GrapeCity.Viewer.Common.Point"></see> to test.</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Rect.Contains(GrapeCity.Viewer.Common.Rect)">
      <summary>
            Determines if the rectangular region represented by rect is entirely contained within this rectangle.
            </summary>
      <param name="rect">The <see cref="T:GrapeCity.Viewer.Common.Rect"></see> to test.</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Rect.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Rect.Inflate(System.Double,System.Double)">
      <summary>
            Enlarges this <see cref="T:GrapeCity.Viewer.Common.Rect"></see> by the specified amount.
            </summary>
      <param name="x">The amount to inflate this <see cref="T:GrapeCity.Viewer.Common.Rect"></see> horizontally.</param>
      <param name="y">The amount to inflate this <see cref="T:GrapeCity.Viewer.Common.Rect"></see> vertically.</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Rect.Inflate(GrapeCity.Viewer.Common.Size)">
      <summary>
            Enlarges this <see cref="T:GrapeCity.Viewer.Common.Rect"></see> by the specified amount.
            </summary>
      <param name="size">The amount to inflate this rectangle.</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Rect.Inflate(GrapeCity.Viewer.Common.Rect,System.Single,System.Single)">
      <summary>
            Creates and returns an enlarged copy of the specified <see cref="T:GrapeCity.Viewer.Common.Rect"></see> structure. The copy is enlarged by the specified amount. The original <see cref="T:GrapeCity.Viewer.Common.Rect"></see> structure remains unmodified.
            </summary>
      <param name="rect">The <see cref="T:GrapeCity.Viewer.Common.Rect"></see> with which to start. This rectangle is not modified.</param>
      <param name="x">The amount to inflate the rectangle horizontally.</param>
      <param name="y">The amount to inflate the rectangle vertically.</param>
      <returns>Rect.</returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Rect.Intersect(GrapeCity.Viewer.Common.Rect)">
      <summary>
            Replaces this <see cref="T:GrapeCity.Viewer.Common.Rect"></see> with the intersection of itself and the specified <see cref="T:GrapeCity.Viewer.Common.Rect"></see>.
            </summary>
      <param name="rect">The <see cref="T:GrapeCity.Viewer.Common.Rect"></see> with which to intersect.</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Rect.Intersect(GrapeCity.Viewer.Common.Rect,GrapeCity.Viewer.Common.Rect)">
      <summary>
            Returns a third <see cref="T:GrapeCity.Viewer.Common.Rect"></see> structure that represents the intersection of two other <see cref="T:GrapeCity.Viewer.Common.Rect"></see> structures. If there is no intersection, an empty <see cref="T:GrapeCity.Viewer.Common.Rect"></see> is returned.
            </summary>
      <param name="a">A rectangle to intersect.</param>
      <param name="b">A rectangle to intersect.</param>
      <returns>Rect.</returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Rect.IntersectsWith(GrapeCity.Viewer.Common.Rect)">
      <summary>
            Determines if this rectangle intersects with specified rectangle.
            </summary>
      <param name="rect">The rectangle to test.</param>
      <returns>This method returns <c>true</c> if there is any intersection, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Rect.Union(GrapeCity.Viewer.Common.Rect,GrapeCity.Viewer.Common.Rect)">
      <summary>
            Creates a <see cref="T:GrapeCity.Viewer.Common.Rect"></see> structure that contains the union of two <see cref="T:GrapeCity.Viewer.Common.Rect"></see> structures.
            </summary>
      <param name="a">A rectangle to union.</param>
      <param name="b">A rectangle to union.</param>
      <returns>A rectangle that bounds the union of the two rectangles.</returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Rect.Scale(System.Double)">
      <summary>
            Scales the rectangle by specified scale factor.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Rect.Scale(System.Double,System.Double)">
      <summary>
            Scales the rectangle by specified scale factors.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Rect.Offset(GrapeCity.Viewer.Common.Point)">
      <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
      <param name="pos">Amount to offset the location.</param>
      <returns>Rect.</returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Rect.Offset(System.Double,System.Double)">
      <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
      <param name="x">The horizontal offset.</param>
      <param name="y">The vertical offset.</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Rect.ToString">
      <summary>
            Returns a <see cref="T:System.String"></see> that represents this instance.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Rect.Location">
      <summary>
            Gets the coordinates of the upper-left corner of this rectangle.
            </summary>
      <value>The location.</value>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Rect.Size">
      <summary>
            Gets the size of this rectangle.
             </summary>
      <value>The size.</value>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Rect.X">
      <summary>
            Gets the x-coordinate of the upper-left corner of this rectangle.
            </summary>
      <value>The x.</value>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Rect.Y">
      <summary>
            Gets the y-coordinate of the upper-left corner of this rectangle.
            </summary>
      <value>The y.</value>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Rect.Width">
      <summary>
            Gets the width of this rectangle.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Rect.Height">
      <summary>
            Gets the height of this rectangle.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Rect.Left">
      <summary>
            Gets the x-coordinate of the left edge of this rectangle.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Rect.Top">
      <summary>
            Gets the y-coordinate of the top edge of this rectangle.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Rect.Right">
      <summary>
            Gets the x-coordinate of the right edge of this rectangle.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Rect.Bottom">
      <summary>
            Gets the y-coordinate of the bottom edge of this rectangle.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Rect.IsEmpty">
      <summary>
            Tests whether the size of this rectangle less or equal 0.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.RectExtensions">
      <summary>
            Extends <see cref="T:GrapeCity.Viewer.Common.Rect"></see> struct with helper methods.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.RectExtensions.Round(GrapeCity.Viewer.Common.Rect,System.Int32)">
      <summary>
            Rounds the coordinates and size of the rectangle.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.Size">
      <summary>
            Platform aware Size structure
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Size.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.Size"></see> struct.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Size.op_Multiply(GrapeCity.Viewer.Common.Size,System.Double)">
      <summary>
            Scales the size by specified value
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Size.Scale(System.Double,System.Double)">
      <summary>
            Scales the size by specified values.
            </summary>
      <param name="factorX">The width scaling factor.</param>
      <param name="factorY">The height scaling factor.</param>
      <returns>Size.</returns>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Size.op_Addition(GrapeCity.Viewer.Common.Size,GrapeCity.Viewer.Common.Size)">
      <summary>
            Enlarge the size by specified value.
            </summary>
      <param name="size">The size to enlarge.</param>
      <param name="offset">The offset.</param>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Size.ToString">
      <summary>
            Returns a <see cref="T:System.String"></see> that represents this instance.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Size.op_Equality(GrapeCity.Viewer.Common.Size,GrapeCity.Viewer.Common.Size)">
      <summary>
            Checks whether the two sizes are equals.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Size.op_Inequality(GrapeCity.Viewer.Common.Size,GrapeCity.Viewer.Common.Size)">
      <summary>
            Check whether the two sizes are not equals.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Size.Equals(GrapeCity.Viewer.Common.Size)">
      <summary>
            Checks whether this size equals to specified.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Size.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Size.Empty">
      <summary>
            Gets the size with zero width and height.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Size.Width">
      <summary>
            Gets the width.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Size.Height">
      <summary>
            Gets the height.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.WinformsSpecific.FileDocumentLoader">
      <summary>
            FileDocumentLoader
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.NotifyCollectionChangedAction">
      <summary>
            Enum NotifyCollectionChangedAction
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.NotifyCollectionChangedEventArgs">
      <summary>
            Describes the action that caused a System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged event.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.NotifyCollectionChangedEventArgs.#ctor(GrapeCity.Viewer.Common.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.NotifyCollectionChangedEventArgs"></see> class.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.NotifyCollectionChangedEventArgs.#ctor(GrapeCity.Viewer.Common.NotifyCollectionChangedAction,System.Object,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.NotifyCollectionChangedEventArgs"></see> class.
            </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.NotifyCollectionChangedEventArgs.#ctor(GrapeCity.Viewer.Common.NotifyCollectionChangedAction)">
      <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Viewer.Common.NotifyCollectionChangedEventArgs"></see> class.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.NotifyCollectionChangedEventArgs.Action">
      <summary>
            Gets the action type.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.NotifyCollectionChangedEventArgs.NewStartingIndex">
      <summary>
            Gets the index of the starting of new items.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.NotifyCollectionChangedEventArgs.OldStartingIndex">
      <summary>
            Gets the index of the starting of old items.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.NotifyCollectionChangedEventArgs.NewItems">
      <summary>
            Gets the new items.
            </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.NotifyCollectionChangedEventArgs.OldItems">
      <summary>
            Gets the old items.
            </summary>
    </member>
    <member name="T:GrapeCity.Viewer.Common.NotifyCollectionChangedEventHandler">
      <summary>
            Represents the method that handles events that implement the System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged event.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="E:GrapeCity.Viewer.Common.Model.ActiveModel.PropertyChanged">
      <summary>
      </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.HighlightDocumentViewModel.#ctor(GrapeCity.Viewer.Common.Model.DocumentModel,GrapeCity.Viewer.Common.Model.ReportPaneModel)">
      <summary>
      </summary>
    </member>
    <member name="P:GrapeCity.Viewer.Common.Model.RunOptions.ForceDataRefresh">
      <summary>
      </summary>
    </member>
    <member name="M:GrapeCity.Viewer.Common.Model.ReportPaneModel.#ctor(GrapeCity.Viewer.Common.Model.ViewerModel)">
      <summary>
      </summary>
    </member>
  </members>
</doc>