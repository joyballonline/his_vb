<?xml version="1.0"?>
<doc>
<assembly>
<name>
UtilMDL
</name>
</assembly>
<members>
<member name="T:UtilMDL.My.Resources.Resources">
<summary>
  ローカライズされた文字列などを検索するための、厳密に型指定されたリソース クラスです。
</summary>
</member>
<member name="P:UtilMDL.My.Resources.Resources.ResourceManager">
<summary>
  このクラスで使用されているキャッシュされた ResourceManager インスタンスを返します。
</summary>
</member>
<member name="P:UtilMDL.My.Resources.Resources.Culture">
<summary>
  厳密に型指定されたこのリソース クラスを使用して、すべての検索リソースに対し、
  現在のスレッドの CurrentUICulture プロパティをオーバーライドします。
</summary>
</member>
<member name="M:UtilMDL.DB.UtilPostgresDebugger.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Int16)">
 <summary>
 コンストラクタ
 </summary>
 <param name="prmSvAdr">サーバーアドレス</param>
 <param name="prmPortNo">ポート番号</param>
 <param name="prmDbNm">データベース名</param>
 <param name="prmUserId">ユーザーID</param>
 <param name="prmPswd">パスワード</param>
 <param name="prmFileNm">Logファイル名(フルパス)</param>
 <param name="prmDebugFlg">デバッグモード</param>
 <param name="prmConsoleWrite">コンソール出力するかどうか</param>
 <param name="prmTimeout">発行SQLのタイムアウト設定(省略時は規定値の30秒/0設定時は永久待機)</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DB.UtilPostgresDebugger.close">
 <summary>
 DB切断
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DB.UtilPostgresDebugger.beginTran">
 <summary>
 トランザクション開始
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DB.UtilPostgresDebugger.commitTran">
 <summary>
 トランザクション終了
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DB.UtilPostgresDebugger.rollbackTran">
 <summary>
 トランザクション破棄
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DB.UtilPostgresDebugger.selectDB(System.String,System.String,System.Int32@)">
 <summary>
 Select文発行 Select文を発行し、DataSetを返却する 返却するDataSetはprmTblNameのTBL名称で格納
 </summary>
 <param name="prmSQL">Select文</param>
 <param name="prmTblName">返却されるDataSetのTBL名称</param>
 <param name="prmRefRecCnt">取得件数</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DB.UtilPostgresDebugger.selectDB(System.String,System.Collections.Generic.List{UtilMDL.DB.UtilDBPrm},System.String,System.Int32@)">
 <summary>
 置換パラメータ付きSELECT文を発行する (詳細は使用例参照)
 </summary>
 <param name="prmSQL">パラメータ付きSelect文(置換パラメタは「?」)</param>
 <param name="prmParameters">置換パラメータリスト</param>
 <param name="prmTblName">返却されるDataSetのTABLE名称</param>
 <param name="prmRefRecCnt">省略可能：SELECT文の取得レコード件数</param>
 <returns>取得したレコードセットをDataSetオブジェクトとして返却</returns>
 <remarks>SELECT文を発行し、レコードセットを取得する。取得したレコードセットはDataSetオブジェクトとして返却する。</remarks>
</member>
<member name="M:UtilMDL.DB.UtilPostgresDebugger.executeDB(System.String)">
 <summary>
 更新SQL文発行 Insert/Update/Delete文を発行する
 </summary>
 <param name="prmSQL">SQL</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DB.UtilPostgresDebugger.executeDB(System.String,System.Int32@)">
 <summary>
 実行系SQLを発行する（影響件数引数付き）
 </summary>
 <param name="prmSQL">発行するSQL文</param>
 <param name="prmRefAffectedRows">影響を受けた行数</param>
 <remarks>レコードセットを生成しないSQL(INSERT/UPDATE/DELETE…etc)を発行する。</remarks>
</member>
<member name="M:UtilMDL.DB.UtilPostgresDebugger.executeDB(System.String,System.Collections.Generic.List{UtilMDL.DB.UtilDBPrm}@)">
 <summary>
 置換パラメータ付き実行系SQLを発行する (詳細は使用例参照)
 </summary>
 <param name="prmSQL">パラメータ付きSQL文</param>
 <param name="prmRefParameters">置換パラメータリスト</param>
 <remarks>ストアド実行などを想定(それ以外も実行可能)</remarks>
</member>
<member name="M:UtilMDL.DB.UtilPostgresHandler.#ctor(System.String,System.String,System.String,System.String,System.String,System.Int16)">
 <summary>
 コンストラクタ UDLファイルよりDBコネクションを新規生成する
 </summary>
 <param name="prmSvAdr">サーバーアドレス</param>
 <param name="prmPortNo">ポート番号</param>
 <param name="prmDbNm">データベース名</param>
 <param name="prmUserId">ユーザーID</param>
 <param name="prmPswd">パスワード</param>
 <param name="prmTimeout">発行SQLのタイムアウト設定(省略時は既定の30秒/0設定時は永久待機)</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DB.UtilPostgresHandler.#ctor">
 <summary>
 コンストラクタ サブクラス用のコンストラクタ。インスタンス生成後initInstanceを呼び出すこと
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DB.UtilPostgresHandler.initInstance(System.String,System.String,System.String,System.String,System.String,System.Int16)">
 <summary>
 サブルーチン[サブクラス用] UDLファイルよりDBコネクションを新規生成する
 </summary>
 <param name="prmSvAdr">サーバーアドレス</param>
 <param name="prmPortNo">ポート番号</param>
 <param name="prmDbNm">データベース名</param>
 <param name="prmUserId">ユーザーID</param>
 <param name="prmPswd">パスワード</param>
 <param name="prmTimeout">発行SQLのタイムアウト設定(省略時は既定の30秒/0設定時は永久待機)</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DB.UtilPostgresHandler.Finalize">
 <summary>
 デストラクタ DBコネクションの終了処理実施
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DB.UtilPostgresHandler.close">
 <summary>
 DB切断 
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DB.UtilPostgresHandler.beginTran">
 <summary>
 トランザクション開始
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DB.UtilPostgresHandler.commitTran">
 <summary>
 トランザクション終了 トランザクションをCommitする
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DB.UtilPostgresHandler.rollbackTran">
 <summary>
 トランザクション破棄 トランザクションをRollbackする
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DB.UtilPostgresHandler.selectDB(System.String,System.String,System.Int32@)">
 <summary>
 Select文発行 Select文を発行し、DataSetを返却する 返却するDataSetはprmTblNameのTBL名称で格納
 </summary>
 <param name="prmSQL">Select文</param>
 <param name="prmTblName">返却されるDataSetのTBL名称</param>
 <param name="prmRefRecCnt">取得件数</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DB.UtilPostgresHandler.selectDB(System.String,System.Collections.Generic.List{UtilMDL.DB.UtilDBPrm},System.String,System.Int32@)">
 <summary>
 置換パラメータ付きSELECT文を発行する (詳細は使用例参照)
 </summary>
 <param name="prmSQL">パラメータ付きSelect文(置換パラメタは「?」)</param>
 <param name="prmParameters">置換パラメータリスト</param>
 <param name="prmTblName">返却されるDataSetのTABLE名称</param>
 <param name="prmRefRecCnt">省略可能：SELECT文の取得レコード件数</param>
 <returns>取得したレコードセットをDataSetオブジェクトとして返却</returns>
 <remarks>SELECT文を発行し、レコードセットを取得する。取得したレコードセットはDataSetオブジェクトとして返却する。</remarks>
</member>
<member name="M:UtilMDL.DB.UtilPostgresHandler.executeDB(System.String)">
 <summary>
 更新SQL文発行 Insert/Update/Delete文を発行する
 </summary>
 <param name="prmSQL">SQL</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DB.UtilPostgresHandler.executeDB(System.String,System.Int32@)">
 <summary>
 実行系SQLを発行する（影響件数引数付き）
 </summary>
 <param name="prmSQL">発行するSQL文</param>
 <param name="prmRefAffectedRows">影響を受けた行数</param>
 <remarks>レコードセットを生成しないSQL(INSERT/UPDATE/DELETE…etc)を発行する。</remarks>
</member>
<member name="M:UtilMDL.DB.UtilPostgresHandler.executeDB(System.String,System.Collections.Generic.List{UtilMDL.DB.UtilDBPrm}@)">
 <summary>
 置換パラメータ付き実行系SQLを発行する (詳細は使用例参照)
 </summary>
 <param name="prmSQL">パラメータ付きSQL文</param>
 <param name="prmRefParameters">置換パラメータリスト</param>
 <remarks>ストアド実行などを想定(それ以外も実行可能)</remarks>
</member>
<member name="T:UtilMDL.DB.UtilDBIf">
 <summary>
 Util.DBによるDBアクセス機能のI/Fを提供する
 </summary>
 <remarks>本I/Fを実装しているUtil.DBのDBアクセスクラスのインターフェースを提供する。</remarks>
</member>
<member name="P:UtilMDL.DB.UtilDBIf.isTransactionOpen">
 <summary>
 トランザクション中かどうかを示す
 </summary>
 <value>なし</value>
 <returns>True/False</returns>
 <remarks>トランザクションが開始されている場合にTrueを戻す。</remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBIf.close">
 <summary>
 DB切断
 </summary>
 <remarks>DBコネクションを閉じ、コネクションオブジェクトを破棄する。</remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBIf.beginTran">
 <summary>
 トランザクション開始
 </summary>
 <remarks>トランザクションを開始する。</remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBIf.commitTran">
 <summary>
 トランザクション確定
 </summary>
 <remarks>Commitを発行し、トランザクションを閉じる。</remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBIf.rollbackTran">
 <summary>
 トランザクション破棄
 </summary>
 <remarks>RollBackを発行し、トランザクションを閉じる。</remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBIf.selectDB(System.String,System.String,System.Int32@)">
 <summary>
 SELECT文を発行する
 </summary>
 <param name="prmSQL">発行するSELECT文</param>
 <param name="prmTblName">返却されるDataSetのTABLE名称</param>
 <param name="prmRefRecCnt">省略可能：SELECT文の取得レコード件数</param>
 <returns>取得したレコードセットをDataSetオブジェクトとして返却</returns>
 <remarks>SELECT文を発行し、レコードセットを取得する。取得したレコードセットはDataSetオブジェクトとして返却する。</remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBIf.selectDB(System.String,System.Collections.Generic.List{UtilMDL.DB.UtilDBPrm},System.String,System.Int32@)">
 <summary>
 置換パラメータ付きSELECT文を発行する (詳細は使用例参照)
 </summary>
 <param name="prmSQL">パラメータ付きSelect文(置換パラメタは「?」)</param>
 <param name="prmParameters">置換パラメータリスト</param>
 <param name="prmTblName">返却されるDataSetのTABLE名称</param>
 <param name="prmRefRecCnt">省略可能：SELECT文の取得レコード件数</param>
 <returns>取得したレコードセットをDataSetオブジェクトとして返却</returns>
 <remarks>SELECT文を発行し、レコードセットを取得する。取得したレコードセットはDataSetオブジェクトとして返却する。</remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBIf.executeDB(System.String)">
 <summary>
 実行系SQLを発行する
 </summary>
 <param name="prmSQL">発行するSQL文</param>
 <remarks>レコードセットを生成しないSQL(INSERT/UPDATE/DELETE…etc)を発行する。</remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBIf.executeDB(System.String,System.Int32@)">
 <summary>
 実行系SQLを発行する（影響件数引数付き）
 </summary>
 <param name="prmSQL">発行するSQL文</param>
 <param name="prmRefAffectedRows">影響を受けた行数</param>
 <remarks>レコードセットを生成しないSQL(INSERT/UPDATE/DELETE…etc)を発行する。</remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBIf.executeDB(System.String,System.Collections.Generic.List{UtilMDL.DB.UtilDBPrm}@)">
 <summary>
 置換パラメータ付き実行系SQLを発行する (詳細は使用例参照)
 </summary>
 <param name="prmSQL">パラメータ付きSQL文</param>
 <param name="prmRefParameters">置換パラメータリスト</param>
 <remarks>ストアド実行などを想定(それ以外も実行可能)</remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBIf.rmSQ(System.String)">
 <summary>
 シングルクォーテーション文字列化
 </summary>
 <param name="prmSQL">置換対象SQL文字列</param>
 <returns>置換後のSQL文字列</returns>
 <remarks>シングルクォーテーションを文字列化し、SQLインジェクション対策およびデータ登録可能とする。</remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBIf.rmNullStr(System.Object)">
 <summary>
 Nullの文字列置換
 </summary>
 <param name="prmField">フィールド値</param>
 <returns>置換後文字列</returns>
 <remarks>Nullのフィールド値を""(長さ0文字列)へ置換する。</remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBIf.rmNullShort(System.Object)">
 <summary>
 Nullの数値置換(Short型)
 </summary>
 <param name="prmField">フィールド値</param>
 <returns>置換後数値</returns>
 <remarks>Nullのフィールド値をShort型数値へ置換する。</remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBIf.rmNullInt(System.Object)">
 <summary>
 Nullの数値置換(Integer型)
 </summary>
 <param name="prmField">フィールド値</param>
 <returns>置換後数値</returns>
 <remarks>Nullのフィールド値をInteger型数値へ置換する。</remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBIf.rmNullLong(System.Object)">
 <summary>
 Nullの数値置換(Long型)
 </summary>
 <param name="prmField">フィールド値</param>
 <returns>置換後数値</returns>
 <remarks>Nullのフィールド値をLong型数値へ置換する。</remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBIf.rmNullDouble(System.Object)">
 <summary>
 Nullの数値置換(Double型)
 </summary>
 <param name="prmField">フィールド値</param>
 <returns>置換後数値</returns>
 <remarks>Nullのフィールド値をDouble型数値へ置換する。</remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBIf.rmNullDate(System.Object,System.String)">
 <summary>
 Nullの日付文字列置換
 </summary>
 <param name="prmField">フィールド値</param>
 <param name="prmFormatStr">日付書式</param>
 <returns>置換後日付文字列</returns>
 <remarks>Nullのフィールド値を日付フォーマットの文字列へ置換する。</remarks>
</member>
<member name="T:UtilMDL.DB.UtilDBPrm">
 <summary>
 Util.DBによるDBアクセスにおいて、置換パラメタクエリのデータ枠を提供
 </summary>
 <remarks></remarks>
</member>
<member name="T:UtilMDL.DB.UtilDBPrm.parameterType">
 <summary>
 パラメータタイプ(型)
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.DB.UtilDBPrm.parameterType.tBoolean">
 <summary>
 論理値
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.DB.UtilDBPrm.parameterType.tVarchar">
 <summary>
 可変長文字列値
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.DB.UtilDBPrm.parameterType.tDate">
 <summary>
 日付値
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.DB.UtilDBPrm.parameterType.tNumber">
 <summary>
 数値
 </summary>
 <remarks></remarks>
</member>
<member name="T:UtilMDL.DB.UtilDBPrm.parameterDirection">
 <summary>
 パラメータディレクション(I/O)
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.DB.UtilDBPrm.parameterDirection.dInput">
 <summary>
 INパラメータ
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.DB.UtilDBPrm.parameterDirection.dOutput">
 <summary>
 OUTパラメータ
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.DB.UtilDBPrm.parameterDirection.dInputOutput">
 <summary>
 IN/OUTパラメータ
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.DB.UtilDBPrm.parameterDirection.dReturn">
 <summary>
 戻り値
 </summary>
 <remarks></remarks>
</member>
<member name="P:UtilMDL.DB.UtilDBPrm.value">
 <summary>
 値
 </summary>
 <returns>パラメータ値</returns>
 <remarks></remarks>
</member>
<member name="P:UtilMDL.DB.UtilDBPrm.type">
 <summary>
 タイプ(型)
 </summary>
 <returns>パラメータタイプ</returns>
 <remarks></remarks>
</member>
<member name="P:UtilMDL.DB.UtilDBPrm.direction">
 <summary>
 ディレクション(I/O)[UtilMDL.DB.UtilDBPrm.parameterDirectionとして返却]
 </summary>
 <returns>パラメータディレクション(方向)</returns>
 <remarks></remarks>
</member>
<member name="P:UtilMDL.DB.UtilDBPrm.systemDirection">
 <summary>
 ディレクション(I/O)[System.Data.ParameterDirectionとして返却]
 </summary>
 <returns>パラメータディレクション(方向)</returns>
 <remarks></remarks>
</member>
<member name="P:UtilMDL.DB.UtilDBPrm.size">
 <summary>
 サイズ
 </summary>
 <returns>パラメータサイズ</returns>
 <remarks></remarks>
</member>
<member name="P:UtilMDL.DB.UtilDBPrm.refParameter">
 <summary>
 設定後のパラメタポインタ(実行後の結果[パラメタ値]取得に使用)
 </summary>
 <value>ポインタ</value>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBPrm.#ctor(System.Object,System.Int16,UtilMDL.DB.UtilDBPrm.parameterType,UtilMDL.DB.UtilDBPrm.parameterDirection)">
 <summary>
 コンストラクタ
 </summary>
 <param name="prmValue">パラメータ値</param>
 <param name="prmSize">サイズ</param>
 <param name="prmType">パラメータタイプ(型)</param>
 <param name="prmDirection">パラメータディレクション(I/O)</param>
 <remarks></remarks>
</member>
<member name="P:UtilMDL.DB.UtilDBInheritBase.isTransactionOpen">
 <summary>
 トランザクションが開いているかどうかのステータスを戻す
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBInheritBase.close">
 <summary>
 DB接続をクローズする
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBInheritBase.beginTran">
 <summary>
 トランザクションを開始する
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBInheritBase.commitTran">
 <summary>
 トランザクションをCommitする
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBInheritBase.rollbackTran">
 <summary>
 トランザクションをRollbackする
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBInheritBase.selectDB(System.String,System.String,System.Int32@)">
 <summary>
 Select文を発行し、DataSetを返却する
 </summary>
 <param name="prmSQL">Select文</param>
 <param name="prmTblName">返却されるDataSetのTBL名称</param>
 <param name="prmRefRecCnt">取得件数</param>
 <returns>DataSet</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBInheritBase.selectDB(System.String,System.Collections.Generic.List{UtilMDL.DB.UtilDBPrm},System.String,System.Int32@)">
 <summary>
 置換パラメータ付きSELECT文を発行する (詳細は使用例参照)
 </summary>
 <param name="prmSQL">パラメータ付きSelect文(置換パラメタは「?」)</param>
 <param name="prmParameters">置換パラメータリスト</param>
 <param name="prmTblName">返却されるDataSetのTABLE名称</param>
 <param name="prmRefRecCnt">省略可能：SELECT文の取得レコード件数</param>
 <returns>取得したレコードセットをDataSetオブジェクトとして返却</returns>
 <remarks>SELECT文を発行し、レコードセットを取得する。取得したレコードセットはDataSetオブジェクトとして返却する。</remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBInheritBase.executeDB(System.String)">
 <summary>
 Insert/Update/Delete文を発行する
 </summary>
 <param name="prmSQL">SQL文</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBInheritBase.executeDB(System.String,System.Int32@)">
 <summary>
 実行系SQLを発行する（影響件数引数付き）
 </summary>
 <param name="prmSQL">発行するSQL文</param>
 <param name="prmRefAffectedRows">影響を受けた行数</param>
 <remarks>レコードセットを生成しないSQL(INSERT/UPDATE/DELETE…etc)を発行する。</remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBInheritBase.executeDB(System.String,System.Collections.Generic.List{UtilMDL.DB.UtilDBPrm}@)">
 <summary>
 置換パラメータ付き実行系SQLを発行する (詳細は使用例参照)
 </summary>
 <param name="prmSQL">パラメータ付きSQL文</param>
 <param name="prmRefParameters">置換パラメータリスト</param>
 <remarks>ストアド実行などを想定(それ以外も実行可能)</remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBInheritBase.rmSQ(System.String)">
 <summary>
 シングルクォート文字列化 シングルクォートを「''」に置換して返却
 </summary>
 <param name="prmSQL">Select文</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBInheritBase.rmNullStr(System.Object)">
 <summary>
 Null⇒文字列
 </summary>
 <param name="prmField"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBInheritBase.rmNullShort(System.Object)">
 <summary>
 Null⇒Short
 </summary>
 <param name="prmField"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBInheritBase.rmNullInt(System.Object)">
 <summary>
 Null⇒Integer
 </summary>
 <param name="prmField"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBInheritBase.rmNullLong(System.Object)">
 <summary>
 Null⇒Long
 </summary>
 <param name="prmField"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBInheritBase.rmNullDouble(System.Object)">
 <summary>
 Null⇒Double
 </summary>
 <param name="prmField"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DB.UtilDBInheritBase.rmNullDate(System.Object,System.String)">
 <summary>
 Null⇒日付文字列値
 </summary>
 <param name="prmField"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.LANG.UtilLangHandler.#ctor(System.String)">
 <summary>
 コンストラクタ
 </summary>
 <param name="prmFileName">フルパスメッセージファイル名</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.LANG.UtilLangHandler.getLANG(System.String,System.String)">
 <summary>
 メッセージ取得 通知されたメッセージIDに対応するMSGを編集して返却する
 </summary>
 <param name="prmLangId">メッセージID</param>
 <returns>検索されたメッセージビーン(ValueObject)</returns>
 <remarks>発生例外       ：Exception,UsrDefException</remarks>
</member>
<member name="T:UtilMDL.API.UtilDirectorySelector">
 <summary>
 ユーティリティモジュール
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.API.UtilDirectorySelector.choiceFolder(System.String@,System.String@,UtilMDL.API.UtilDirectorySelector.ROOT,UtilMDL.API.UtilDirectorySelector.FLG_FOLDER,System.Int32)">
 <summary>
 フォルダ選択ダイアログ表示
 </summary>
 <param name="prmDefaultDir">デフォルトフォルダ</param>
 <param name="prmTitle">ダイアログに表示する説明文</param>
 <param name="prmRoot">ルート位置(ROOTの定数/初期値=DESKTOP)</param>
 <param name="prmFlg">表示フォルダオプション(FLG_FOLDERの定数/初期値=RETURNONLYFSDIRS)</param>
 <param name="prmWHwnd">ダイアログのオーナーウィンドウハンドル</param>
 <returns>正常終了時：選択フォルダフルパス / キャンセル時：""</returns>
 <remarks>以下、Formにおける使用例
Dim RtnDir As String = UtilDirectorySelector.choiceFolder("C:\WINDOWS", "○○のフォルダを選択してください。")
 MsgBox RtnDir</remarks>
</member>
<member name="M:UtilMDL.API.UtilDirectorySelector.BrowseCallbackProc(System.Int32,System.Int32,System.Int32,System.String)">
 <summary>
 SHBrowseForFolder API のコールバック関数定義
 </summary>
 <param name="lngHWnd"></param>
 <param name="lngUMsg"></param>
 <param name="lngLParam"></param>
 <param name="lngLpData"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:UtilMDL.API.UtilIniFileHandler.fileName">
 <summary>
 ハンドルしているIniファイル名
 </summary>
 <value>Iniファイル名</value>
 <returns>Iniファイル名</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.API.UtilIniFileHandler.#ctor(System.String)">
 <summary>
 Iniファイルハンドラを生成する
 </summary>
 <param name="prmFileName">対象とするIniファイル名(フルパス)</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.API.UtilIniFileHandler.getIni(System.String,System.String)">
 <summary>
 項目取得
 </summary>
 <param name="prmAppName">セクション名</param>
 <param name="prmKeyName">項目名</param>
 <returns>取得値</returns>
 <remarks>（処理概要）通知されたセクション名/項目名に対応した設定値を取得する</remarks>
</member>
<member name="M:UtilMDL.CommonDialog.UtilCmnDlgHandler.openFileDialog(System.String,System.String,System.String,System.String,System.Boolean)">
 <summary>
 「ファイルを選択」コモンダイアログ表示
 </summary>
 <param name="prmDir">ダイアログ初期表示ディレクトリ</param>
 <param name="prmFileNm">ダイアログ初期表示ファイル名</param>
 <param name="prmFillter">ダイアログ表示フィルター TXT/CSV/DAT/ALL </param>
 <param name="prmTitle">タイトル</param>
 <param name="prmMultiSel">複数選択可否</param>
 <returns>選択されたファイルのフルパス(複数選択ありの場合は「,」で連結して返却/キャンセル時は""を返却)</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.CommonDialog.UtilCmnDlgHandler.saveFileDialog(System.String,System.String,System.String,System.String)">
 <summary>
 「名前をつけて保存」コモンダイアログ表示
 </summary>
 <param name="prmDir">ダイアログ初期表示ディレクトリ</param>
 <param name="prmFileNm">ダイアログ初期表示ファイル名</param>
 <param name="prmFillter">ダイアログ表示フィルター TXT/CSV/DAT/ALL</param>
 <param name="prmTitle">タイトル</param>
 <returns>選択されたファイルのフルパス(キャンセル時は""を返却)</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.Combo.UtilComboBoxHandler.#ctor(System.Windows.Forms.ComboBox@)">
 <summary>
 コンボボックスハンドラのインスタンスを生成する
 </summary>
 <param name="prmTarget">操作対象となるコンボボックス</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.Combo.UtilComboBoxHandler.beginUpdate">
 <summary>
 描画停止 コンボボックス項目追加時の処理高速化を目的とし、項目追加前に呼び出す
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.Combo.UtilComboBoxHandler.endUpdate">
 <summary>
 描画開始 コンボボックス項目追加時の処理高速化を目的とし、項目追加後に呼び出す
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.Combo.UtilComboBoxHandler.addItem(UtilMDL.Combo.UtilCboVO@)">
 <summary>
 項目追加 コンボボックス項目追加
 </summary>
 <param name="prmData">UtilCboVOのインスタンス</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.Combo.UtilComboBoxHandler.selectItem(System.String)">
 <summary>
 項目選択 コンボボックスの項目を選択させる
 </summary>
 <param name="prmCode">コンボボックスに格納されているデータの内、選択させたい項目のコード</param>
 <remarks>渡されたコードが見つからない場合、未選択とする</remarks>
</member>
<member name="M:UtilMDL.Combo.UtilComboBoxHandler.getName">
 <summary>
 表示名取得 現在選択されている項目の表示名称を取得する
 </summary>
 <returns>選択値(表示名称)</returns>
 <remarks>未選択のばあい、""を返却</remarks>
</member>
<member name="M:UtilMDL.Combo.UtilComboBoxHandler.getCode">
 <summary>
 コード取得 現在選択されている項目の項目(コード)を取得する
 </summary>
 <returns>選択値(コード)</returns>
 <remarks>未選択のばあい、""を返却</remarks>
</member>
<member name="M:UtilMDL.Combo.UtilComboBoxHandler.getRelationObj">
 <summary>
 コード取得 現在選択されている項目の項目(コード)を取得する
 </summary>
 <returns>選択値(コード)</returns>
 <remarks>未選択のばあい、""を返却</remarks>
</member>
<member name="T:UtilMDL.Combo.UtilCboVO">
 <summary>
 UtilComboBoxHandlerに渡すコンボボックスデータの枠を提供(Beans)
 </summary>
 <remarks></remarks>
</member>
<member name="P:UtilMDL.Combo.UtilCboVO.code">
 <summary>
 コンボボックスの各行に設定されるコード
 </summary>
 <value>コード</value>
 <returns>コード</returns>
 <remarks></remarks>
</member>
<member name="P:UtilMDL.Combo.UtilCboVO.name">
 <summary>
 コンボボックスの各行に設定される表示名称
 </summary>
 <value>表示名称</value>
 <returns>表示名称</returns>
 <remarks></remarks>
</member>
<member name="P:UtilMDL.Combo.UtilCboVO.obj">
 <summary>
 コンボボックスの各行に設定される関連付けオブジェクト
 </summary>
 <value>関連付けオブジェクト</value>
 <returns>関連付けオブジェクト</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.Combo.UtilCboVO.#ctor(System.String,System.String,System.Object)">
 <summary>
 コンボボックスハンドラへの受け渡しデータをインスタンス化する
 </summary>
 <param name="prmCode">コード</param>
 <param name="prmName">名称</param>
 <param name="prmRelationObj">関連付けオブジェクト</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.Combo.UtilCboVO.#ctor(System.String,System.String)">
 <summary>
 コンボボックスハンドラへの受け渡しデータをインスタンス化する
 </summary>
 <param name="prmCode">コード</param>
 <param name="prmName">名称</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.Combo.UtilCboVO.ToString">
 <summary>
 コンボボックスに表示する文字列をあらわす
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.DataGridView.UtilDataGridViewHandler.chkType.Date1">
 <summary>
 日付型１→yy/MM/dd
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.DataGridView.UtilDataGridViewHandler.chkType.Date2">
 <summary>
 日付型２→yyyy/MM/dd
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.DataGridView.UtilDataGridViewHandler.chkType.Num">
 <summary>
 数値→123456789
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.DataGridView.UtilDataGridViewHandler.chkType.Num_M">
 <summary>
 数値（マイナス許可）→-123 123
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.DataGridView.UtilDataGridViewHandler.chkType.Cur">
 <summary>
 金額（カンマ編集）→123,456,789
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.DataGridView.UtilDataGridViewHandler.chkType.Hankaku">
 <summary>
 半角英数→ABCDabcd1234
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDataGridViewHandler.#ctor(System.Windows.Forms.DataGridView)">
 <summary>
 DataGridViewハンドラのインスタンスを生成する
 </summary>
 <param name="prmTargetGrid">操作対象となるDataGridView</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDataGridViewHandler.clearRow">
 <summary>
 データ行を初期化する(一覧を0行とする)
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDataGridViewHandler.checkBoxOn(System.String,System.Int32)">
 <summary>
 チェックボックス型の列データをチェックボックスONとする
 </summary>
 <param name="prmDataColName">データセット上の列名</param>
 <param name="prmRow">対象行のインデックス(0～)</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDataGridViewHandler.checkBoxOff(System.String,System.Int32)">
 <summary>
 チェックボックス型の列データをチェックボックスOFFとする
 </summary>
 <param name="prmDataColName">データセット上の列名</param>
 <param name="prmRow">対象行のインデックス(0～)</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDataGridViewHandler.getCell(System.String,System.Int32)">
 <summary>
 セルオブジェクトを取得する(DataGridView上のCellそのものを取得)
 </summary>
 <param name="prmColName">グリッド上の列名</param>
 <param name="prmRow">対象行のインデックス(0～)</param>
 <returns>セルオブジェクト</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDataGridViewHandler.getCellData(System.String,System.Int32)">
 <summary>
 セルに格納されているデータを取得する
 </summary>
 <param name="prmDataColName">データセット上の列名</param>
 <param name="prmRow">対象行のインデックス(0～)</param>
 <returns>DataSet上の列データ</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDataGridViewHandler.getCellData(System.Int32,System.Int32)">
 <summary>
 セルに格納されているデータを取得する
 </summary>
 <param name="prmDataColIdx">データセット上の列インデックス(0～)</param>
 <param name="prmRow">対象行のインデックス(0～)</param>
 <returns>DataSet上の列データ</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDataGridViewHandler.setCellData(System.String,System.Int32,System.Object)">
 <summary>
 セルに格納されているデータを設定する
 </summary>
 <param name="prmDataColName">データセット上の列名</param>
 <param name="prmRow">対象行のインデックス(0～)</param>
 <param name="prmVal">格納するデータ</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDataGridViewHandler.setCurrentCell(System.String,System.Int32)">
 <summary>
 カレントセルを設定する
 </summary>
 <param name="prmColName">グリッド上の列名</param>
 <param name="prmRow">対象行のインデックス(0～)</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDataGridViewHandler.getMaxRow">
 <summary>
 グリッドに表示されているデータの最大行数取得
 </summary>
 <returns>最大行</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDataGridViewHandler.colRock(System.String)">
 <summary>
 列をロックする(読取専用)
 </summary>
 <param name="prmColName">グリッド上の列名</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDataGridViewHandler.colUnRock(System.String)">
 <summary>
 列のロックを解除する(編集可能)
 </summary>
 <param name="prmColName">グリッド上の列名</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDataGridViewHandler.colChengeColor(System.String,System.Drawing.Color)">
 <summary>
 列の背景色を変更する
 </summary>
 <param name="prmColName">グリッド上の列名</param>
 <param name="prmBackColor">背景色</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDataGridViewHandler.colChengeColor(System.String,System.Drawing.Color,System.Drawing.Color)">
 <summary>
 列の背景色を変更する
 </summary>
 <param name="prmColName">グリッド上の列名</param>
 <param name="prmBackColor">背景色</param>
 <param name="prmForeColor">前景色</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDataGridViewHandler.colChengeColor(System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
 <summary>
 列の背景色を変更する
 </summary>
 <param name="prmColName">グリッド上の列名</param>
 <param name="prmBackColor">背景色</param>
 <param name="prmForeColor">前景色</param>
 <param name="prmSelBackColor">選択時の背景色</param>
 <param name="prmSelForeColor">選択時の前景色</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDataGridViewHandler.colGetColor(System.String,System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@)">
 <summary>
 列の背景色を取得する
 </summary>
 <param name="prmColName">グリッド上の列名</param>
 <param name="prmRefBackColor">背景色</param>
 <param name="prmRefForeColor">前景色</param>
 <param name="prmRefSelBackColor">選択時の背景色</param>
 <param name="prmRefSelForeColor">選択時の前景色</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDataGridViewHandler.rowChengeColor(System.Int32,System.Drawing.Color)">
 <summary>
 行の背景色を変更する
 </summary>
 <param name="prmRowIdx">対象行のインデックス</param>
 <param name="prmBackColor">背景色</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDataGridViewHandler.rowChengeColor(System.Int32,System.Drawing.Color,System.Drawing.Color)">
 <summary>
 行の背景色を変更する
 </summary>
 <param name="prmRowIdx">対象行のインデックス</param>
 <param name="prmBackColor">背景色</param>
 <param name="prmForeColor">前景色</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDataGridViewHandler.rowChengeColor(System.Int32,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
 <summary>
 行の背景色を変更する
 </summary>
 <param name="prmRowIdx">対象行のインデックス</param>
 <param name="prmBackColor">背景色</param>
 <param name="prmForeColor">前景色</param>
 <param name="prmSelBackColor">選択時の背景色</param>
 <param name="prmSelForeColor">選択時の前景色</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDataGridViewHandler.rowGetColor(System.Int32,System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@)">
 <summary>
 行の背景色を取得する
 </summary>
 <param name="prmRowIdx">対象行のインデックス</param>
 <param name="prmRefBackColor">背景色</param>
 <param name="prmRefForeColor">前景色</param>
 <param name="prmRefSelBackColor">選択時の背景色</param>
 <param name="prmRefSelForeColor">選択時の前景色</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDataGridViewHandler.getClickBtn(System.Windows.Forms.DataGridViewCellEventArgs,System.Int32@)">
 <summary>
 ボタン型の列において、クリックされた行のインデックスを取得
 </summary>
 <param name="e">CellContentClickイベントのイベントオブジェクト</param>
 <param name="prmRefRowIdx">押下ボタン行Idx(0～)</param>
 <returns>True/False：ボタンクリックされているか否か</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDataGridViewHandler.addItem(System.String,UtilMDL.DataGridView.UtilDgvCboVO)">
 <summary>
 コンボボックス列へデータを1件追加する
 </summary>
 <param name="prmColName">グリッド上の列名</param>
 <param name="prmData">コンボボックスデータのVO(UtilDgvCboVO)</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDataGridViewHandler.setCboData(System.String,System.Data.DataSet,System.Boolean,System.String,System.String,System.String)">
 <summary>
 コンボボックス型の列へデータを複数件追加する
 </summary>
 <param name="prmColName">グリッド上の列名</param>
 <param name="prmDataSet">設定するDataSet(prmTblName省略時はIndex=0のデータテーブルを使用)</param>
 <param name="prmNonSelRowFlg">先頭に空行(未選択行)を設けるかどうかのフラグ(設ける場合：当該行を選択時はコードを""とする)</param>
 <param name="prmDisplayMember">DataSet上の表示名称を格納している列の列名称</param>
 <param name="prmValueMember">DataSet上のコードを格納している列の列名称</param>
 <param name="prmTblName">DataSet上の使用するTBL名を指定</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDataGridViewHandler.selectItem(System.Int32,System.String,System.String)">
 <summary>
 コンボボックス型の列上のコンボを選択させる　コードが見つからない場合は未選択とする
 </summary>
 <param name="prmRowIdx">対象行のインデックス(0～)</param>
 <param name="prmColName">グリッド上の列名</param>
 <param name="prmCode">コード</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDataGridViewHandler.getCode(System.Int32,System.String)">
 <summary>
 コンボボックス列の選択値コード取得
 </summary>
 <param name="prmRowIdx">行番号</param>
 <param name="prmColName">列名</param>
 <returns>選択値(コード)　未選択のばあい、""を返却</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDataGridViewHandler.getName(System.Int32,System.String)">
 <summary>
 表示名取得　現在選択されている項目の表示名称を取得する　未選択のばあい、""を返却
 </summary>
 <param name="prmRowIdx">行番号</param>
 <param name="prmColName">列の名称</param>
 <returns>選択値(表示名称)</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDataGridViewHandler.chkCell(System.Object,System.Windows.Forms.DataGridViewEditingControlShowingEventArgs,UtilMDL.DataGridView.UtilDataGridViewHandler.chkType)">
 <summary>
 データグリッドビューのセル入力を制限する
 </summary>
 <param name="prmsender">呼び出し元（EditingControlShowing）イベントの「sender」パラメータ</param>
 <param name="prme">呼び出し元（EditingControlShowing）イベントの「e」パラメータ</param>
 <param name="prmchkType">チェック方法</param>
 <returns>チェック必要情報（VO）</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDataGridViewHandler.AfterchkCell(UtilMDL.DataGridView.UtilDgvChkCellVO)">
 <summary>
 データグリッドビューセルの入力制限後の後処
 </summary>
 <param name="prmchkVO">チェック情報格納VO</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDataGridViewHandler.ChkDgv_Date_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
 <summary>
 日付型の入力チェック
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDataGridViewHandler.ChkDgv_Date2_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
 <summary>
 日付型の入力チェック
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDataGridViewHandler.IsExistString(System.String)">
 <summary>
 空白判定
 </summary>
 <returns>True=空白では無い, False=空白</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDataGridViewHandler.gridTabKeyDown(System.Windows.Forms.Form,System.Windows.Forms.KeyEventArgs)">
 <summary>
 タブキー押下時制御 タブキー押下時、行移動（UPキー、DOWNキー動作）する
 </summary>
 <param name="prmForm">フォーカス制御を行うフォーム</param>
 <param name="prmEvent">KeyPressイベント</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDgvCboVO.#ctor(System.String,System.String)">
 <summary>
 グリッドハンドラへの受け渡しデータをインスタンス化する
 </summary>
 <param name="prmCode">コード</param>
 <param name="prmName">名称</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDgvCboVO.ToString">
 <summary>
 コンボボックスに表示する文字列をあらわす
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDgvChkCellVO.#ctor(System.String,System.Windows.Forms.DataGridViewTextBoxEditingControl,System.Int32)">
 <summary>
 グリッドハンドラへの受け渡しデータをインスタンス化する
 </summary>
 <param name="prmbefData">編集前データ</param>
 <param name="prmEditingControl">編集セルのコントロール</param>
 <param name="prmchkType">チェック方法</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.DataGridView.UtilDgvChkCellVO.ToString">
 <summary>
 VO全体を表示する文字列をあらわす
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.FileDirectory.UtilDirectory.isDirExists(System.String)">
 <summary>
 ディレクトリの存在チェック
 </summary>
 <param name="prmDir">ディレクトリ名</param>
 <returns>存在/非存在</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.FileDirectory.UtilDirectory.delete(System.String)">
 <summary>
 指定したディレクトリを削除する
 </summary>
 <param name="prmDir">ディレクトリ名</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.FileDirectory.UtilDirectory.create(System.String)">
 <summary>
 指定したディレクトリを作成する
 </summary>
 <param name="prmDir">ディレクトリ名</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.FileDirectory.UtilDirectory.getFiles(System.String)">
 <summary>
 指定したディレクトリのファイル名(複数)を取得
 </summary>
 <param name="prmDir">ディレクトリ名</param>
 <returns>取得ファイル名(配列)</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.FileDirectory.UtilDirectory.getDirectories(System.String)">
 <summary>
 指定したディレクトリのフォルダ名(複数)を取得
 </summary>
 <param name="prmDir">ディレクトリ名</param>
 <returns>取得フォルダ名(配列)</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.FileDirectory.UtilDirectory.getSugDirectories(System.String)">
 <summary>
 指定したディレクトリ配下に存在するサブディレクトリを全て取得する
 </summary>
 <param name="prmDir">ディレクトリ名</param>
 <returns>取得ディレクトリ名(配列)</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.FileDirectory.UtilFile.#ctor">
 <summary>
 コンストラクタ
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.FileDirectory.UtilFile.isFileExists(System.String)">
 <summary>
 ファイルが存在するかどうかのチェックを行う
 </summary>
 <param name="prmFile">ファイル名</param>
 <returns>存在/非存在</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.FileDirectory.UtilFile.delete(System.String)">
 <summary>
 指定したファイルを削除する
 </summary>
 <param name="prmFile">ファイル名</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.FileDirectory.UtilFile.copy(System.String,System.String,System.Boolean)">
 <summary>
 指定したファイルをコピーする
 </summary>
 <param name="prmSourceFile">コピー元ファイル名</param>
 <param name="prmDestFile">コピー先ファイル名</param>
 <param name="prmOverWrite">上書き確認</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.FileDirectory.UtilFile.move(System.String,System.String)">
 <summary>
 指定したファイルを移動する ※同じディレクトリを指定した場合、ReNameとなる
 </summary>
 <param name="prmSourceFile">移動元ファイル名</param>
 <param name="prmDestFile">移動先ファイル名</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.FileDirectory.UtilFile.getTimeStamp(System.String)">
 <summary>
 指定したファイルのタイムスタンプを取得する
 </summary>
 <param name="prmFile">ファイル名</param>
 <returns>タイムスタンプ</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.FileDirectory.UtilFile.getSize(System.String)">
 <summary>
 指定したファイルのファイルサイズを取得する
 </summary>
 <param name="prmFile">ファイル名</param>
 <returns>ファイル削除</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.FileDirectory.UtilFile.dividePathAndFile(System.String,System.String@,System.String@)">
 <summary>
 指定されたフルパスをディレクトリとファイル名に分割する
 </summary>
 <param name="prmFullPath">対象フルパス</param>
 <param name="prmRefPath">取得パス</param>
 <param name="prmRefFile">取得ファイル名</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.FileDirectory.UtilFile.getWriteTimeStamp(System.String)">
 <summary>
 指定したファイルの更新日を取得する
 </summary>
 <param name="prmFile">ファイル名</param>
 <returns>更新日</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.Log.UtilLogDebugger.#ctor(System.String,System.Boolean,System.Boolean)">
 <summary>
 コンストラクタ
 </summary>
 <param name="prmFileNm">Logファイル名(フルパス)</param>
 <param name="prmDebugFlg">デバッグモード</param>
 <param name="prmConsoleWrite">コンソール出力するかどうか</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.Log.UtilLogDebugger.writeLine(System.Int16,System.String,System.String)">
 <summary>
 拡張ログ出力 ログ出力タイプがデバッグのものはデバッグモード=trneの場合のみ出力する
 </summary>
 <param name="prmLogType">ログ出力タイプ(LOG_DEBUG/LOG_INFO/LOG_ERR)</param>
 <param name="prmOutPut">YYYY/MM/DD HH:MM:DD   エラーコード＆エラーメッセージ</param>
 <param name="prmOutPut2">SQL文など追加メッセージ(指定時のみ出力)</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.Log.UtilLogWriter.#ctor(System.String,System.Boolean)">
 <summary>
 コンストラクタ
 </summary>
 <param name="prmFileNm">Logファイル名(フルパス)</param>
 <param name="prmConsoleWrite">コンソール出力するかどうか</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.Log.UtilLogWriter.writeLine(System.String,System.String)">
 <summary>
 ログ出力 指定された文字列をログ出力する
 </summary>
 <param name="prmOutPut">YYYY/MM/DD HH:MM:DD   エラーコード＆エラーメッセージ</param>
 <param name="prmOutPut2">SQL文など追加メッセージ(指定時のみ出力)</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.MSG.UtilMsgHandler.#ctor(System.String)">
 <summary>
 コンストラクタ
 </summary>
 <param name="prmFileName">フルパスメッセージファイル名</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.MSG.UtilMsgHandler.dspMSG(System.String,System.String)">
 <summary>
 メッセージ表示 通知されたメッセージIDに対応するMSGを編集して表示する
 </summary>
 <param name="prmMsgId">メッセージID</param>
 <param name="prmOptionalMsg">追加メッセージ</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.MSG.UtilMsgHandler.getMSG(System.String,System.String)">
 <summary>
 メッセージ取得 通知されたメッセージIDに対応するMSGを編集して返却する
 </summary>
 <param name="prmMsgId">メッセージID</param>
 <param name="prmOptionalMsg">追加メッセージ</param>
 <returns>検索されたメッセージビーン(ValueObject)</returns>
 <remarks>発生例外       ：Exception,UsrDefException</remarks>
</member>
<member name="M:UtilMDL.MSG.UtilMsgVO.#ctor(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
 <summary>
 コンストラクタ
 </summary>
 <param name="prmDspStr">出力するテキスト</param>
 <param name="prmTitle">タイトル</param>
 <param name="prmButton">ボタンの種類</param>
 <param name="prmIcon">アイコン</param>
 <param name="prmDefaultButton">既定のボタン</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.Text.UtilTextFunc.splitCSV(System.String,System.Char,System.Char)">
 <summary>
 CSV形式文字列の読み込み CSV形式の文字列から各フィールドをStringオブジェクトの配列として生成後返却する
 </summary>
 <param name="prmSource">分割対象文字列</param>
 <param name="prmSeparator">区切り文字(省略時：,)</param>
 <param name="prmEncloser">括り文字(省略時：")</param>
 <returns>分割後のString配列</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.Text.UtilTextFunc.splitFixedString(System.String,System.Int16[])">
 <summary>
 固定長文字列形式の読み込み 固定長文字列形式のデータを各フィールドに分割しStringオブジェクトの配列として返却する
 </summary>
 <param name="prmSource">分割対象文字列</param>
 <param name="prmSeparateCount">各フィールドのByte数</param>
 <returns>分割後のString配列</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.Text.UtilTextReader.#ctor(System.String)">
 <summary> 
 コンストラクタ
 </summary>
 <param name="prmFileName">ファイル名</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.Text.UtilTextReader.Finalize">
 <summary>
 デストラクタ
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.Text.UtilTextReader.open">
 <summary>
 ファイルオープン　オープンしたら必ずcloseメソッドの呼出を保障すること
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.Text.UtilTextReader.close">
 <summary>
 ファイルクローズ
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.Text.UtilTextReader.readLine">
 <summary>
 リードライン
 </summary>
 <returns>読み込み文字列</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.Text.UtilTextReader.readToEnd">
 <summary>
 全読み込み(カレント行以降)
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.Text.UtilTextWriter.#ctor(System.String)">
 <summary>
 コンストラクタ ファイルが存在しない場合はオープンしたタイミングでファイルを作成する。
 </summary>
 <param name="prmFileName"></param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.Text.UtilTextWriter.Finalize">
 <summary>
 デストラクタ
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.Text.UtilTextWriter.open(System.Boolean)">
 <summary>
 オープン オープンしたら必ずcloseメソッドの呼出を保障すること
 </summary>
 <param name="prmAppendFlg">追加書き込みするかどうかのフラグ(Falseの場合、上書きする)</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.Text.UtilTextWriter.close">
 <summary>
 クローズ
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.Text.UtilTextWriter.write(System.String)">
 <summary>
 指定された文字列を書き込む
 </summary>
 <param name="prmStr">書き込み文字列</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.Text.UtilTextWriter.writeLine(System.String)">
 <summary>
 指定された文字列を書き込み、最後に改行を出力する
 </summary>
 <param name="prmStr">書き込み文字列</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.Text.UtilTextWriter.newLine">
 <summary>
 改行
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UsrDefException.#ctor(System.String)">
 <summary>
 ①(ユーザー定義例外生成用コンストラクタ)
 </summary>
 <param name="prmExceptionMsg">Exceptionに格納するエラーメッセージ</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UsrDefException.#ctor(System.String,UtilMDL.MSG.UtilMsgVO)">
 <summary>
 ②(ユーザー定義例外生成用コンストラクタ)
 </summary>
 <param name="prmExceptionMsg">Exceptionに格納するエラーメッセージ</param>
 <param name="prmDspMessageVO">ユーザー通知用メッセージのMsgVO</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UsrDefException.#ctor(System.Exception,UtilMDL.MSG.UtilMsgVO,System.Boolean,System.String)">
 <summary>
 ③(システム例外からのクローン生成用コンストラクタ)　Catchされたシステム例外からUsrDefExceptionへの詰め替えを想定
 </summary>
 <param name="prmException">発生したシステム例外</param>
 <param name="prmDspMessageVO">ユーザー通知用メッセージのMsgVO</param>
 <param name="prmSilentMode">メッセージを出すか出さないかを指定</param>
 <param name="prmOutLogFile">MSGを出さない場合に代わりに出力されるログファイル名を指定</param>
 <remarks>システム例外がCathされることを想定している為、インスタンス化した時点でエラーMsgを出力する</remarks>
</member>
<member name="M:UtilMDL.UsrDefException.#ctor(System.String,UtilMDL.MSG.UtilMsgVO,System.Windows.Forms.Control)">
 <summary>
 ④(ユーザー定義例外生成用コンストラクタ)　入力チェック時などのThrowを想定
 </summary>
 <param name="prmExceptionMsg">Exceptionに格納するエラーメッセージ</param>
 <param name="prmDspMessageVO">ユーザー通知用メッセージのMsgVO</param>
 <param name="prmErrCtl">フォーカスを設定するコントロール</param>
 <remarks>2006.11.06 Updated By Laevigata, Inc.</remarks>
</member>
<member name="M:UtilMDL.UsrDefException.#ctor(System.String,UtilMDL.MSG.UtilMsgVO,System.Windows.Forms.DataGridView,System.String,System.Int32)">
 <summary>
 ⑤(ユーザー定義例外生成用コンストラクタ)　DataGridView入力チェック時などのThrowを想定
 </summary>
 <param name="prmExceptionMsg">Exceptionに格納するエラーメッセージ</param>
 <param name="prmDspMessageVO">ユーザー通知用メッセージのMsgVO</param>
 <param name="prmErrDgv">フォーカスを設定するDataGridView</param>
 <param name="prmColName">選択させたいセルのグリッド上の列名</param>
 <param name="prmRow">選択させたいセルの行番号</param>
 <remarks>2006.11.06 Created By Laevigata, Inc.</remarks>
</member>
<member name="M:UtilMDL.UsrDefException.dspMsg(System.Boolean,System.String)">
 <summary>
 メッセージ表示 格納済みのMSGを表示(同一のExceptionに対しては一度しかMSGを表示しない)し、エラー対象コントロールが存在した場合はフォーカスの位置づけも行う
 </summary>
 <param name="prmSilentMode">メッセージを出すか出さないかを指定</param>
 <param name="prmOutLogFile">MSGを出さない場合に代わりに出力されるログファイル名を指定</param>
 <returns>押下ボタン(DialogResult)</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.#ctor">
 <summary>
 コンストラクタ
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.getAppPath(System.Reflection.Assembly)">
 <summary>
 アプリケーション実行パスを取得
 </summary>
 <param name="prmAssembly">アセンブリ</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.getAppName(System.Reflection.Assembly)">
 <summary>
 アプリケーション名称を取得
 </summary>
 <param name="prmAssembly">アセンブリ</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.getAppVersion(System.Reflection.Assembly)">
 <summary>
 アプリケーションのVersionを取得
 </summary>
 <param name="prmAssembly">アセンブリ</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.isFileExists(System.String)">
 <summary>
 ファイル存在チェック 引数のファイルが存在するかどうかを判定
 </summary>
 <param name="prmFile">判定ファイルフルパス文字列</param>
 <returns>True/False</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.isDirExists(System.String)">
 <summary>
 フォルダ存在チェック 引数のディレクトリが存在するかどうかを判定
 </summary>
 <param name="prmDir">判定ディレクトリ文字列</param>
 <returns>True/False</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.getErrDetail(System.Exception)">
 <summary>
 エラーメッセージ取得 Exceptionの詳細メッセージを取得する
 </summary>
 <param name="prmException">メッセージを取得する例外</param>
 <returns>編集済みエラーメッセージ</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.moveNextFocus(System.Windows.Forms.Form,System.Windows.Forms.KeyPressEventArgs)">
 <summary>
 フォーカス遷移 次のコントロールへフォーカス移動を行う
 </summary>
 <param name="prmForm">フォーカス制御を行うフォーム</param>
 <param name="prmEvent">KeyPressイベント</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.getLenB(System.String)">
 <summary>
 文字列データ長取得(全角・半角対応) 渡された文字列の長さを求める(全角1文字=2，半角1文字=1で計算)
 </summary>
 <param name="prmStr">対象文字列</param>
 <returns>文字列データ長(バイト単位)</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.setDataLen(System.String,System.Int32)">
 <summary>
 データ長取得(全角・半角対応) 文字列を指定された長さに編集する. 文字列＞データ長 ： 超過分切り捨て.  文字列＜データ長 ： 不足分スペース詰め.
 </summary>
 <param name="prmStr">対象文字列</param>
 <param name="prmLen">指定データ長 … バイト単位</param>
 <returns>編集文字列</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.isSharedNWStr(System.String)">
 <summary>
 全角・半角混在チェック 文字列中に半角・全角が混在しているかどうかを判定
 </summary>
 <param name="prmStr">対象文字列</param>
 <returns>TRUE(全角半角混在あり）／FALSE(半角全角混在なし)</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.isOnlyNStr(System.String)">
 <summary>
 半角のみチェック 文字列中に全角が混在しているかどうかを判定
 </summary>
 <param name="prmStr">対象文字列</param>
 <returns>TRUE(半角のみ）／FALSE(全角あり)</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.dividePathAndFile(System.String,System.String@,System.String@)">
 <summary>
 ディレクトリ・ファイル名分割 フルパスのファイル名をディレクトリ・ファイル名に分割する
 </summary>
 <param name="prmFullPath">フルパス</param>
 <param name="prmRefPath">ディレクトリ</param>
 <param name="prmRefFile">ファイル名</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.roundDown(System.Double)">
 <summary>
 切捨て　入力パラメタの数値を切り捨てして返却
 </summary>
 <param name="prmNum">パラメタ</param>
 <returns>処理値</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.roundDown(System.Double,System.Int16)">
 <summary>
 切捨て　入力パラメタの数値を切捨てして返却
 </summary>
 <param name="prmNum">パラメタ</param>
 <param name="prmDigit">実行桁(少数第１位で切捨ての場合[1]、一の位の場合[-1])</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.roundUp(System.Double)">
 <summary>
 切り上げ　入力パラメタの数値を切り上げして返却
 </summary>
 <param name="prmNum">パラメタ</param>
 <returns>処理値</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.roundUp(System.Double,System.Int16)">
 <summary>
 切り上げ　入力パラメタの数値を切り上げして返却
 </summary>
 <param name="prmNum">パラメタ</param>
 <param name="prmDigit">実行桁(少数第１位で切り上げの場合[1]、一の位の場合[-1])</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.roundOff(System.Double)">
 <summary>
 四捨五入　入力パラメタの数値を四捨五入して返却
 </summary>
 <param name="prmNum">パラメタ</param>
 <returns>処理値</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.roundOff(System.Double,System.Int16)">
 <summary>
 四捨五入　入力パラメタの数値を四捨五入して返却
 </summary>
 <param name="prmNum">パラメタ</param>
 <param name="prmDigit">実行桁(少数第１位で四捨五入の場合[1]、一の位の場合[-1])</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.selAll(System.Object@)">
 <summary>
 コントロール全選択状態生成　入力パラメタのコントロールを全選択状態とする
 </summary>
 <param name="prmRefObj">対象コントロール(TextBox,MskedTextBoxを想定)</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.getComputerName">
 <summary>
 実行端末のコンピュータ名を取得する
 </summary>
 <returns>端末名</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.getComputerIP">
 <summary>
 実行端末のIPを取得する
 </summary>
 <returns>IP</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.getComputerNameFromIP(System.String)">
 <summary>
 IPから端末名を取得する
 </summary>
 <param name="prmIP">IP</param>
 <returns>端末名</returns>
 <remarks>DNSが逆引きをサポートしていること。</remarks>
</member>
<member name="M:UtilMDL.UtilClass.getComputerIPFromName(System.String)">
 <summary>
 端末名からIPを取得する
 </summary>
 <param name="prmComputerName">端末名</param>
 <returns>IP</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.getBln">
 <summary>
 BooleanのTypeを返却する
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.getStr">
 <summary>
 StringのTypeを返却する
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.getSho">
 <summary>
 ShortのTypeを返却する
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.getInt">
 <summary>
 IntegerのTypeを返却する
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.getLng">
 <summary>
 LongのTypeを返却する
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.getSgl">
 <summary>
 SingleのTypeを返却する
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.getDbl">
 <summary>
 DoubleのTypeを返却する
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.getDte">
 <summary>
 DateTimeのTypeを返却する
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.getObj">
 <summary>
 ObjectのTypeを返却する
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.getBte">
 <summary>
 ByteのTypeを返却する
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.UtilClass.IsExistString(System.String)">
 <summary>
 空白判定
 </summary>
 <returns>True=空白では無い, False=空白</returns>
 <remarks></remarks>
</member>
<member name="T:UtilMDL.xls.UtilExcelHandler.HorizontalAlignment">
 <summary>
 横位置を表す列挙体
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.xls.UtilExcelHandler.HorizontalAlignment.Left">
 <summary>
 左寄せ
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.xls.UtilExcelHandler.HorizontalAlignment.Center">
 <summary>
 中央寄せ
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.xls.UtilExcelHandler.HorizontalAlignment.Right">
 <summary>
 右寄せ
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.xls.UtilExcelHandler.HorizontalAlignment.CenterAcrossSelection">
 <summary>
 選択範囲で中央寄せ
 </summary>
 <remarks></remarks>
</member>
<member name="T:UtilMDL.xls.UtilExcelHandler.VerticalAlignment">
 <summary>
 縦位置を表す列挙体
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.xls.UtilExcelHandler.VerticalAlignment.Top">
 <summary>
 上寄せ
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.xls.UtilExcelHandler.VerticalAlignment.Center">
 <summary>
 中央寄せ
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.xls.UtilExcelHandler.VerticalAlignment.Bottom">
 <summary>
 下寄せ
 </summary>
 <remarks></remarks>
</member>
<member name="P:UtilMDL.xls.UtilExcelHandler.targetSheet">
 <summary>
 対象シート
 </summary>
 <value>シート名</value>
 <returns>シート名</returns>
 <remarks></remarks>
</member>
<member name="P:UtilMDL.xls.UtilExcelHandler.targetSheetByIdx">
 <summary>
 対象シート(インデックス指定用)
 </summary>
 <value>インデックス(1～)</value>
 <returns>インデックス(1～)</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.#ctor(System.String,System.Boolean)">
 <summary>
 コンストラクタ
 </summary>
 <param name="prmFile">操作対象ファイル名</param>
 <param name="prmCreate">ファイルを作成するかどうかのフラグ</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.Finalize">
 <summary>
 デストラクタ
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.endUse">
 <summary>
 ExcelObject(COM)の開放処理　※メモリリーク対策
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.create">
 <summary>
 ファイル作成　createメソッドの呼出し後、編集が終わったらcloseメソッドを呼び出すこと
 </summary>
 <remarks>一旦呼出した後は再度呼び出すことを禁止</remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.open">
 <summary>
 ファイルオープン　openメソッドの呼出し後、編集が終わったらcloseメソッドを呼び出すこと
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.close(System.Boolean)">
 <summary>
 ファイルクローズ
 </summary>
 <param name="prmSaveFlg">保存するかどうかのフラグ</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.display">
 <summary>
 xlsファイルをExcelアプリケーションで表示する
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.printOut">
 <summary>
 指定したワークシートを印刷する
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.printPreview">
 <summary>
 指定したワークシートを印刷プレビューモードで表示する
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.selectSheet(System.String)">
 <summary>
 指定したワークシートを選択する
 </summary>
 <param name="prmName"></param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.selectRange(System.Int16,System.Int16,System.Int16,System.Int16)">
 <summary>
 指定したレンジを選択する　prmRow2/prmCol2を省略した場合は、それぞれprmRow/prmColと同値を採用する
 </summary>
 <param name="prmRow">開始行</param>
 <param name="prmCol">開始列</param>
 <param name="prmRow2">終了行</param>
 <param name="prmCol2">終了列</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.selectCell(System.Int16,System.Int16)">
 <summary>
 指定したセルを選択する
 </summary>
 <param name="prmRow">行</param>
 <param name="prmCol">列</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.selectRow(System.Int16,System.Int16)">
 <summary>
 指定した行を選択する
 </summary>
 <param name="prmRow">行</param>
 <param name="prmRow2">列</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.copyRow(System.Int16,System.Int16)">
 <summary>
 行コピー　prmRow2を省略した場合は、prmRowと同値を採用する
 </summary>
 <param name="prmRow">開始行</param>
 <param name="prmRow2">終了行</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.copyCol(System.Int16,System.Int16)">
 <summary>
 列コピー　prmCol2を省略した場合は、prmColと同値を採用する
 </summary>
 <param name="prmCol">開始列</param>
 <param name="prmCol2">終了列</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.copyRange(System.Int16,System.Int16,System.Int16,System.Int16)">
 <summary>
 レンジコピー　prmRow2/prmCol2を省略した場合は、それぞれprmRow/prmColと同値を採用する
 </summary>
 <param name="prmRow">開始行</param>
 <param name="prmCol">開始列</param>
 <param name="prmRow2">終了行</param>
 <param name="prmCol2">終了列</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.copyCell(System.Int16,System.Int16)">
 <summary>
 セルコピー
 </summary>
 <param name="prmRow">行</param>
 <param name="prmCol">列</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.paste(System.Int16,System.Int16)">
 <summary>
 貼り付け
 </summary>
 <param name="prmRow">行</param>
 <param name="prmCol">列</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.pasteFormat(System.Int16,System.Int16)">
 <summary>
 書式貼り付け
 </summary>
 <param name="prmRow">行</param>
 <param name="prmCol">列</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.pasteValue(System.Int16,System.Int16)">
 <summary>
 値貼り付け
 </summary>
 <param name="prmRow">行</param>
 <param name="prmCol">列</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.insertPasteRow(System.Int16,System.Int16)">
 <summary>
 行挿入貼り付け　prmRow2を省略した場合は、prmRowと同値を採用する
 </summary>
 <param name="prmRow">開始行</param>
 <param name="prmRow2">終了行</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.insertPasteCol(System.Int16,System.Int16)">
 <summary>
 列挿入貼り付け　prmCol2を省略した場合は、prmColと同値を採用する
 </summary>
 <param name="prmCol">開始列</param>
 <param name="prmCol2">終了列</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.deleteRow(System.Int16,System.Int16)">
 <summary>
 行削除　prmRow2を省略した場合は、prmRowと同値を採用する
 </summary>
 <param name="prmRow">開始行</param>
 <param name="prmRow2">終了行</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.insertRow(System.Int16,System.Int16)">
 <summary>
 行追加　prmRow2を省略した場合は、prmRowと同値を採用する
 </summary>
 <param name="prmRow">開始行</param>
 <param name="prmRow2">終了行</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.deleteCol(System.Int16,System.Int16)">
 <summary>
 列削除　prmCol2を省略した場合は、prmColと同値を採用する
 </summary>
 <param name="prmCol">開始列</param>
 <param name="prmCol2">終了列</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.insertCol(System.Int16,System.Int16)">
 <summary>
 列追加　prmCol2を省略した場合は、prmColと同値を採用する
 </summary>
 <param name="prmCol">開始列</param>
 <param name="prmCol2">終了列</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.getText(System.Int16,System.Int16)">
 <summary>
 セル値取得(セル上に表示されているもの：カンマ編集済み文字列や、￥編集済み文字列など)
 </summary>
 <param name="prmRow">行</param>
 <param name="prmCol">列</param>
 <returns>取得文字列</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.getValue(System.Int16,System.Int16)">
 <summary>
 セル値取得(セルに実際に格納されている値→式の場合は式の結果)
 </summary>
 <param name="prmRow">行</param>
 <param name="prmCol">列</param>
 <returns>取得文字列</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.getFormula(System.Int16,System.Int16)">
 <summary>
 セル値取得(セルに格納されている式自体)
 </summary>
 <param name="prmRow">行</param>
 <param name="prmCol">列</param>
 <returns>取得文字列</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.setValue(System.String,System.Int16,System.Int16)">
 <summary>
 セル値設定(セルに格納する値→式を格納する場合はsetFormulaを利用のこと)
 </summary>
 <param name="prmText">設定文字列</param>
 <param name="prmRow">行</param>
 <param name="prmCol">列</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.setValueA1(System.String,System.String)">
 <summary>
 セル値設定(Ａ１形式)
 </summary>
 <param name="prmText">設定文字列</param>
 <param name="prmCell">出力セル（Ａ１形式）</param>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.setFormula(System.String,System.Int16,System.Int16)">
 <summary>
 セル値設定(セルに格納する式→値を格納する場合はsetValueを利用のこと)
 </summary>
 <param name="prmFormula">設定式</param>
 <param name="prmRow">行</param>
 <param name="prmCol">列</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.drawRuledLine(UtilMDL.xls.LineVO,System.Int16,System.Int16,System.Int16,System.Int16)">
 <summary>
 罫線設定　prmRow2/prmCol2を省略した場合は、それぞれprmRow/prmColと同値を採用する
 </summary>
 <param name="prmLineVO">罫線書式を格納したVO</param>
 <param name="prmRow">開始行</param>
 <param name="prmCol">開始列</param>
 <param name="prmRow2">終了行</param>
 <param name="prmCol2">終了列</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.setColor(System.Drawing.Color,System.Int16,System.Int16,System.Int16,System.Int16)">
 <summary>
 背景色設定　prmRow2/prmCol2を省略した場合は、それぞれprmRow/prmColと同値を採用する
 </summary>
 <param name="prmColor">設定する背景色</param>
 <param name="prmRow">開始行</param>
 <param name="prmCol">開始列</param>
 <param name="prmRow2">終了行</param>
 <param name="prmCol2">終了列</param>
 <remarks>2007.08.10 add by Laevigata, Inc.</remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.setFont(System.Drawing.Font,System.Drawing.Color,System.Int16,System.Int16,System.Int16,System.Int16)">
 <summary>
 フォント設定　prmRow2/prmCol2を省略した場合は、それぞれprmRow/prmColと同値を採用する
 </summary>
 <param name="prmFont">設定するフォント</param>
 <param name="prmColor">設定するフォント色</param>
 <param name="prmRow">開始行</param>
 <param name="prmCol">開始列</param>
 <param name="prmRow2">終了行</param>
 <param name="prmCol2">終了列</param>
 <remarks>2007.08.10 add by Laevigata, Inc.</remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.setNumberFormat(System.String,System.Int16,System.Int16,System.Int16,System.Int16)">
 <summary>
 表示形式設定　prmRow2/prmCol2を省略した場合は、それぞれprmRow/prmColと同値を採用する
 </summary>
 <param name="prmNumberFormatLocal">表示書式　例："G/標準" (Excelマクロ同一記述のこと)</param>
 <param name="prmRow">開始行</param>
 <param name="prmCol">開始列</param>
 <param name="prmRow2">終了行</param>
 <param name="prmCol2">終了列</param>
 <remarks>2007.08.10 add by Laevigata, Inc.</remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.setHorizontalPos(UtilMDL.xls.UtilExcelHandler.HorizontalAlignment,System.Int16,System.Int16,System.Int16,System.Int16)">
 <summary>
 横位置設定(左寄せ/中央寄せ/右寄せ/選択範囲で中央寄せ)　prmRow2/prmCol2を省略した場合は、それぞれprmRow/prmColと同値を採用する
 </summary>
 <param name="prmPos">横位置を表す列挙体</param>
 <param name="prmRow">開始行</param>
 <param name="prmCol">開始列</param>
 <param name="prmRow2">終了行</param>
 <param name="prmCol2">終了列</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.setVerticalPos(UtilMDL.xls.UtilExcelHandler.VerticalAlignment,System.Int16,System.Int16,System.Int16,System.Int16)">
 <summary>
 縦位置設定(上寄せ/中央寄せ/下寄せ)　prmRow2/prmCol2を省略した場合は、それぞれprmRow/prmColと同値を採用する
 </summary>
 <param name="prmPos">縦位置を表す列挙体</param>
 <param name="prmRow">開始行</param>
 <param name="prmCol">開始列</param>
 <param name="prmRow2">終了行</param>
 <param name="prmCol2">終了列</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.combineCell(System.Int16,System.Int16,System.Int16,System.Int16)">
 <summary>
 セル結合　prmRow2/prmCol2を省略した場合は、それぞれprmRow/prmColと同値を採用する
 </summary>
 <param name="prmRow">開始行</param>
 <param name="prmCol">開始列</param>
 <param name="prmRow2">終了行</param>
 <param name="prmCol2">終了列</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.freezeWindow(System.Int16,System.Int16)">
 <summary>
 ウィンドウ固定
 </summary>
 <param name="prmRow">行</param>
 <param name="prmCol">列</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.setHeader(System.String,System.String,System.String)">
 <summary>
 ヘッダー設定　Excelマクロ同一記述のこと
 </summary>
 <param name="prmLeftStr">左ヘッダ</param>
 <param name="prmMidStr">中央ヘッダ</param>
 <param name="prmRightStr">右ヘッダ</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.setFooter(System.String,System.String,System.String)">
 <summary>
 フッター設定　Excelマクロ同一記述のこと
 </summary>
 <param name="prmLeftStr">左フッタ</param>
 <param name="prmMidStr">中央フッタ</param>
 <param name="prmRightStr">右フッタ</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.setUpPageDefine(UtilMDL.xls.PageSetUpVO)">
 <summary>
 ページ設定
 </summary>
 <param name="prmPageVO">ページセットアップVO</param>
 <remarks>2007.08.10 add by Laevigata, Inc.</remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.AutoFilter">
 <summary>
 オートフィルタ
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.copySheet(System.String)">
 <summary>
 シートコピー(後ろに)
 </summary>
 <param name="prmNewSheetName">新しいシート名</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.copySheetBefore(System.String)">
 <summary>
 シートコピー(前に)
 </summary>
 <param name="prmNewSheetName">新しいシート名</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.copySheetOnLast(System.String)">
 <summary>
 シートコピー(末尾へ)
 </summary>
 <param name="prmNewSheetName">新しいシート名</param>
 <remarks>2010.02.17 Created by Laevigata, Inc.</remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.deleteSheet(System.String)">
 <summary>
 シート削除
 </summary>
 <param name="prmSheetName">削除するシート名</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.breakPage(System.Int16,System.Int16)">
 <summary>
 指定行列の右下に改ページを挿入する
 </summary>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.setShapeTextBox(System.String,System.String)">
 <summary>
 テキストボックに文字出力
 </summary>
 <param name="prmShapeTextBoxNm">テキストボック名</param>
 <param name="prmTextVal">出力文字列</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.UtilExcelHandler.paintShape(System.String,System.Int16,System.Int16,System.Int16)">
 <summary>
 背景色の塗りつぶし
 </summary>
 <param name="prmShapeTextBoxNm">ボックス名</param>
 <param name="prmColorRed">RGBの赤</param>
 <param name="prmColorGreen">RGBの緑</param>
 <param name="prmColorBlue">RGBの青</param>
 <remarks></remarks>
</member>
<member name="T:UtilMDL.xls.LineVO.LineType">
 <summary>
 罫線種列挙体
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.xls.LineVO.LineType.NomalL">
 <summary>
 通常
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.xls.LineVO.LineType.BrokenL">
 <summary>
 破線
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.xls.LineVO.LineType.BoldL">
 <summary>
 太線
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.xls.LineVO.LineType.DoubleL">
 <summary>
 二重線
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.xls.LineVO.LineType.None">
 <summary>
 罫線なし
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.xls.LineVO.LineType.Null">
 <summary>
 未定義(初期値)
 </summary>
 <remarks></remarks>
</member>
<member name="P:UtilMDL.xls.LineVO.Left">
 <summary>
 左
 </summary>
 <value>罫線種列挙体</value>
 <returns>罫線種列挙体</returns>
 <remarks></remarks>
</member>
<member name="P:UtilMDL.xls.LineVO.Top">
 <summary>
 上
 </summary>
 <value>罫線種列挙体</value>
 <returns>罫線種列挙体</returns>
 <remarks></remarks>
</member>
<member name="P:UtilMDL.xls.LineVO.Right">
 <summary>
 右
 </summary>
 <value>罫線種列挙体</value>
 <returns>罫線種列挙体</returns>
 <remarks></remarks>
</member>
<member name="P:UtilMDL.xls.LineVO.Bottom">
 <summary>
 下
 </summary>
 <value>罫線種列挙体</value>
 <returns>罫線種列挙体</returns>
 <remarks></remarks>
</member>
<member name="P:UtilMDL.xls.LineVO.VerticalMiddle">
 <summary>
 中間縦
 </summary>
 <value>罫線種列挙体</value>
 <returns>罫線種列挙体</returns>
 <remarks></remarks>
</member>
<member name="P:UtilMDL.xls.LineVO.HorizontalMiddle">
 <summary>
 中間横
 </summary>
 <value>罫線種列挙体</value>
 <returns>罫線種列挙体</returns>
 <remarks></remarks>
</member>
<member name="T:UtilMDL.xls.PageSetUpVO.OrientationType">
 <summary>
 ページ縦横(印刷の向き)
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.xls.PageSetUpVO.OrientationType.Portrait">
 <summary>
 縦
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.xls.PageSetUpVO.OrientationType.Landscape">
 <summary>
 横
 </summary>
 <remarks></remarks>
</member>
<member name="T:UtilMDL.xls.PageSetUpVO.PaperSizeType">
 <summary>
 用紙サイズ
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.xls.PageSetUpVO.PaperSizeType.A4">
 <summary>
 A4 (210 mm x 297 mm)  
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.xls.PageSetUpVO.PaperSizeType.A5">
 <summary>
 A5 (148 mm x 210 mm) 
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.xls.PageSetUpVO.PaperSizeType.B5">
 <summary>
 B5 (182 mm x 257 mm) 
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.xls.PageSetUpVO.PaperSizeType.A3">
 <summary>
 A3 (297 mm x 420 mm) 
 </summary>
 <remarks></remarks>
</member>
<member name="F:UtilMDL.xls.PageSetUpVO.PaperSizeType.B4">
 <summary>
 B4 (250 mm x 354 mm) 
 </summary>
 <remarks></remarks>
</member>
<member name="P:UtilMDL.xls.PageSetUpVO.Orientation">
 <summary>
 ページ縦横(印刷の向き)
 </summary>
 <value>ページ縦横(印刷の向き)列挙体</value>
 <returns>ページ縦横(印刷の向き)列挙体</returns>
 <remarks></remarks>
</member>
<member name="P:UtilMDL.xls.PageSetUpVO.Zoom">
 <summary>
 拡大/縮小率
 </summary>
 <value>パーセンテージ</value>
 <returns>パーセンテージ</returns>
 <remarks></remarks>
</member>
<member name="P:UtilMDL.xls.PageSetUpVO.PaperSize">
 <summary>
 用紙サイズ
 </summary>
 <value>用紙サイズ列挙体</value>
 <returns>用紙サイズ列挙体</returns>
 <remarks></remarks>
</member>
<member name="P:UtilMDL.xls.PageSetUpVO.LeftMargin">
 <summary>
 左マージン
 </summary>
 <value>マージン(インチ)</value>
 <returns>マージン(インチ)</returns>
 <remarks></remarks>
</member>
<member name="P:UtilMDL.xls.PageSetUpVO.RightMargin">
 <summary>
 右マージン
 </summary>
 <value>マージン(インチ)</value>
 <returns>マージン(インチ)</returns>
 <remarks></remarks>
</member>
<member name="P:UtilMDL.xls.PageSetUpVO.TopMargin">
 <summary>
 上マージン
 </summary>
 <value>マージン(インチ)</value>
 <returns>マージン(インチ)</returns>
 <remarks></remarks>
</member>
<member name="P:UtilMDL.xls.PageSetUpVO.BottomMargin">
 <summary>
 下マージン
 </summary>
 <value>マージン(インチ)</value>
 <returns>マージン(インチ)</returns>
 <remarks></remarks>
</member>
<member name="P:UtilMDL.xls.PageSetUpVO.HeaderMargin">
 <summary>
 ヘッダマージン
 </summary>
 <value>マージン(インチ)</value>
 <returns>マージン(インチ)</returns>
 <remarks></remarks>
</member>
<member name="P:UtilMDL.xls.PageSetUpVO.FooterMargin">
 <summary>
 フッタマージン
 </summary>
 <value>マージン(インチ)</value>
 <returns>マージン(インチ)</returns>
 <remarks></remarks>
</member>
<member name="P:UtilMDL.xls.PageSetUpVO.PrintTitleRows">
 <summary>
 印刷行タイトル
 </summary>
 <returns>行タイトル文字列</returns>
 <remarks></remarks>
</member>
<member name="P:UtilMDL.xls.PageSetUpVO.PrintTitleColumns">
 <summary>
 印刷列タイトル
 </summary>
 <returns>列タイトル文字列</returns>
 <remarks></remarks>
</member>
<member name="P:UtilMDL.xls.PageSetUpVO.PrintArea">
 <summary>
 印刷範囲
 </summary>
 <returns>印刷範囲文字列</returns>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.PageSetUpVO.setPrintArea(System.Int16,System.Int16,System.Int16,System.Int16)">
 <summary>
 印刷範囲設定
 </summary>
 <param name="prmRow">開始行</param>
 <param name="prmCol">開始列</param>
 <param name="prmRow2">終了行</param>
 <param name="prmCol2">終了列</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.PageSetUpVO.getPrintArea(System.Int16@,System.Int16@,System.Int16@,System.Int16@)">
 <summary>
 印刷範囲取得
 </summary>
 <param name="prmRefRow">開始行</param>
 <param name="prmRefCol">開始列</param>
 <param name="prmRefRow2">終了行</param>
 <param name="prmRefCol2">終了列</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.PageSetUpVO.setPrintTitleRows(System.Int16,System.Int16)">
 <summary>
 印刷行タイトル設定
 </summary>
 <param name="prmRow">開始行</param>
 <param name="prmRow2">終了行</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.PageSetUpVO.getPrintTitleRows(System.Int16@,System.Int16@)">
 <summary>
 印刷行タイトル取得
 </summary>
 <param name="prmRefRow">開始行</param>
 <param name="prmRefRow2">終了行</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.PageSetUpVO.setPrintTitleColumns(System.Int16,System.Int16)">
 <summary>
 印刷列タイトル設定
 </summary>
 <param name="prmCol">開始列</param>
 <param name="prmCol2">終了列</param>
 <remarks></remarks>
</member>
<member name="M:UtilMDL.xls.PageSetUpVO.getPrintTitleColumns(System.Int16@,System.Int16@)">
 <summary>
 印刷列タイトル取得
 </summary>
 <param name="prmRefCol">開始列</param>
 <param name="prmRefCol2">終了列</param>
 <remarks></remarks>
</member>
</members>
</doc>
